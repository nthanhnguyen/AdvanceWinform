<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1Editor.4.5.2</name>
    </assembly>
    <members>
        <member name="M:GrapeCity.Common.GcNetFxLicenseProvider`1.VerifyDesignTimeEnvironment">
            <summary>
              Verify the environment to get whether the component is in design-time. 
            </summary>
            <returns>
              <c>true</c> if it is in design-time; otherwise <c>false</c>.
            </returns>
            <remarks>
              In DesignTime, because of IDE bugs, some component are not created with DesigntimeLicenseContext. 
              For example, when drag a control from Win Forms DataSource tool window, or use a web control in a ASP.NET Template.
              This may cause the control do run-time license validation and found that there is no license.
              To resolve this problem, we will check the environment and decide whether to do design-time license validation again.
            </remarks>
        </member>
        <member name="F:GrapeCity.Common.LicenseDialog`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseResource">
            <summary>
              Contains the resource for PowerToolsLicenseProvider
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ErrorIcon">
            <summary>
              Gets the Error icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.InfoIcon">
            <summary>
              Gets the Info icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.WarningIcon">
            <summary>
              Gets the Warning icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.GrapeCityIcon">
            <summary>
              Gets the GrapeCity icon for license dialog.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String)">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String,System.Object[])">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <param name="args">
              The data used in the string.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
              Get the file version description of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose file version description should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the file version description of the specified assembly.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
              Get the name of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose name should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the name of the specified assembly.
            </returns>
            <remarks>
              Please use this method to get assembly name. It is because that the Assembly.GetName method need FileIO permission.
            </remarks>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.FormatSerialKey(System.String)">
            <summary>
              Format the product key as "xxxx-xxxx-xxxx-xxxx-xxxx-xxxx".
            </summary>
            <param name="productKey">
              A <see cref="T:System.String"/> indicates the original product key which is a sequence of 24 digits.
            </param>
            <returns>
              A readable text indicates the product key.
            </returns>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogKind">
            <summary>
              Represents the kind of license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Info">
            <summary>
              Info dialog. It is shown for a trial license.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Warning">
            <summary>
              Warning dialog. It is shown for a trial license which is expired.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Error">
            <summary>
              Error dialog. It is shown for an invalid license or other errors.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget">
            <summary>
              Represents the target web site for the link in license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.None">
            <summary>
              None target.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebFAQ">
            <summary>
              Goto web site http://www.grapecity.com/support/portal/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebActivation">
            <summary>
              Goto web site http://www.grapecity.com/componentone/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebShop">
            <summary>
              Goto web site http://www.grapecity.com/pricing/componentone/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoHowToActivate">
            <summary>
              Goto web site http://www.grapecity.com/componentone/docs/license/online-license/overview.html.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoLicenseRenewal">
            <summary>
              Goto web site https://www.grapecity.com/sales/componentone-faq/.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.WinFormLicenseProvider`1">
            <summary>
              Represents a license provider of a Windows Forms PowerTools component.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.ControlLocalizeRules">
            <summary>
            Defines the default rules of enduser localization.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.Design.ControlLocalizeRules.GetLocalizedProperties(System.Type,System.Object)">
            <summary>
            Returns the list of properties that should be localized
            for specified type of control.
            </summary>
            <param name="controlType">Type of control.</param>
            <param name="endUserLocalizeOptions">The EndUserLocalizeOptionsAttribute specified for type.</param>
            <returns>Returns the list of properties' names or null if control should no localized.</returns>
        </member>
        <member name="P:C1.Win.Localization.Design.Product.Projects">
            <summary>
            Gets the list of projects containing this product.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.PropsStoreBase">
            <summary>
            Base class for store properties of visual controls, position of form for example.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.ResourceItemCollection">
            <summary>
            Collection of ResourceItem objects.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.Design.ResourceItemCollection.GetStrings(System.Collections.Generic.List{C1.Win.Localization.Design.ResourceString})">
            <summary>
            Fills a list with all ResourceString objects containing
            in this collection and all its nested collections.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.ResourceItemCollection.HasChanged">
            <summary>
            Returns true if collection or any of its children
            has changed items.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.ResourceString">
            <summary>
            Represents the resource string for all cultures.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.ResourceStringValues">
            <summary>
            Contains values for each culture.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.ResourceGroup">
            <summary>
            Represents the group of resource strings.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.ControlsResourceGroup">
            <summary>
            Represents the group of resources containing the 
            strings for localizing the visual controls 
            (forms, user controls, controls on forms, etc).
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.ControlResourceGroup">
            <summary>
            Represents the group of resource string containing the
            strings for localizing the separate control.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.RootResourceGroup">
            <summary>
            Represents the root resource group containing all other resources.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.RootResourceGroup.Cultures">
            <summary>
            Gets the list of all cultures in the resources.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.Design.Utils.GetImage(System.String)">
            <summary>
            Loads an image from the entry assembly. 
            </summary>
            <param name="name">The name of the requested image.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> if it is found; null otherwise.</returns>
        </member>
        <member name="M:C1.Win.Localization.Design.Utils.GetImage(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an image from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load image from.</param>
            <param name="name">The name of the requested image.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> if it is found; null otherwise.</returns>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings">
            <summary>
            Contains localizable design-time strings.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Warning">
            <summary>
            Gets the "Warning" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Question">
            <summary>
            Gets the "Question" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.None">
            <summary>
            Gets the "None" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Error">
            <summary>
            Gets the "Error" string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings.RootResourceGroup">
            <summary>
            Contains localizable design-time strings for the root group.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.RootResourceGroup.ReadOnlyFile">
            <summary>
            Gets the "overwrite a readonly file?" format string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings.RootResourceGroup.Errors">
            <summary>
            Contains error strings.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.RootResourceGroup.Errors.SaveToFile">
            <summary>
            Gets the "errors while saving resources" format string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings.StringsDesigner">
            <summary>
            Contains strings designer strings.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.StringsDesigner.AllStringsCaption">
            <summary>
            Gets the "All" string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings.StringsDesigner.Errors">
            <summary>
            Contains error strings.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.StringsDesigner.Errors.CantInitializeDte">
            <summary>
            Gets the "Localizer can be used under MS Visual Studio only." string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer">
            <summary>
            Contains localizer strings.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.DesignActionCaption">
            <summary>
            Gets the "Localize..." string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.CultureAlreadyExists">
            <summary>
            Gets the "Culture [{0}] already added to the current translation." format string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.LoadResXStringsException">
            <summary>
            Gets the "Exception occurs during loading strings from resource file:\r{0}\rException message:\r{1}" format string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.SaveQuestion">
            <summary>
            Gets the "The translation has been changed, save?" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.NewTranslation">
            <summary>
            Gets the "Select product to translate" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.SaveAsDialogCaption">
            <summary>
            Gets the "Select project to store translation" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.ImageResourceNotFound">
            <summary>
            Gets the "Resource image with name [{0}] is not found." format string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.InvariantCultureDescription">
            <summary>
            Gets the "Invariant culture" string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.DeleteCultureWarning">
            <summary>
            Gets the "You have selected {0} culture to delete, there are {1} strings of this culture. Are you sure?" format string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.DeleteCulturesWarning">
            <summary>
            Gets the "You have selected {0} cultures to delete, there are {1} strings of these cultures. Are you sure?" format string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.CantCreateLocalizedFolder">
            <summary>
            Gets the "Can't create the [{0}] folder in the project.\rError message:\r{1}" format string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.OpenTranslationDialog">
            <summary>
            Contains the open translation dialog strings.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.OpenTranslationDialog.SolutionMask">
            <summary>
            Gets the "Solution '{0}'" format string.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.Design.DesignLocalizationStrings.Localizer.OpenTranslationDialog.NoCultures">
            <summary>
            Gets the "Can't build list of cultures" string.
            </summary>
        </member>
        <member name="F:C1.Win.Localization.Design.DeleteCultureDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.Design.DeleteCultureDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.Localization.Design.DeleteCultureDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.Localization.Design.OpenTranslationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.Design.OpenTranslationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.Localization.Design.OpenTranslationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.Localization.Design.SelectCultureDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.Design.SelectCultureDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.Localization.Design.SelectCultureDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.Localization.Design.SelectProductDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.Design.SelectProductDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.Localization.Design.SelectProductDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.Localization.Design.SelectProjectDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.Design.SelectProjectDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.Localization.Design.SelectProjectDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.Design.LocalizeActionList">
            <summary>
            Represents a localization <see cref="T:System.ComponentModel.Design.DesignerActionList"/>.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.Design.LocalizeActionList.#ctor(System.ComponentModel.IComponent,System.ComponentModel.Design.ComponentDesigner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.Design.LocalizeActionList"/> class.
            </summary>
            <param name="component">The designed component.</param>
            <param name="designer">The component designer.</param>
        </member>
        <member name="M:C1.Win.Localization.Design.LocalizeActionList.GetSortedActionItems">
            <summary>
            Returns the list of associated action items.
            </summary>
            <returns>The list containing the "Localize" item.</returns>
        </member>
        <member name="M:C1.Win.Localization.Design.LocalizeActionList.Localize">
            <summary>
            Performs localizaion.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.Design.LocalizeActionList.Localize(System.ComponentModel.Design.ComponentDesigner)">
            <summary>
            Performs localizaion.
            </summary>
            <param name="designer">The designer to localize.</param>
        </member>
        <member name="M:C1.Win.Localization.Design.StringsDesigner.New">
            <summary>
            Create the new translation.
            </summary>
        </member>
        <member name="F:C1.Win.Localization.Design.StringsDesigner.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.Design.StringsDesigner.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.Localization.Design.StringsDesigner.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.Xhtml.Common.IsEmptyXml(System.String)">
            <summary>
            Checks if string doesn't contain any character data
            </summary>
            <param name="xml">input xml</param>
            <returns>true if string contains only from spaces, linebreaks e t.c.</returns>
        </member>
        <member name="M:C1.Win.Xhtml.Common.ReplaceDocType(System.String,System.String)">
            <summary>
            Replaces DOCTYPE element in XML string to another DOCTYPE element or empty string
            </summary>
            <param name="xml">xml string</param>
            <param name="newDocType">new DOCTYPE</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Xhtml.Common.MakeAbsolutePath(System.String,System.Boolean,System.String)">
            <summary>
            Converts url to absolute using base absolute url
            </summary>
            <param name="sBaseUrl">base url</param>
            <param name="isDirectory">true means base url is directory</param>
            <param name="url">url to make absolute</param>
            <returns>converted path</returns>
        </member>
        <member name="M:C1.Win.Xhtml.Common.CopyAttributes(System.Xml.XmlElement,System.Xml.XmlElement,System.Collections.Generic.List{System.String})">
            <summary>
            Copies attributes from one xml element to another
            </summary>
            <param name="fromElement">From element</param>
            <param name="toElement">To element</param>
            <param name="exceptAttributes"></param>
        </member>
        <member name="M:C1.Win.Xhtml.Common.HasRealText(System.String)">
            <summary>
            Returns true if text has any text except whitespaces, tabs or carriage returns
            </summary>
            <param name="text">given text</param>
            <returns>true if text has any text except whitespaces, tabs or carriage returns</returns>
        </member>
        <member name="M:C1.Win.Xhtml.Common.CorrectUri(System.String,System.String@)">
            <summary>
            Converts absolute file URI to relative
            </summary>
            <param name="sBaseUrl"></param>
            <param name="sUrl"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Xhtml.Common.GetXmlElementById(System.Xml.XmlDocument,System.String)">
            <summary>
            Finds XmlElement in document by its ID
            </summary>
            <param name="xmlDocument">document</param>
            <param name="id">id</param>
            <returns>Xml element</returns>
        </member>
        <member name="T:C1.Win.Xhtml.CustomTagSupport">
            <summary>
            Provides work with custom tags
            </summary>
        </member>
        <member name="T:C1.Win.Xhtml.CustomTagSupport.ElementType">
            <summary>
            Possible tag types
            </summary>
        </member>
        <member name="T:C1.Win.Xhtml.CustomTagSupport.ConvertMode">
            <summary>
            Converting modes
            </summary>
        </member>
        <member name="T:C1.Win.Xhtml.CustomTagSupport.CustomElement">
            <summary>
            Contains info about custom tag
            </summary>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.Load(System.String)">
            <summary>
            Loads info about custom tags from XML string
            </summary>
            <param name="info">XML string</param>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.RemoveAdHocTags">
            <summary>
            Removes all ad-hoc tags
            </summary>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.AddAdHocTag(C1.Win.Xhtml.CustomTagSupport.ElementType,System.Xml.XmlNode)">
            <summary>
            register new adhoc element and/or its attributes
            </summary>
            <param name="parentElementType">Type of parent element</param>
            <param name="node">Current XML node</param>
            <returns>Created or existed CustomElement</returns>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.ConvertToHTML(System.Xml.XmlNode)">
            <summary>
            Converts node to be appeared in MSHTML
            </summary>
            <param name="node">XML node</param>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.ConvertToHTML(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Converts node to be appeared in MSHTML
            </summary>
            <param name="node">XML node</param>
            <param name="convertAnchorsToCustomBookmarks">If true, all bookmarks in the node will be converted to the custom tags.</param>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.ConvertToHTML(System.String)">
            <summary>
            Converts node to be appeared in MSHTML
            </summary>
            <param name="xml">XML string</param>
            <returns>converted string</returns>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.ConvertToXML(System.String,System.Boolean@)">
            <summary>
            Converts node from MSHTML compatible mode to XML
            </summary>
            <param name="html">HTML string</param>
            <param name="isCorrected"></param>
            <returns>XML string</returns>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.ReadInfo(System.String)">
            <summary>
            Reads info from XML string and fills <see cref="F:C1.Win.Xhtml.CustomTagSupport._hasCustomTags"/>
            </summary>
            <param name="info">info in XML string</param>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.AddCustomTags(System.Xml.XmlNode,C1.Win.Xhtml.CustomTagSupport.ElementType)">
            <summary>
            Adds custom tag to <see cref="F:C1.Win.Xhtml.CustomTagSupport._hasCustomTags"/>
            </summary>
            <param name="node"></param>
            <param name="type"></param>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.ConvertString(System.String,C1.Win.Xhtml.CustomTagSupport.ConvertMode,System.Boolean@)">
            <summary>
            Converts string from one mode to another
            </summary>
            <param name="str">source string</param>
            <param name="mode">mode for converting</param>
            <param name="isCorrected"></param>
            <returns>target string</returns>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.ConvertChildren(System.Xml.XmlNode,C1.Win.Xhtml.CustomTagSupport.ConvertMode,System.Boolean@)">
            <summary>
            Converts children of given xml node
            </summary>
            <param name="node">XML node</param>
            <param name="mode">Mode to convert</param>
            <param name="isCorrected"></param>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.ConvertNode(System.Xml.XmlNode,C1.Win.Xhtml.CustomTagSupport.ConvertMode,System.Boolean@)">
            <summary>
            Converts xml element to given format
            </summary>
            <param name="node">XML element</param>
            <param name="mode">mode to convert</param>
            <param name="isCorrected"></param>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.CorrectHTMLElement(System.Xml.XmlElement,C1.Win.Xhtml.CustomTagSupport.ConvertMode)">
            <summary>
            Corrects HTML tag
            </summary>
            <param name="element">HTML element</param>
            <param name="mode">mode to convert</param>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.CorrectHEADElement(System.Xml.XmlElement,C1.Win.Xhtml.CustomTagSupport.ConvertMode)">
            <summary>
            Corrects HEAD tag
            </summary>
            <param name="element">HEAD element</param>
            <param name="mode">mode to convert</param>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.CorrectOrConvertStyle(System.Xml.XmlElement,C1.Win.Xhtml.CustomTagSupport.ConvertMode)">
            <summary>
            Corrects STYLE tag or converts it to another node
            </summary>
            <param name="element">STYLE element</param>
            <param name="mode">mode to convert</param>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.ConvertLink(System.Xml.XmlElement,C1.Win.Xhtml.CustomTagSupport.ConvertMode)">
            <summary>
            Converts LINK tag to another node
            </summary>
            <param name="element">LINK element</param>
            <param name="mode">mode to convert</param>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.ConvertVmlGraphicsToIMG(System.Xml.XmlElement)">
            <summary>
            Converts VML shapetype element to IMG element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.GetImportCSSString(System.String)">
            <summary>
            Reads CSS text from file
            </summary>
            <param name="href">file name</param>
            <returns>CSS text</returns>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.GetImportCSSString(System.String,System.String)">
            <summary>
            Reads CSS text from file
            </summary>
            <param name="href">file name</param>
            <param name="path">path for concatenating with file name</param>
            <returns>CSS text</returns>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.GetCSSString(System.String)">
            <summary>
            Reads CSS text from string
            </summary>
            <param name="value">CSS string</param>
            <returns>CSS text</returns>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.ConvertStyleSheet(System.String,C1.Win.Xhtml.CustomTagSupport.ConvertMode)">
            <summary>
            Converts CSS text
            Adds namespace for custom elements in MSHTML mode or removes it in XML mode
            </summary>
            <param name="text">CSS text</param>
            <param name="mode">mode to convert</param>
            <returns>converted CSS text</returns>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.ConvertStyleNames(System.String,C1.Win.Xhtml.CustomTagSupport.ConvertMode)">
            <summary>
            Converts specific CSS selector
            </summary>
            <param name="name">CSS selector</param>
            <param name="mode">mode to convert</param>
            <returns>converted CSS selector</returns>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.IsElementBound(System.Char)">
            <summary>
            Returns true if character is bound of token in selector
            </summary>
            <param name="character">given character</param>
            <returns>true if bound</returns>
        </member>
        <member name="M:C1.Win.Xhtml.CustomTagSupport.CorrectXmlString(System.String)">
            <summary>
            MSHTML can return &lt;?xml:namespace tag if custom tag is used
            We must remove it to allow loading to XmlDocument
            </summary>
            <param name="xml">given XML string</param>
            <returns>corrected string</returns>
        </member>
        <member name="T:C1.Win.Xhtml.StyleType">
            <summary>
            Specifies the types of content to which the inline style will be applied.
            </summary>
        </member>
        <member name="F:C1.Win.Xhtml.StyleType.Character">
            <summary>
            Style is applied only to characters in the range.
            </summary>
        </member>
        <member name="F:C1.Win.Xhtml.StyleType.Paragraph">
            <summary>
            Style is applied only to whole paragraphs containing the text range.
            </summary>
        </member>
        <member name="F:C1.Win.Xhtml.StyleType.Table">
            <summary>
            Style is applied only to tables containing the range.
            </summary>
        </member>
        <member name="F:C1.Win.Xhtml.StyleType.List">
            <summary>
            Style is applied only to lists containing the range.
            </summary>
        </member>
        <member name="F:C1.Win.Xhtml.StyleType.Any">
            <summary>
            Style is applied to any kind of content.
            </summary>
        </member>
        <member name="T:C1.Win.Xhtml.XhtmlType">
            <summary>
            Document type.
            </summary>
        </member>
        <member name="F:C1.Win.Xhtml.XhtmlType.Strict">
            <summary>
            Strict xhtml.
            </summary>
        </member>
        <member name="F:C1.Win.Xhtml.XhtmlType.Transitional">
            <summary>
            Transitional xhtml.
            </summary>
            <remarks>
            Allows tags deprecated in strict xhtml, such as "u" and "font"
            </remarks>
        </member>
        <member name="T:C1.Win.Xhtml.ConvertExtraWhitespacesMode">
            <summary>
            Sets mode for consequent white space converting
            Allow - don't convert
            Remove - remove 2 or more consequent whitespaces to single whitespace
            ToNBSP - convert second and next consequent whitespaces to NBSP
            </summary>
        </member>
        <member name="T:C1.Win.Xhtml.InlineStyleSupport">
            <summary>
            Works with style attribute value
            </summary>
        </member>
        <member name="T:C1.Win.Xhtml.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Resources.c1_xhtml_strict">
             <summary>
               Looks up a localized string similar to &lt;!--
               Extensible HTML version 1.0 Strict DTD
            
               This is the same as HTML 4 Strict except for
               changes due to the differences between XML and SGML.
            
               Namespace = http://www.w3.org/1999/xhtml
            
               For further information, see: http://www.w3.org/TR/xhtml1
            
               Copyright (c) 1998-2002 W3C (MIT, INRIA, Keio),
               All Rights Reserved. 
            
               This DTD module is identified by the PUBLIC and SYSTEM identifiers:
            
               PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
               SYSTEM &quot;http://www.w3.org/TR/xhtml1/DTD [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Resources.c1_xhtml_transitional">
             <summary>
               Looks up a localized string similar to &lt;!--
               Extensible HTML version 1.0 Transitional DTD
            
               This is the same as HTML 4 Transitional except for
               changes due to the differences between XML and SGML.
            
               Namespace = http://www.w3.org/1999/xhtml
            
               For further information, see: http://www.w3.org/TR/xhtml1
            
               Copyright (c) 1998-2002 W3C (MIT, INRIA, Keio),
               All Rights Reserved. 
            
               This DTD module is identified by the PUBLIC and SYSTEM identifiers:
            
               PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
               SYSTEM &quot;http://www.w3.org/TR/xhtml1/D [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:C1.Win.Xhtml.Sgml.CaseFolding">
            <summary>
            SGML is case insensitive, so here you can choose between converting
            to lower case or upper case tags.  "None" means that the case is left
            alone, except that end tags will be folded to match the start tags.
            </summary>
        </member>
        <member name="T:C1.Win.Xhtml.Sgml.HWStack">
            <summary>
            This stack maintains a high water mark for allocated objects so the client
            can reuse the objects in the stack to reduce memory allocations, this is
            used to maintain current state of the parser for element stack, and attributes
            in each element.
            </summary>
        </member>
        <member name="T:C1.Win.Xhtml.Sgml.Attribute">
            <summary>
            This class represents an attribute.  The AttDef is assigned
            from a validation process, and is used to provide default values.
            </summary>
        </member>
        <member name="M:C1.Win.Xhtml.Sgml.Attribute.Reset(System.String,System.String,System.Char)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
        </member>
        <member name="T:C1.Win.Xhtml.Sgml.Node">
            <summary>
            This class models an XML node, an array of elements in scope is maintained while parsing
            for validation purposes, and these Node objects are reused to reduce object allocation,
            hence the reset method.  
            </summary>
        </member>
        <member name="M:C1.Win.Xhtml.Sgml.Node.Reset(System.String,System.Xml.XmlNodeType,System.String)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
        </member>
        <member name="T:C1.Win.Xhtml.Sgml.SgmlReader">
            <summary>
            SgmlReader is an XmlReader API over any SGML document 
            (including built in support for HTML).  
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Sgml.SgmlReader.LeaveTextWithoutConvertingToCDATA">
            <summary>
            if true converts text data (f.e. in SCRIPT, STYLE) to CDATA
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Sgml.SgmlReader.Dtd">
            <summary>
            Specify the SgmlDtd object directly.  This allows you to cache the Dtd and share
            it across multipl SgmlReaders.  To load a DTD from a URL use the SystemLiteral property.
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Sgml.SgmlReader.DocType">
            <summary>
            The name of root element specified in the DOCTYPE tag.
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Sgml.SgmlReader.PublicIdentifier">
            <summary>
            The PUBLIC identifier in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Sgml.SgmlReader.SystemLiteral">
            <summary>
            The SYSTEM literal in the DOCTYPE tag identifying the location of the DTD.
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Sgml.SgmlReader.InternalSubset">
            <summary>
            The DTD internal subset in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Sgml.SgmlReader.InputStream">
            <summary>
            The input stream containing SGML data to parse.
            You must specify this property or the Href property before calling Read().
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Sgml.SgmlReader.WebProxy">
            <summary>
            Sometimes you need to specify a proxy server in order to load data via HTTP
            from outside the firewall.  For example: "itgproxy:80".
            </summary>
        </member>
        <member name="M:C1.Win.Xhtml.Sgml.SgmlReader.SetBaseUri(System.String)">
            <summary>
            The base Uri is used to resolve relative Uri's like the SystemLiteral and
            Href properties.  This is a method because BaseURI is a read-only
            property on the base XmlReader class.
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Sgml.SgmlReader.Href">
            <summary>
            Specify the location of the input SGML document as a URL.
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Sgml.SgmlReader.StripDocType">
            <summary>
            Whether to strip out the DOCTYPE tag from the output (default true)
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Sgml.SgmlReader.ErrorLog">
            <summary>
            DTD validation errors are written to this stream.
            </summary>
        </member>
        <member name="P:C1.Win.Xhtml.Sgml.SgmlReader.ErrorLogFile">
            <summary>
            DTD validation errors are written to this log file.
            </summary>
        </member>
        <member name="M:C1.Win.Xhtml.XHTMLSchema.Attribute.IsValidValue(System.String)">
            <summary>
            Returns true if value is valid attribute value
            </summary>
            <param name="value">name to check</param>
            <returns>true if value is valid</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XHTMLSchema.Element.FindChildElementChain(System.String)">
            <summary>
            This method finds chain of nested elements from current element down to <paramref name="name"/> element name
            </summary>
            <param name="name">name of last element in chain</param>
            <returns>array of found </returns>
        </member>
        <member name="M:C1.Win.Xhtml.XHTMLSchema.CheckText(System.String,System.Boolean@,System.Boolean)">
            <summary>
            Modifies xml text by DTD rules
            </summary>
            <param name="xml">xml string</param>
            <param name="isCorrected">Sign, that input string was changed.</param>
            <param name="processExtra">If true, execute special tables and comments processing.</param>
            <returns>modified string</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XHTMLSchema.CheckNode(System.Xml.XmlNode,System.Int32,System.Collections.Generic.List{System.Xml.XmlNode})">
            <summary>
            Modifies XML node by DTD rules
            </summary>
            <param name="node">node to modify</param>
            <param name="level"></param>
            <param name="parentNodesToCheck"></param>
        </member>
        <member name="M:C1.Win.Xhtml.XHTMLSchema.GetElement(System.String)">
            <summary>
            Returns scheme element by name
            </summary>
            <param name="name"></param>
            <returns>element if name exists or null otherwise</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XHTMLSchema.GetStyleAttribute(System.String)">
            <summary>
            Returns style attribute by name
            </summary>
            <param name="name"></param>
            <returns>element if name exists or null otherwise</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XHTMLSchema.IsValidXHTMLElementName(System.String)">
            <summary>
            Gets a value indicating whether the given element is a valid XHTML element.
            </summary>
            <param name="name">Tag name of element.</param>
            <returns>True if the given element is a valid XHTML element; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlNodeHelper.SplitTextNode(System.Xml.XmlCharacterData,System.Int32)">
            <summary>Splits the node into two nodes at the specified offset, keeping both in the tree as siblings.</summary>
            <param name="node">The node to split.</param>
            <param name="offset">The offset at which to split the node.</param>
            <returns>The new node.</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlNodeHelper.SplitNode(System.Xml.XmlNode,System.Xml.XmlNode,System.Boolean,C1.Win.Xhtml.XmlValidator)">
            <summary>
            This methiod splits maxSplitNode in depth using "node" as a bound 
            </summary>
            <param name="node">bound node</param>
            <param name="maxSplitNode">node to split</param>
            <param name="includeNode"></param>
            <param name="validator"></param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlNodeHelper.GetQualifiedStyleNameCollection(System.Xml.XmlElement)">
            <summary>
            Returns a <see cref="T:System.String"></see> array containing the priority
            list of qualified style names for the <see cref="T:System.Xml.XmlElement">XML element</see>
            </summary>
            <returns>
            An array whose elements contain the qualified style names for
            the <see cref="T:System.Xml.XmlElement">element</see> in the priority descending order
            </returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlNodeHelper.GetBodyElement(System.Xml.XmlDocument)">
            <summary>
            Find the 'body' XHTML-element
            </summary>
            <param name="document">XmlDocument</param>
            <returns>XmlElement for 'body' XHTML-element</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlNodeHelper.GetHeadElement(System.Xml.XmlDocument)">
            <summary>
            Find the 'head' XHTML-element
            </summary>
            <param name="document">XmlDocument</param>
            <returns>XmlElement for 'head' XHTML-element</returns>
        </member>
        <member name="P:C1.Win.Xhtml.ValidateError.Tag">
            <summary>
            Gets or sets any object to associate with the error
            </summary>
        </member>
        <member name="T:C1.Win.Xhtml.XmlValidator">
            <summary>
            Performs XML correcting and validating
            Also works with custom tags
            </summary>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.CheckNode(System.Xml.XmlNode)">
            <summary>
            Checks XML node against XHTML DTD
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.CheckNode(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Checks XML node against XHTML DTD
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.LoadCustomization(System.String)">
            <summary>
            Loads custom tags
            </summary>
            <param name="info">info about custom tags in XML format</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.ConvertToHTML(System.String,System.Boolean)">
            <summary>
            Converts given string to HTML compatible mode
            </summary>
            <param name="xml">xml string</param>
            <param name="convertFragment">if true, processes XML string as the XML fragment</param>
            <returns>converted string</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.ConvertToHTML(System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts given string to HTML compatible mode
            </summary>
            <param name="xml">xml string</param>
            <param name="convertFragment">if true, processes XML string as the XML fragment</param>
            <param name="convertAnchorsToCustomBookmarks">If true, all bookmarks in the input string will be converted to the custom tags.</param>
            <returns>converted string</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.ConvertToHTMLModeElement(System.String,System.Boolean)">
            <summary>
            Converts given string to HTML compatible mode
            </summary>
            <param name="xml">xml string</param>
            <param name="convertFragment">if true, processes XML string as the XML fragment</param>
            <returns>converted XmlElement</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.ConvertToHTMLModeElement(System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts given string to HTML compatible mode
            </summary>
            <param name="xml">xml string</param>
            <param name="convertFragment">if true, processes XML string as the XML fragment</param>
            <param name="convertAnchorsToCustomBookmarks">If true, all bookmarks in the input string will be converted to the custom tags.</param>
            <returns>converted XmlElement</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.ConvertToHTML(System.Xml.XmlNode)">
            <summary>
            Converts given xml node to HTML compatible mode 
            </summary>
            <param name="node">XML node to convert</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.ConvertHTMLToXml(System.String,System.String)">
            <summary>
            Converts given string from HTML compatible mode to XML
            </summary>
            <param name="html">HTML element</param>
            <param name="url">Relative URL</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.LoadXmlDocument(System.Xml.XmlDocument,System.String,System.Boolean,System.Boolean,C1.Win.Xhtml.ConvertExtraWhitespacesMode)">
            <summary>
            Loads xml string to XMLDocument, performs checking and probably modifying against XHTML DTD
            </summary>
            <param name="xmlDoc">XML document</param>
            <param name="xml">XML string</param>
            <param name="autofix">if true, automatically fixes invalid document, otherwise asks user for it</param>
            <param name="useXhtmlDtd">if true, uses XHTML DTD for dealing with tags and entities, otherwise uses HTML DTD</param>
            <returns>true if document is loaded</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.LoadXmlDocument(System.Xml.XmlDocument,System.String,System.Boolean,System.Boolean,C1.Win.Xhtml.ConvertExtraWhitespacesMode,System.Boolean)">
            <summary>
            Loads xml string to XMLDocument, performs checking and probably modifying against XHTML DTD
            </summary>
            <param name="xmlDoc">XML document</param>
            <param name="xml">XML string</param>
            <param name="autofix">if true, automatically fixes invalid document, otherwise asks user for it</param>
            <param name="useXhtmlDtd">if true, uses XHTML DTD for dealing with tags and entities, otherwise uses HTML DTD</param>
            <param name="strict">if true, Strict DTD will be used, otherwise Transitional DTD</param>
            <returns>true if document is loaded</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.Validate(System.String,System.Collections.Generic.List{C1.Win.Xhtml.ValidateError}@)">
            <summary>
            Validates source XML and fills errors list
            </summary>
            <param name="xml">input XML string</param>
            <param name="errors">output error list</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.Fix(System.String,System.Boolean@)">
            <summary>
            Checks and sets source XML to validate state
            </summary>
            <param name="xml">input XML string</param>
            <param name="hasErrors">True if errors exists</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.ConvertPathsToRelative(System.Xml.XmlNode,System.String,System.String,System.Boolean@)">
            <summary>
            Convert all paths to relative form
            </summary>
            <param name="node">Input node.</param>
            <param name="oldFileName">Old file name of the document.</param>
            <param name="newFileName">New file name of the document.</param>
            <param name="hasChanges">Return true, if node was changed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.ProcessEmptyParagraphTags(System.Xml.XmlNode,System.Boolean@)">
            <summary>
            Adds required &amp;nbsp; entity to empty (with empty content) paragraph elements.
            </summary>
            <param name="node">Input node.</param>
            <param name="hasChanges">Return true, if node was changed; otherwise, False.</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.CheckEmptyBody(System.Xml.XmlDocument)">
            <summary>
            XmlDocument's body must always contain at least one paragraph for compatibility with MSHTML
            </summary>
            <param name="doc">document to fix</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.CorrectObjectTag(System.String)">
            <summary>
            Sets movie param and src in embed tag for OBJECT tag to path to Media folder
            </summary>
            <param name="html">object tag string</param>
            <returns>corrected string</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.GetNextID">
            <summary>
            Get next unique ID for XML document element
            </summary>
            <returns>next ID</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.SetIDs(System.Xml.XmlDocument)">
            <summary>
            Set IDs for each element in XML document
            </summary>
            <param name="document">XML document</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.SetIDs(System.Xml.XmlNode,System.Collections.Hashtable)">
            <summary>
            Set IDs for node and its childred
            </summary>
            <param name="node">Node</param>
            <param name="ids">Collection with IDs</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.RemoveIDs(System.Xml.XmlNode)">
            <summary>
            Remove IDs from node and its childred
            </summary>
            <param name="node">Node</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.CreateID(System.Xml.XmlElement,System.Collections.Hashtable)">
            <summary>
            Create unique ID for element
            </summary>
            <param name="element">Element</param>
            <param name="ids">Collection with IDs</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.ReplaceParagraphWhiteSpacesToNBSP(System.Xml.XmlNode,System.Boolean@)">
            <summary>
            Replaces whitespaces in empty paragraphs to NBSP
            </summary>
            <param name="node">node to process</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.CorrectNodes(System.Xml.XmlNode,C1.Win.Xhtml.ConvertExtraWhitespacesMode,System.String)">
            <summary>
            Corrects nodes that has come from HTML
            </summary>
            <param name="node">node to convert</param>
            <param name="mode">mode for converting whitespaces</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.ConvertExtraWhitespaces(System.Xml.XmlNode,C1.Win.Xhtml.ConvertExtraWhitespacesMode)">
            <summary>
            Converts consequent spaces in text nodes
            </summary>
            <param name="node">node to convert</param>
            <param name="mode">converting mode</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.ConvertExtraWhitespaces(System.Xml.XmlNode,C1.Win.Xhtml.ConvertExtraWhitespacesMode,System.Boolean)">
            <summary>
            Converts consequent spaces in text nodes
            </summary>
            <param name="node">node to convert</param>
            <param name="mode">converting mode</param>
            <param name="convertChildrens">if true, converts children</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.TrimTextForTextNode(System.Xml.XmlNode,System.Text.StringBuilder)">
            <summary>
            analizes content before text node and trims begin of node if is is placed in the beginning of paragraph and after BR tag
            </summary>
            <param name="node">node to check</param>
            <param name="value">value to trim</param>
            <returns>true if value is trimmed</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.CorrectObjectNode(System.Xml.XmlNode)">
            <summary>
            Removes unneeded "param" nodes from "object" Flash movie
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.CorrectPaths(System.Xml.XmlNode,System.String)">
            <summary>
            Corrects href/src attributes
            </summary>
            <param name="node">XML node to corrent</param>
            <param name="url">base url for correcting paths to relative form</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.CorrectCharset(System.Xml.XmlDocument,System.Boolean,System.Text.Encoding@)">
            <summary>
            Set UTF-8 charset for the document if charset is missing or convertToUTF8 is true
            </summary>
            <param name="xmlDoc">document</param>
            <param name="convertToUTF8">if true, changes current charset</param>        
            <param name="encoding">returns document encoding</param>
            <returns>True if the charset was changed; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.FixScriptTypeError(System.Xml.XmlNode,System.Boolean@)">
            <summary>
            Replaces "text/css" value of "type" attribute with "text/javascript" value in script nodes
            </summary>
            <param name="root">root node of document</param>
            <param name="hasChanges">returns true if document was changed</param>
        </member>
        <member name="M:C1.Win.Xhtml.XmlValidator.TableRequiredTagsFixer.GetColumnCount(System.Xml.XmlNode,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Calculate columns count and their possible width. Column width defined by appropriate cell width.
            Table cell width-attribute not specified in XHTML Strict, but it appear as a result of Word-source conversion.
            </summary>
            <param name="table">Input table.</param>
            <param name="columnsWidth">List of columns width (or -1, if width not specified).</param>
            <returns>Columns count.</returns>
        </member>
        <member name="T:C1.Win.Xhtml.XmlValidator.CommentTagsFixer">
            <summary>
            Fixes Comment structure: checks if document has single comment container, it is placed in the beginning of the document, all comments are well formatted, comment markers are bound to comment
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.OLECMDID">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_ALLOWUILESSSAVEAS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_CLEARSELECTION">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_CLOSE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_COPY">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_CUT">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_DELETE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_DONTDOWNLOADCSS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_ENABLE_INTERACTION">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_FIND">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_FOCUSVIEWCONTROLS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_FOCUSVIEWCONTROLSQUERY">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_GETPRINTTEMPLATE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_GETZOOMRANGE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_HIDETOOLBARS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_HTTPEQUIV">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_HTTPEQUIV_DONE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_NEW">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_ONTOOLBARACTIVATED">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_ONUNLOAD">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_OPEN">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PAGEACTIONBLOCKED">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PAGEACTIONUIQUERY">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PAGESETUP">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PASTE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PASTESPECIAL">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PREREFRESH">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PRINT">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PRINT2">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PRINTPREVIEW">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PRINTPREVIEW2">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PROPERTIES">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PROPERTYBAG2">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_REDO">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_REFRESH">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SAVE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SAVEAS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SAVECOPYAS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SELECTALL">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SETDOWNLOADSTATE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SETPRINTTEMPLATE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SETPROGRESSMAX">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SETPROGRESSPOS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SETPROGRESSTEXT">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SETTITLE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SHOWFIND">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SHOWMESSAGE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SHOWPAGEACTIONMENU">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SHOWPAGESETUP">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SHOWPRINT">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SHOWSCRIPTERROR">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SPELL">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_STOP">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_STOPDOWNLOAD">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_UNDO">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_UPDATECOMMANDS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_UPDATEPAGESTATUS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_ZOOM">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.OLECMDF">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDF.OLECMDF_DEFHIDEONCTXTMENU">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDF.OLECMDF_ENABLED">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDF.OLECMDF_INVISIBLE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDF.OLECMDF_LATCHED">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDF.OLECMDF_NINCHED">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDF.OLECMDF_SUPPORTED">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.OLECMDEXECOPT">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDEXECOPT.OLECMDEXECOPT_DODEFAULT">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDEXECOPT.OLECMDEXECOPT_DONTPROMPTUSER">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDEXECOPT.OLECMDEXECOPT_PROMPTUSER">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.OLECMDEXECOPT.OLECMDEXECOPT_SHOWHELP">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.tagREADYSTATE">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.tagREADYSTATE.READYSTATE_COMPLETE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.tagREADYSTATE.READYSTATE_INTERACTIVE">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.tagREADYSTATE.READYSTATE_LOADED">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.tagREADYSTATE.READYSTATE_LOADING">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.tagREADYSTATE.READYSTATE_UNINITIALIZED">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.IWebBrowser">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.GoBack">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.GoForward">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.GoHome">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.GoSearch">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.Navigate(System.String,System.Object@,System.Object@,System.Object@,System.Object@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.Refresh">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.Refresh2(System.Object@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.Stop">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Application">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Parent">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Container">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Document">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.TopLevelContainer">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Type">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Left">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Top">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Width">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Height">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.LocationName">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.LocationURL">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Busy">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.IWebBrowserApp">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowserApp.Quit">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowserApp.ClientToWindow(System.Int32@,System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowserApp.PutProperty(System.String,System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowserApp.GetProperty(System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.Name">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.HWND">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.FullName">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.Path">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.Visible">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.StatusBar">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.StatusText">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.ToolBar">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.MenuBar">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.FullScreen">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.IWebBrowser2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.GoBack">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.GoForward">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.GoHome">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.GoSearch">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.Navigate(System.String,System.Object@,System.Object@,System.Object@,System.Object@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.Refresh">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.Refresh2(System.Object@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.Stop">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Application">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Parent">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Container">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Document">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.TopLevelContainer">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Type">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Left">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Top">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Width">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Height">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.LocationName">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.LocationURL">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Busy">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.Quit">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.ClientToWindow(System.Int32@,System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.PutProperty(System.String,System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.GetProperty(System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Name">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.HWND">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.FullName">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Path">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Visible">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.StatusBar">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.StatusText">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.ToolBar">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.MenuBar">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.FullScreen">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.Navigate2(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.QueryStatusWB(C1.Win.C1Editor.Internal.OLECMDID)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.ExecWB(C1.Win.C1Editor.Internal.OLECMDID,C1.Win.C1Editor.Internal.OLECMDEXECOPT,System.Object@,System.Object@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.ShowBrowserBar(System.Object@,System.Object@,System.Object@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.ReadyState">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Offline">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Silent">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.RegisterAsBrowser">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.RegisterAsDropTarget">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.TheaterMode">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.AddressBar">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Resizable">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.TLMENUF.TLEF_RELATIVE_INCLUDE_CURRENT">
            <summary>
            Enumeration should include the current travel log entry.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.TLMENUF.TLEF_RELATIVE_BACK">
            <summary>
            Enumeration should include entries before the current entry.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.TLMENUF.TLEF_RELATIVE_FORE">
            <summary>
            Enumeration should include entries after the current entry.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.TLMENUF.TLEF_INCLUDE_UNINVOKEABLE">
            <summary>
            Enumeration should include entries which cannot be navigated to.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.TLMENUF.TLEF_ABSOLUTE">
            <summary>
            Enumeration should include all invokable entries.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.tagOLECONTF">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECONTF.OLECONTF_EMBEDDINGS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECONTF.OLECONTF_LINKS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECONTF.OLECONTF_OTHERS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECONTF.OLECONTF_ONLYUSER">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECONTF.OLECONTF_ONLYIFRUNNING">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_None">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_Text">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_EnterScope">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_ExitScope">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_NoScope">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE.MARKUP_CONTEXT_TYPE_Max">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.NODE_TYPES">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.NODE_TYPES.ELEMENT">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.NODE_TYPES.TEXT">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.Hresults">
            <summary>
            HRESULT constants
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLDispIDs">
            <summary>
            Dispids constants taken from MsHtmdid.h
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.Iid_Clsids">
            <summary>
            GUID representation of IIDs and CLSIDs
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker">
            <summary>
            For loading html into document while having the ability to set the baseUrl
            Only two methods of IMoniker are called BindToStorage and GetDisplayName
            In BindToStorage, we pass a ref to our stream object to be used for loading page
            data. In GetDisplayName, we pass our baseUrl to MSHTML to be used.
            BaseUrl must be in form of http://www.sitename.com
            <code>
            string html = "%lt;HTML&gt;lt;HEAD&gt;&lt;/Head&gt;&lt;Body&gt;&lt;p&gt;&lt;a href=\"gosearch\"&gt;Second link&lt;/a&gt;&lt;/p&gt;&lt;p&gt;1 This HTML content is being loaded from a stream.&lt;/p&gt;&lt;p&gt;2 This HTML content is being loaded from a stream.&lt;/p&gt;&lt;p&gt;&lt;a href=\"goHome\"&gt;Second link&lt;/a&gt;&lt;/p&gt;&lt;/Body&gt;&lt;/HTML&gt;";
            m_CurWB.LoadHtmlIntoBrowser(html, "http://www.google.com");
            </code>
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
            <summary>
            Uses the moniker to bind to the object that it identifies.
            </summary>
            <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
            <param name="riidResult">The interface identifier (IID) of the interface that the client intends to use to communicate with the object that the moniker identifies.</param>
            <param name="ppvResult">When this method returns, contains a reference to the interface requested by riidResult. This parameter is passed uninitialized.</param>
            <param name="pbc">A reference to the IBindCtx interface on the bind context object used in this binding operation.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
            <summary>
            Retrieves an interface pointer to the storage that contains the object identified by the moniker.
            </summary>
            <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
            <param name="riid">The interface identifier (IID) of the storage interface requested.</param>
            <param name="ppvObj">When this method returns, contains a reference to the interface requested by riid. This parameter is passed uninitialized.</param>
            <param name="pbc">A reference to the IBindCtx interface on the bind context object used during this binding operation.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
            <summary>
            Creates a new moniker based on the common prefix that this moniker shares with another moniker.
            </summary>
            <param name="pmkOther">A reference to the IMoniker interface on another moniker to compare with the current moniker for a common prefix.</param>
            <param name="ppmkPrefix">When this method returns, contains the moniker that is the common prefix of the current moniker and pmkOther. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
            <summary>
            Combines the current moniker with another moniker, creating a new composite moniker.
            </summary>
            <param name="ppmkComposite">When this method returns, contains a reference to the resulting composite moniker. This parameter is passed uninitialized.</param>
            <param name="pmkRight">A reference to the IMoniker interface on a moniker to append to the end of the current moniker.</param>
            <param name="fOnlyIfNotGeneric">true to indicate that the caller requires a nongeneric composition. The operation proceeds only if pmkRight is a moniker class that the current moniker can combine with in some way other than forming a generic composite. false to indicate that the method can create a generic composite if necessary.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
            <summary>
            Supplies a pointer to an enumerator that can enumerate the components of a composite moniker.
            </summary>
            <param name="fForward">true to enumerate the monikers from left to right. false to enumerate from right to left.</param>
            <param name="ppenumMoniker">When this method returns, contains a reference to the enumerator object for the moniker. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#GetClassID(System.Guid@)">
            <summary>
            Retrieves the class identifier (CLSID) of an object.
            </summary>
            <param name="pClassID">When this method returns, contains the CLSID. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
            <summary>
            Gets the display name, which is a user-readable representation of the current moniker.
            </summary>
            <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
            <param name="ppszDisplayName">When this method returns, contains the display name string. This parameter is passed uninitialized.</param>
            <param name="pbc">A reference to the bind context to use in this operation.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#GetSizeMax(System.Int64@)">
            <summary>
            Returns the size, in bytes, of the stream needed to save the object.
            </summary>
            <param name="pcbSize">When this method returns, contains a long value indicating the size, in bytes, of the stream needed to save this object. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <summary>
            Provides a number representing the time that the object identified by the current moniker was last changed.
            </summary>
            <param name="pbc">A reference to the bind context to use in this binding operation.</param>
            <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
            <param name="pFileTime">When this method returns, contains the time of the last change. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#Hash(System.Int32@)">
            <summary>
            Calculates a 32-bit integer using the internal state of the moniker.
            </summary>
            <param name="pdwHash">When this method returns, contains the hash value for this moniker. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
            <summary>
            Provides a moniker that, when composed to the right of the current moniker or one of similar structure, composes to nothing.
            </summary>
            <param name="ppmk">When this method returns, contains a moniker that is the inverse of the current moniker. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#IsDirty">
            <summary>
            Checks the object for changes since it was last saved.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
            <summary>
            Compares the current moniker with a specified moniker and indicates whether they are identical.
            </summary>
            <param name="pmkOtherMoniker">A reference to the moniker to use for comparison.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
            <summary>
            Determines whether the object that is identified by the current moniker is currently loaded and running.
            </summary>
            <param name="pmkToLeft">A reference to the moniker to the left of the current moniker if the current moniker is part of a composite.</param>
            <param name="pmkNewlyRunning">A reference to the moniker most recently added to the Running Object Table (ROT).</param>
            <param name="pbc">A reference to the bind context to use in this binding operation.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#IsSystemMoniker(System.Int32@)">
            <summary>
            Indicates whether this moniker is of one of the system-supplied moniker classes.
            </summary>
            <param name="pdwMksys">When this method returns, contains a pointer to an integer that is one of the values from the MKSYS enumeration, and refers to one of the COM moniker classes. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#Load(System.Runtime.InteropServices.ComTypes.IStream)">
            <summary>
            Initializes an object from the stream where it was previously saved.
            </summary>
            <param name="pStm">The stream that the object is loaded from.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
            <summary>
            Reads as many characters of the specified display name as the <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)"></see> understands and builds a moniker corresponding to the portion read.
            </summary>
            <param name="pmkToLeft">A reference to the moniker that has been built from the display name up to this point.</param>
            <param name="ppmkOut">When this method returns, contains a reference to the moniker that was built from pszDisplayName. This parameter is passed uninitialized.</param>
            <param name="pszDisplayName">A reference to the string containing the remaining display name to parse.</param>
            <param name="pchEaten">When this method returns, contains the number of characters that were consumed in parsing pszDisplayName. This parameter is passed uninitialized.</param>
            <param name="pbc">A reference to the bind context to use in this binding operation.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
            <summary>
            Returns a reduced moniker, which is another moniker that refers to the same object as the current moniker but can be bound with equal or greater efficiency.
            </summary>
            <param name="ppmkToLeft">A reference to the moniker to the left of the current moniker.</param>
            <param name="dwReduceHowFar">A value that specifies how far the current moniker should be reduced.</param>
            <param name="pbc">A reference to the IBindCtx interface on the bind context to use in this binding operation.</param>
            <param name="ppmkReduced">When this method returns, contains a reference to the reduced form of the current moniker, which can be null if an error occurs or if the current moniker is reduced to nothing. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
            <summary>
            Supplies a moniker that, when appended to the current moniker (or one with a similar structure), yields the specified moniker.
            </summary>
            <param name="ppmkRelPath">When this method returns, contains a reference to the relative moniker. This parameter is passed uninitialized.</param>
            <param name="pmkOther">A reference to the moniker to which a relative path should be taken.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.LoadHTMLMoniker.System#Runtime#InteropServices#ComTypes#IMoniker#Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
            <summary>
            Saves an object to the specified stream.
            </summary>
            <param name="pStm">The stream to which the object is saved.</param>
            <param name="fClearDirty">true to clear the modified flag after the save is complete; otherwise, False.</param>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.WinApis">
            <summary>
            Windows API constants and functions
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.WinApis.FindUrlCacheEntries(System.String)">
            <summary>
            UrlCache functionality is taken from:
            Scott McMaster (smcmaste@hotmail.com)
            CodeProject article
            
            There were some issues with preparing URLs
            for RegExp to work properly. This is
            demonstrated in AllForms.SetupCookieCachePattern method
            
            urlPattern:
            . Dump the entire contents of the cache.
            Cookie: Lists all cookies on the system.
            Visited: Lists all of the history items.
            Cookie:.*\.example\.com Lists cookies from the example.com domain.
            http://www.example.com/example.html$: Lists the specific named file if present
            \.example\.com: Lists any and all entries from *.example.com.
            \.example\.com.*\.gif$: Lists the .gif files from *.example.com.
            \.js$: Lists the .js files in the cache.
            </summary>
            <param name="urlPattern"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.WinApis.DeleteFromUrlCache(System.String)">
            <summary>
            Attempts to delete a cookie or cache entry
            </summary>
            <param name="url">INTERNET_CACHE_ENTRY_INFO.lpszSourceUrlName</param>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IAsyncMoniker">
            <summary>
            For internal use only
            
            Helper interface to indicate to MSHTML that
            LoadHTMLMoniker class is capable of Async operations
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IBinding">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBinding.Abort">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBinding.Suspend">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBinding.Resume">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBinding.SetPriority(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBinding.GetPriority(System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBinding.GetBindResult(System.Guid@,System.UInt32@,System.String@,System.UInt32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.OnStartBinding(System.UInt32,C1.Win.C1Editor.Internal.HTML.IBinding)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.GetPriority(System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.OnLowResource(System.UInt32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.OnProgress(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.OnStopBinding(System.UInt32,System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.GetBindInfo(System.UInt32@,C1.Win.C1Editor.Internal.HTML.BINDINFO@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.OnDataAvailable(System.UInt32,System.UInt32,System.Runtime.InteropServices.ComTypes.FORMATETC@,C1.Win.C1Editor.Internal.HTML.STGMEDIUM@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.OnObjectAvailable(System.Guid@,System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.ShowContextMenu(System.UInt32,C1.Win.C1Editor.Internal.HTML.tagPOINT@,System.Object,System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.GetHostInfo(C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.ShowUI(System.Int32,C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject,C1.Win.C1Editor.Internal.HTML.IOleCommandTarget,C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame,C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.HideUI">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.UpdateUI">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.EnableModeless(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.OnDocWindowActivate(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.OnFrameWindowActivate(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.ResizeBorder(C1.Win.C1Editor.Internal.HTML.tagRECT@,C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow,System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.TranslateAccelerator(C1.Win.C1Editor.Internal.HTML.tagMSG@,System.Guid@,System.UInt32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.GetOptionKeyPath(System.String@,System.UInt32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.GetDropTarget(C1.Win.C1Editor.Internal.HTML.IDropTarget,C1.Win.C1Editor.Internal.HTML.IDropTarget@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.GetExternal(System.Object@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.TranslateUrl(System.UInt32,System.String,System.String@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.FilterDataObject(System.Runtime.InteropServices.ComTypes.IDataObject,System.Runtime.InteropServices.ComTypes.IDataObject@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IDropTarget">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDropTarget.DragEnter(System.Runtime.InteropServices.ComTypes.IDataObject,System.UInt32,C1.Win.C1Editor.Internal.HTML.tagPOINT,System.UInt32@)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDropTarget.DragOver(System.UInt32,C1.Win.C1Editor.Internal.HTML.tagPOINT,System.UInt32@)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDropTarget.DragLeave">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDropTarget.Drop(System.Runtime.InteropServices.ComTypes.IDataObject,System.UInt32,C1.Win.C1Editor.Internal.HTML.tagPOINT,System.UInt32@)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IEnumUnknown">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumUnknown.Next(System.Int32,System.Object@,System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumUnknown.Skip(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumUnknown.Reset">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumUnknown.Clone(C1.Win.C1Editor.Internal.HTML.IEnumUnknown@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IMalloc">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMalloc.Alloc(System.UInt32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMalloc.Realloc(System.IntPtr,System.UInt32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMalloc.Free(System.IntPtr)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMalloc.GetSize(System.IntPtr)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMalloc.DidAlloc(System.IntPtr)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMalloc.HeapMinimize">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IOleCommandTarget">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleCommandTarget.QueryStatus(System.IntPtr,System.UInt32,C1.Win.C1Editor.Internal.HTML.tagOLECMD@,System.IntPtr)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleCommandTarget.Exec(System.IntPtr,System.UInt32,System.UInt32,System.Object@,System.IntPtr)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IPersistMoniker">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IPersistMoniker.GetClassID(System.Guid@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IPersistMoniker.IsDirty">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IPersistMoniker.Load(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker,System.Object,System.UInt32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IPersistMoniker.SaveCompleted(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IPersistMoniker.GetCurMoniker">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IServiceProvider">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLAnchorEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLAnchorEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLAreaEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLAreaEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLButtonElementEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLButtonElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLControlElementEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLControlElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onhelp(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onclick(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.ondblclick(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onkeydown(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onkeyup(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onkeypress(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onmousedown(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onmousemove(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onmouseup(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onmouseout(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onmouseover(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onreadystatechange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onbeforeupdate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onafterupdate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onrowexit(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onrowenter(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.ondragstart(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onselectstart(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onerrorupdate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.oncontextmenu(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onstop(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onrowsdelete(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onrowsinserted(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.oncellchange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.ondatasetchanged(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.ondataavailable(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.ondatasetcomplete(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onbeforeeditfocus(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onselectionchange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.oncontrolselect(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onmousewheel(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onfocusin(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onfocusout(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onactivate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.ondeactivate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onbeforeactivate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onbeforedeactivate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLElementEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLElementEvents2.onbeforecopy(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="pEvtObj">Event object.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLElementEvents2.onbeforecut(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
            <param name="pEvtObj">Event object.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLElementEvents2.onbeforepaste(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
            <param name="pEvtObj">Event object.</param>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLFormElementEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLFormElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLImgEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLImgEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLInputFileElementEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLInputFileElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLInputImageEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLInputImageEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLInputTextElementEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLInputTextElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLLabelEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLLabelEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLMapEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLMapEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLMarqueeElementEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLMarqueeElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLOptionButtonElementEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLOptionButtonElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLScriptEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLScriptEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLSelectElementEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLSelectElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLTableEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLTableEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLTextContainerEvents2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLTextContainerEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IDisplayPointer">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.MoveToPoint(C1.Win.C1Editor.Internal.HTML.tagPOINT,System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.UInt32,System.UInt32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.MoveUnit(System.Int32,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.PositionMarkupPointer(C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.MoveToPointer(C1.Win.C1Editor.Internal.HTML.IDisplayPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.SetPointerGravity(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.GetPointerGravity(System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.SetDisplayGravity(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.GetDisplayGravity(System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.IsPositioned(System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.Unposition">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.IsEqualTo(C1.Win.C1Editor.Internal.HTML.IDisplayPointer,System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.IsLeftOf(C1.Win.C1Editor.Internal.HTML.IDisplayPointer,System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.IsRightOf(C1.Win.C1Editor.Internal.HTML.IDisplayPointer,System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.IsAtBOL(System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.MoveToMarkupPointer(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IDisplayPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.ScrollIntoView">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.GetLineInfo(C1.Win.C1Editor.Internal.HTML.ILineInfo@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.GetFlowElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.QueryBreaks(System.UInt32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IDisplayServices">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.CreateDisplayPointer(C1.Win.C1Editor.Internal.HTML.IDisplayPointer@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.TransformRect(C1.Win.C1Editor.Internal.HTML.tagRECT@,System.Int32,System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.TransformPoint(C1.Win.C1Editor.Internal.HTML.tagPOINT@,System.Int32,System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.GetCaret(C1.Win.C1Editor.Internal.HTML.IHTMLCaret@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.GetComputedStyle(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.ScrollRectIntoView(C1.Win.C1Editor.Internal.HTML.IHTMLElement,C1.Win.C1Editor.Internal.HTML.tagRECT)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.HasFlowLayout(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IElementBehavior">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IElementBehavior.Init(C1.Win.C1Editor.Internal.HTML.IElementBehaviorSite)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IElementBehavior.Notify(System.Int32,System.IntPtr)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IElementBehavior.Detach">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IElementBehaviorFactory">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IElementBehaviorFactory.FindBehavior(System.String,System.String,C1.Win.C1Editor.Internal.HTML.IElementBehaviorSite)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IElementBehaviorSite">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IElementBehaviorSite.GetElement">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IElementBehaviorSite.RegisterNotification(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IElementSegment">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IElementSegment.GetPointers(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IElementSegment.GetElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IElementSegment.SetPrimary(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IElementSegment.IsPrimary(System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHighlightRenderingServices">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHighlightRenderingServices.AddSegment(C1.Win.C1Editor.Internal.HTML.IDisplayPointer,C1.Win.C1Editor.Internal.HTML.IDisplayPointer,C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle,C1.Win.C1Editor.Internal.HTML.IHighlightSegment@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHighlightRenderingServices.MoveSegmentToPointers(C1.Win.C1Editor.Internal.HTML.IHighlightSegment,C1.Win.C1Editor.Internal.HTML.IDisplayPointer,C1.Win.C1Editor.Internal.HTML.IDisplayPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHighlightRenderingServices.RemoveSegment(C1.Win.C1Editor.Internal.HTML.IHighlightSegment)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHighlightSegment">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHighlightSegment.GetPointers(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLAttributeCollection">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLAttributeCollection.length">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLAttributeCollection.GetEnumerator">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLAttributeCollection.item(System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement">
            <summary><para><c>IHTMLBodyElement</c> interface.</para></summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.createTextRange">
            <summary><para><c>createTextRange</c> method of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>createTextRange</c> method was the following:  <c>HRESULT createTextRange ([out, retval] IHTMLTxtRange** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.aLink">
            <summary><para><c>aLink</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>aLink</c> property was the following:  <c>VARIANT aLink</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.background">
            <summary><para><c>background</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>background</c> property was the following:  <c>BSTR background</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.bgColor">
            <summary><para><c>bgColor</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>bgColor</c> property was the following:  <c>VARIANT bgColor</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.bgProperties">
            <summary><para><c>bgProperties</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>bgProperties</c> property was the following:  <c>BSTR bgProperties</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.bottomMargin">
            <summary><para><c>bottomMargin</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>bottomMargin</c> property was the following:  <c>VARIANT bottomMargin</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.leftMargin">
            <summary><para><c>leftMargin</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>leftMargin</c> property was the following:  <c>VARIANT leftMargin</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.link">
            <summary><para><c>link</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>link</c> property was the following:  <c>VARIANT link</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.noWrap">
            <summary><para><c>noWrap</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>noWrap</c> property was the following:  <c>VARIANT_BOOL noWrap</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.onbeforeunload">
            <summary><para><c>onbeforeunload</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onbeforeunload</c> property was the following:  <c>VARIANT onbeforeunload</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.onload">
            <summary><para><c>onload</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onload</c> property was the following:  <c>VARIANT onload</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.onselect">
            <summary><para><c>onselect</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onselect</c> property was the following:  <c>VARIANT onselect</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.onunload">
            <summary><para><c>onunload</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onunload</c> property was the following:  <c>VARIANT onunload</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.rightMargin">
            <summary><para><c>rightMargin</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>rightMargin</c> property was the following:  <c>VARIANT rightMargin</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.scroll">
            <summary><para><c>scroll</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>scroll</c> property was the following:  <c>BSTR scroll</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.text">
            <summary><para><c>text</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>text</c> property was the following:  <c>VARIANT text</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.topMargin">
            <summary><para><c>topMargin</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>topMargin</c> property was the following:  <c>VARIANT topMargin</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.vLink">
            <summary><para><c>vLink</c> property of <c>IHTMLBodyElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>vLink</c> property was the following:  <c>VARIANT vLink</c>;</para></remarks>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLCaret">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.MoveCaretToPointer(C1.Win.C1Editor.Internal.HTML.IDisplayPointer,System.Boolean,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.MoveCaretToPointerEx(C1.Win.C1Editor.Internal.HTML.IDisplayPointer,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.MoveMarkupPointerToCaret(C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.MoveDisplayPointerToCaret(C1.Win.C1Editor.Internal.HTML.IDisplayPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.IsVisible(System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.Show(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.Hide">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.InsertText(System.String,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.ScrollIntoView">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.GetLocation(C1.Win.C1Editor.Internal.HTML.tagPOINT@,System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.GetCaretDirection(System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.SetCaretDirection(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLChangeLog">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLChangeLog.GetNextChange">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLChangeSink">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLChangeSink.Notify">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.bold">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.italic">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.underline">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.overline">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.strikeOut">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.subScript">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.superScript">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.explicitFace">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.fontWeight">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.fontSize">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.fontName">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.hasBgColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.textColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.backgroundColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.preFormatted">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.direction">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.blockDirection">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.OL">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.IsEqual(C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle,System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.TabIndex">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.Focus">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.AccessKey">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.OnBlur">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.OnFocus">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.OnResize">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.Blur">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.AddFilter(System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.RemoveFilter(System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.ClientHeight">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.ClientWidth">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.ClientTop">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.ClientLeft">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.Select">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.Add(C1.Win.C1Editor.Internal.HTML.IHTMLControlElement)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.Remove(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.Item(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.ScrollIntoView(System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.QueryCommandSupported(System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.QueryCommandEnabled(System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.QueryCommandState(System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.QueryCommandIndeterm(System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.QueryCommandText(System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.QueryCommandValue(System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.ExecCommand(System.String,System.Boolean,System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.ExecCommandShowHelp(System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.CommonParentElement">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.Length">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.color">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.backgroundColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.fontFamily">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.fontStyle">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.fontVariant">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.fontWeight">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.fontSize">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.textAlign">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.textDecoration">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDocument">
            <summary><para><c>IHTMLDocument</c> interface.</para></summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument.Script">
            <summary><para><c>Script</c> property of <c>IHTMLDocument</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>Script</c> property was the following:  <c>IDispatch* Script</c>;</para></remarks>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2">
            <summary><para><c>IHTMLDocument2</c> interface.</para></summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.write(System.Object)">
            <summary><para><c>write</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>write</c> method was the following:  <c>HRESULT write (SAFEARRAY() psarray)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.writeln(System.Object)">
            <summary><para><c>writeln</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>writeln</c> method was the following:  <c>HRESULT writeln (SAFEARRAY() psarray)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.open(System.String,System.Object,System.Object,System.Object)">
            <summary><para><c>open</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>open</c> method was the following:  <c>HRESULT open ([optional, defaultvalue("text/html")] BSTR url, [optional] VARIANT name, [optional] VARIANT features, [optional] VARIANT replace, [out, retval] IDispatch** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.close">
            <summary><para><c>close</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>close</c> method was the following:  <c>HRESULT close (void)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.clear">
            <summary><para><c>clear</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>clear</c> method was the following:  <c>HRESULT clear (void)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.queryCommandSupported(System.String)">
            <summary><para><c>queryCommandSupported</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>queryCommandSupported</c> method was the following:  <c>HRESULT queryCommandSupported (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.queryCommandEnabled(System.String)">
            <summary><para><c>queryCommandEnabled</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>queryCommandEnabled</c> method was the following:  <c>HRESULT queryCommandEnabled (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.queryCommandState(System.String)">
            <summary><para><c>queryCommandState</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>queryCommandState</c> method was the following:  <c>HRESULT queryCommandState (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.queryCommandIndeterm(System.String)">
            <summary><para><c>queryCommandIndeterm</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>queryCommandIndeterm</c> method was the following:  <c>HRESULT queryCommandIndeterm (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.queryCommandText(System.String)">
            <summary><para><c>queryCommandText</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>queryCommandText</c> method was the following:  <c>HRESULT queryCommandText (BSTR cmdID, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.queryCommandValue(System.String)">
            <summary><para><c>queryCommandValue</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>queryCommandValue</c> method was the following:  <c>HRESULT queryCommandValue (BSTR cmdID, [out, retval] VARIANT* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.execCommand(System.String,System.Boolean,System.Object)">
            <summary><para><c>execCommand</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>execCommand</c> method was the following:  <c>HRESULT execCommand (BSTR cmdID, [optional, defaultvalue(0)] VARIANT_BOOL showUI, [optional] VARIANT value, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.execCommandShowHelp(System.String)">
            <summary><para><c>execCommandShowHelp</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>execCommandShowHelp</c> method was the following:  <c>HRESULT execCommandShowHelp (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.createElement(System.String)">
            <summary><para><c>createElement</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>createElement</c> method was the following:  <c>HRESULT createElement (BSTR eTag, [out, retval] IHTMLElement** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.elementFromPoint(System.Int32,System.Int32)">
            <summary><para><c>elementFromPoint</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>elementFromPoint</c> method was the following:  <c>HRESULT elementFromPoint (long x, long y, [out, retval] IHTMLElement** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.toString">
            <summary><para><c>toString</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>toString</c> method was the following:  <c>HRESULT toString ([out, retval] BSTR* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.createStyleSheet(System.String,System.Int32)">
            <summary><para><c>createStyleSheet</c> method of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>createStyleSheet</c> method was the following:  <c>HRESULT createStyleSheet ([optional, defaultvalue("")] BSTR bstrHref, [optional, defaultvalue(-1)] long lIndex, [out, retval] IHTMLStyleSheet** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.activeElement">
            <summary><para><c>activeElement</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>activeElement</c> property was the following:  <c>IHTMLElement* activeElement</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.alinkColor">
            <summary><para><c>alinkColor</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>alinkColor</c> property was the following:  <c>VARIANT alinkColor</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.all">
            <summary><para><c>all</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>all</c> property was the following:  <c>IHTMLElementCollection* all</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.anchors">
            <summary><para><c>anchors</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>anchors</c> property was the following:  <c>IHTMLElementCollection* anchors</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.applets">
            <summary><para><c>applets</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>applets</c> property was the following:  <c>IHTMLElementCollection* applets</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.bgColor">
            <summary><para><c>bgColor</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>bgColor</c> property was the following:  <c>VARIANT bgColor</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.body">
            <summary><para><c>body</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>body</c> property was the following:  <c>IHTMLElement* body</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.charset">
            <summary><para><c>charset</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>charset</c> property was the following:  <c>BSTR charset</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.cookie">
            <summary><para><c>cookie</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>cookie</c> property was the following:  <c>BSTR cookie</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.defaultCharset">
            <summary><para><c>defaultCharset</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>defaultCharset</c> property was the following:  <c>BSTR defaultCharset</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.designMode">
            <summary><para><c>designMode</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>designMode</c> property was the following:  <c>BSTR designMode</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.domain">
            <summary><para><c>domain</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>domain</c> property was the following:  <c>BSTR domain</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.embeds">
            <summary><para><c>embeds</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>embeds</c> property was the following:  <c>IHTMLElementCollection* embeds</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.expando">
            <summary><para><c>expando</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>expando</c> property was the following:  <c>VARIANT_BOOL expando</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.fgColor">
            <summary><para><c>fgColor</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>fgColor</c> property was the following:  <c>VARIANT fgColor</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.fileCreatedDate">
            <summary><para><c>fileCreatedDate</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>fileCreatedDate</c> property was the following:  <c>BSTR fileCreatedDate</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.fileModifiedDate">
            <summary><para><c>fileModifiedDate</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>fileModifiedDate</c> property was the following:  <c>BSTR fileModifiedDate</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.fileSize">
            <summary><para><c>fileSize</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>fileSize</c> property was the following:  <c>BSTR fileSize</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.fileUpdatedDate">
            <summary><para><c>fileUpdatedDate</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>fileUpdatedDate</c> property was the following:  <c>BSTR fileUpdatedDate</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.forms">
            <summary><para><c>forms</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>forms</c> property was the following:  <c>IHTMLElementCollection* forms</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.frames">
            <summary><para><c>frames</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>frames</c> property was the following:  <c>IHTMLFramesCollection2* frames</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.images">
            <summary><para><c>images</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>images</c> property was the following:  <c>IHTMLElementCollection* images</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.lastModified">
            <summary><para><c>lastModified</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>lastModified</c> property was the following:  <c>BSTR lastModified</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.linkColor">
            <summary><para><c>linkColor</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>linkColor</c> property was the following:  <c>VARIANT linkColor</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.links">
            <summary><para><c>links</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>links</c> property was the following:  <c>IHTMLElementCollection* links</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.location">
            <summary><para><c>location</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>location</c> property was the following:  <c>IHTMLLocation* location</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.mimeType">
            <summary><para><c>mimeType</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>mimeType</c> property was the following:  <c>BSTR mimeType</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.nameProp">
            <summary><para><c>nameProp</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>nameProp</c> property was the following:  <c>BSTR nameProp</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onafterupdate">
            <summary><para><c>onafterupdate</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onafterupdate</c> property was the following:  <c>VARIANT onafterupdate</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onbeforeupdate">
            <summary><para><c>onbeforeupdate</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onbeforeupdate</c> property was the following:  <c>VARIANT onbeforeupdate</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onclick">
            <summary><para><c>onclick</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onclick</c> property was the following:  <c>VARIANT onclick</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.ondblclick">
            <summary><para><c>ondblclick</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondblclick</c> property was the following:  <c>VARIANT ondblclick</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.ondragstart">
            <summary><para><c>ondragstart</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondragstart</c> property was the following:  <c>VARIANT ondragstart</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onerrorupdate">
            <summary><para><c>onerrorupdate</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onerrorupdate</c> property was the following:  <c>VARIANT onerrorupdate</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onhelp">
            <summary><para><c>onhelp</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onhelp</c> property was the following:  <c>VARIANT onhelp</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onkeydown">
            <summary><para><c>onkeydown</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onkeydown</c> property was the following:  <c>VARIANT onkeydown</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onkeypress">
            <summary><para><c>onkeypress</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onkeypress</c> property was the following:  <c>VARIANT onkeypress</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onkeyup">
            <summary><para><c>onkeyup</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onkeyup</c> property was the following:  <c>VARIANT onkeyup</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onmousedown">
            <summary><para><c>onmousedown</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onmousedown</c> property was the following:  <c>VARIANT onmousedown</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onmousemove">
            <summary><para><c>onmousemove</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onmousemove</c> property was the following:  <c>VARIANT onmousemove</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onmouseout">
            <summary><para><c>onmouseout</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onmouseout</c> property was the following:  <c>VARIANT onmouseout</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onmouseover">
            <summary><para><c>onmouseover</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onmouseover</c> property was the following:  <c>VARIANT onmouseover</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onmouseup">
            <summary><para><c>onmouseup</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onmouseup</c> property was the following:  <c>VARIANT onmouseup</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onreadystatechange">
            <summary><para><c>onreadystatechange</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onreadystatechange</c> property was the following:  <c>VARIANT onreadystatechange</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onrowenter">
            <summary><para><c>onrowenter</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onrowenter</c> property was the following:  <c>VARIANT onrowenter</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onrowexit">
            <summary><para><c>onrowexit</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onrowexit</c> property was the following:  <c>VARIANT onrowexit</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onselectstart">
            <summary><para><c>onselectstart</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onselectstart</c> property was the following:  <c>VARIANT onselectstart</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.parentWindow">
            <summary><para><c>parentWindow</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>parentWindow</c> property was the following:  <c>IHTMLWindow2* parentWindow</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.plugins">
            <summary><para><c>plugins</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>plugins</c> property was the following:  <c>IHTMLElementCollection* plugins</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.protocol">
            <summary><para><c>protocol</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>protocol</c> property was the following:  <c>BSTR protocol</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.readyState">
            <summary><para><c>readyState</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>readyState</c> property was the following:  <c>BSTR readyState</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.referrer">
            <summary><para><c>referrer</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>referrer</c> property was the following:  <c>BSTR referrer</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.Script">
            <summary><para><c>Script</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>Script</c> property was the following:  <c>IDispatch* Script</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.scripts">
            <summary><para><c>scripts</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>scripts</c> property was the following:  <c>IHTMLElementCollection* scripts</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.security">
            <summary><para><c>security</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>security</c> property was the following:  <c>BSTR security</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.selection">
            <summary><para><c>selection</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>selection</c> property was the following:  <c>IHTMLSelectionObject* selection</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.styleSheets">
            <summary><para><c>styleSheets</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>styleSheets</c> property was the following:  <c>IHTMLStyleSheetsCollection* styleSheets</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.title">
            <summary><para><c>title</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>title</c> property was the following:  <c>BSTR title</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.url">
            <summary><para><c>url</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>url</c> property was the following:  <c>BSTR url</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.vlinkColor">
            <summary><para><c>vlinkColor</c> property of <c>IHTMLDocument2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>vlinkColor</c> property was the following:  <c>VARIANT vlinkColor</c>;</para></remarks>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3">
            <summary><para><c>IHTMLDocument3</c> interface.</para></summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.releaseCapture">
            <summary><para><c>releaseCapture</c> method of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>releaseCapture</c> method was the following:  <c>HRESULT releaseCapture (void)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.recalc(System.Boolean)">
            <summary><para><c>recalc</c> method of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>recalc</c> method was the following:  <c>HRESULT recalc ([optional, defaultvalue(0)] VARIANT_BOOL fForce)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.createTextNode(System.String)">
            <summary><para><c>createTextNode</c> method of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>createTextNode</c> method was the following:  <c>HRESULT createTextNode (BSTR text, [out, retval] IHTMLDOMNode** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.attachEvent(System.String,System.Object)">
            <summary><para><c>attachEvent</c> method of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>attachEvent</c> method was the following:  <c>HRESULT attachEvent (BSTR event, IDispatch* pdisp, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.detachEvent(System.String,System.Object)">
            <summary><para><c>detachEvent</c> method of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>detachEvent</c> method was the following:  <c>HRESULT detachEvent (BSTR event, IDispatch* pdisp)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.createDocumentFragment">
            <summary><para><c>createDocumentFragment</c> method of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>createDocumentFragment</c> method was the following:  <c>HRESULT createDocumentFragment ([out, retval] IHTMLDocument2** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.getElementsByName(System.String)">
            <summary><para><c>getElementsByName</c> method of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>getElementsByName</c> method was the following:  <c>HRESULT getElementsByName (BSTR v, [out, retval] IHTMLElementCollection** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.getElementById(System.String)">
            <summary><para><c>getElementById</c> method of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>getElementById</c> method was the following:  <c>HRESULT getElementById (BSTR v, [out, retval] IHTMLElement** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.getElementsByTagName(System.String)">
            <summary><para><c>getElementsByTagName</c> method of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>getElementsByTagName</c> method was the following:  <c>HRESULT getElementsByTagName (BSTR v, [out, retval] IHTMLElementCollection** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.baseUrl">
            <summary><para><c>baseUrl</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>baseUrl</c> property was the following:  <c>BSTR baseUrl</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.childNodes">
            <summary><para><c>childNodes</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>childNodes</c> property was the following:  <c>IDispatch* childNodes</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.dir">
            <summary><para><c>dir</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>dir</c> property was the following:  <c>BSTR dir</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.documentElement">
            <summary><para><c>documentElement</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>documentElement</c> property was the following:  <c>IHTMLElement* documentElement</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.enableDownload">
            <summary><para><c>enableDownload</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>enableDownload</c> property was the following:  <c>VARIANT_BOOL enableDownload</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.inheritStyleSheets">
            <summary><para><c>inheritStyleSheets</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>inheritStyleSheets</c> property was the following:  <c>VARIANT_BOOL inheritStyleSheets</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.onbeforeeditfocus">
            <summary><para><c>onbeforeeditfocus</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onbeforeeditfocus</c> property was the following:  <c>VARIANT onbeforeeditfocus</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.oncellchange">
            <summary><para><c>oncellchange</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>oncellchange</c> property was the following:  <c>VARIANT oncellchange</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.oncontextmenu">
            <summary><para><c>oncontextmenu</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>oncontextmenu</c> property was the following:  <c>VARIANT oncontextmenu</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.ondataavailable">
            <summary><para><c>ondataavailable</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondataavailable</c> property was the following:  <c>VARIANT ondataavailable</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.ondatasetchanged">
            <summary><para><c>ondatasetchanged</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondatasetchanged</c> property was the following:  <c>VARIANT ondatasetchanged</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.ondatasetcomplete">
            <summary><para><c>ondatasetcomplete</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondatasetcomplete</c> property was the following:  <c>VARIANT ondatasetcomplete</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.onpropertychange">
            <summary><para><c>onpropertychange</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onpropertychange</c> property was the following:  <c>VARIANT onpropertychange</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.onrowsdelete">
            <summary><para><c>onrowsdelete</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onrowsdelete</c> property was the following:  <c>VARIANT onrowsdelete</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.onrowsinserted">
            <summary><para><c>onrowsinserted</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onrowsinserted</c> property was the following:  <c>VARIANT onrowsinserted</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.onstop">
            <summary><para><c>onstop</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onstop</c> property was the following:  <c>VARIANT onstop</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.parentDocument">
            <summary><para><c>parentDocument</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>parentDocument</c> property was the following:  <c>IHTMLDocument2* parentDocument</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.uniqueID">
            <summary><para><c>uniqueID</c> property of <c>IHTMLDocument3</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>uniqueID</c> property was the following:  <c>BSTR uniqueID</c>;</para></remarks>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.focus">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.hasFocus">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.onselectionchange">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.namespaces">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.createDocumentFromUrl(System.String,System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.media">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.createEventObject">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.fireEvent(System.String,System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.createRenderStyle(System.IntPtr)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.oncontrolselect">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.URLUnencoded">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDOMAttribute">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMAttribute.nodeName">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMAttribute.nodeValue">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMAttribute.specified">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDOMChildrenCollection">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMChildrenCollection.length">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMChildrenCollection.GetEnumerator">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMChildrenCollection.item(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.nodeType">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.parentNode">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.hasChildNodes">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.childNodes">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.attributes">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.insertBefore(C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode,System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.removeChild(C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.replaceChild(C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode,C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.cloneNode(System.Boolean)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.removeNode(System.Boolean)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.swapNode(C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.replaceNode(C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.appendChild(C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.nodeName">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.nodeValue">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.firstChild">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.lastChild">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.previousSibling">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.nextSibling">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner.PreHandleEvent(System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner.PostHandleEvent(System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner.TranslateAccelerator(System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner.PostEditorEventNotify(System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLEditHost">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditHost.SnapRect(C1.Win.C1Editor.Internal.HTML.IHTMLElement,C1.Win.C1Editor.Internal.HTML.tagRECT@,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices.AddDesigner(C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices.RemoveDesigner(C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices.GetSelectionServices(C1.Win.C1Editor.Internal.HTML.IMarkupContainer,C1.Win.C1Editor.Internal.HTML.ISelectionServices@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices.MoveToSelectionAnchor(C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices.MoveToSelectionEnd(C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices.SelectRange(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLElement">
            <summary><para><c>IHTMLElement</c> interface.</para></summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.setAttribute(System.String,System.Object,System.Int32)">
            <summary><para><c>setAttribute</c> method of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>setAttribute</c> method was the following:  <c>HRESULT setAttribute (BSTR strAttributeName, VARIANT AttributeValue, [optional, defaultvalue(1)] long lFlags)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.getAttribute(System.String,System.Int32)">
            <summary><para><c>getAttribute</c> method of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>getAttribute</c> method was the following:  <c>HRESULT getAttribute (BSTR strAttributeName, [optional, defaultvalue(0)] long lFlags, [out, retval] VARIANT* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.removeAttribute(System.String,System.Int32)">
            <summary><para><c>removeAttribute</c> method of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>removeAttribute</c> method was the following:  <c>HRESULT removeAttribute (BSTR strAttributeName, [optional, defaultvalue(1)] long lFlags, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.scrollIntoView(System.Object)">
            <summary><para><c>scrollIntoView</c> method of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>scrollIntoView</c> method was the following:  <c>HRESULT scrollIntoView ([optional] VARIANT varargStart)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.contains(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary><para><c>contains</c> method of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>contains</c> method was the following:  <c>HRESULT contains (IHTMLElement* pChild, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.insertAdjacentHTML(System.String,System.String)">
            <summary><para><c>insertAdjacentHTML</c> method of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>insertAdjacentHTML</c> method was the following:  <c>HRESULT insertAdjacentHTML (BSTR where, BSTR html)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.insertAdjacentText(System.String,System.String)">
            <summary><para><c>insertAdjacentText</c> method of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>insertAdjacentText</c> method was the following:  <c>HRESULT insertAdjacentText (BSTR where, BSTR text)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.click">
            <summary><para><c>click</c> method of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>click</c> method was the following:  <c>HRESULT click (void)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.toString">
            <summary><para><c>toString</c> method of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>toString</c> method was the following:  <c>HRESULT toString ([out, retval] BSTR* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.all">
            <summary><para><c>all</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>all</c> property was the following:  <c>IDispatch* all</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.children">
            <summary><para><c>children</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>children</c> property was the following:  <c>IDispatch* children</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.className">
            <summary><para><c>className</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>className</c> property was the following:  <c>BSTR className</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.document">
            <summary><para><c>document</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>document</c> property was the following:  <c>IDispatch* document</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.filters">
            <summary><para><c>filters</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>filters</c> property was the following:  <c>IHTMLFiltersCollection* filters</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.id">
            <summary><para><c>id</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>id</c> property was the following:  <c>BSTR id</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.innerHTML">
            <summary><para><c>innerHTML</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>innerHTML</c> property was the following:  <c>BSTR innerHTML</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.innerText">
            <summary><para><c>innerText</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>innerText</c> property was the following:  <c>BSTR innerText</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.isTextEdit">
            <summary><para><c>isTextEdit</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>isTextEdit</c> property was the following:  <c>VARIANT_BOOL isTextEdit</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.lang">
            <summary><para><c>lang</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>lang</c> property was the following:  <c>BSTR lang</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.language">
            <summary><para><c>language</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>language</c> property was the following:  <c>BSTR language</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.offsetHeight">
            <summary><para><c>offsetHeight</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>offsetHeight</c> property was the following:  <c>long offsetHeight</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.offsetLeft">
            <summary><para><c>offsetLeft</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>offsetLeft</c> property was the following:  <c>long offsetLeft</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.offsetParent">
            <summary><para><c>offsetParent</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>offsetParent</c> property was the following:  <c>IHTMLElement* offsetParent</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.offsetTop">
            <summary><para><c>offsetTop</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>offsetTop</c> property was the following:  <c>long offsetTop</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.offsetWidth">
            <summary><para><c>offsetWidth</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>offsetWidth</c> property was the following:  <c>long offsetWidth</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onafterupdate">
            <summary><para><c>onafterupdate</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onafterupdate</c> property was the following:  <c>VARIANT onafterupdate</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onbeforeupdate">
            <summary><para><c>onbeforeupdate</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onbeforeupdate</c> property was the following:  <c>VARIANT onbeforeupdate</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onclick">
            <summary><para><c>onclick</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onclick</c> property was the following:  <c>VARIANT onclick</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.ondataavailable">
            <summary><para><c>ondataavailable</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondataavailable</c> property was the following:  <c>VARIANT ondataavailable</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.ondatasetchanged">
            <summary><para><c>ondatasetchanged</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondatasetchanged</c> property was the following:  <c>VARIANT ondatasetchanged</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.ondatasetcomplete">
            <summary><para><c>ondatasetcomplete</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondatasetcomplete</c> property was the following:  <c>VARIANT ondatasetcomplete</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.ondblclick">
            <summary><para><c>ondblclick</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondblclick</c> property was the following:  <c>VARIANT ondblclick</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.ondragstart">
            <summary><para><c>ondragstart</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondragstart</c> property was the following:  <c>VARIANT ondragstart</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onerrorupdate">
            <summary><para><c>onerrorupdate</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onerrorupdate</c> property was the following:  <c>VARIANT onerrorupdate</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onfilterchange">
            <summary><para><c>onfilterchange</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onfilterchange</c> property was the following:  <c>VARIANT onfilterchange</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onhelp">
            <summary><para><c>onhelp</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onhelp</c> property was the following:  <c>VARIANT onhelp</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onkeydown">
            <summary><para><c>onkeydown</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onkeydown</c> property was the following:  <c>VARIANT onkeydown</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onkeypress">
            <summary><para><c>onkeypress</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onkeypress</c> property was the following:  <c>VARIANT onkeypress</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onkeyup">
            <summary><para><c>onkeyup</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onkeyup</c> property was the following:  <c>VARIANT onkeyup</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onmousedown">
            <summary><para><c>onmousedown</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onmousedown</c> property was the following:  <c>VARIANT onmousedown</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onmousemove">
            <summary><para><c>onmousemove</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onmousemove</c> property was the following:  <c>VARIANT onmousemove</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onmouseout">
            <summary><para><c>onmouseout</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onmouseout</c> property was the following:  <c>VARIANT onmouseout</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onmouseover">
            <summary><para><c>onmouseover</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onmouseover</c> property was the following:  <c>VARIANT onmouseover</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onmouseup">
            <summary><para><c>onmouseup</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onmouseup</c> property was the following:  <c>VARIANT onmouseup</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onrowenter">
            <summary><para><c>onrowenter</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onrowenter</c> property was the following:  <c>VARIANT onrowenter</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onrowexit">
            <summary><para><c>onrowexit</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onrowexit</c> property was the following:  <c>VARIANT onrowexit</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onselectstart">
            <summary><para><c>onselectstart</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onselectstart</c> property was the following:  <c>VARIANT onselectstart</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.outerHTML">
            <summary><para><c>outerHTML</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>outerHTML</c> property was the following:  <c>BSTR outerHTML</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.outerText">
            <summary><para><c>outerText</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>outerText</c> property was the following:  <c>BSTR outerText</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.parentElement">
            <summary><para><c>parentElement</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>parentElement</c> property was the following:  <c>IHTMLElement* parentElement</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.parentTextEdit">
            <summary><para><c>parentTextEdit</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>parentTextEdit</c> property was the following:  <c>IHTMLElement* parentTextEdit</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.recordNumber">
            <summary><para><c>recordNumber</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>recordNumber</c> property was the following:  <c>VARIANT recordNumber</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.sourceIndex">
            <summary><para><c>sourceIndex</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>sourceIndex</c> property was the following:  <c>long sourceIndex</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.style">
            <summary><para><c>style</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>style</c> property was the following:  <c>IHTMLStyle* style</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.tagName">
            <summary><para><c>tagName</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>tagName</c> property was the following:  <c>BSTR tagName</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.title">
            <summary><para><c>title</c> property of <c>IHTMLElement</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>title</c> property was the following:  <c>BSTR title</c>;</para></remarks>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLElement2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.scopeName">
            <summary><para><c>scopeName</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>scopeName</c> property was the following:  <c>BSTR scopeName</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.setCapture(System.Boolean)">
            <summary><para><c>setCapture</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>setCapture</c> method was the following:  <c>HRESULT setCapture ([optional, defaultvalue(-1)] VARIANT_BOOL containerCapture)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.releaseCapture">
            <summary><para><c>releaseCapture</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>releaseCapture</c> method was the following:  <c>HRESULT releaseCapture (void)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onlosecapture">
            <summary><para><c>onlosecapture</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onlosecapture</c> property was the following:  <c>VARIANT onlosecapture</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.componentFromPoint(System.Int32,System.Int32)">
            <summary><para><c>componentFromPoint</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>componentFromPoint</c> method was the following:  <c>HRESULT componentFromPoint (long x, long y, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.doScroll(System.Object)">
            <summary><para><c>doScroll</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>doScroll</c> method was the following:  <c>HRESULT doScroll ([optional] VARIANT component)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onscroll">
            <summary><para><c>onscroll</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onscroll</c> property was the following:  <c>VARIANT onscroll</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.ondrag">
            <summary><para><c>ondrag</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondrag</c> property was the following:  <c>VARIANT ondrag</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.ondragend">
            <summary><para><c>ondragend</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondragend</c> property was the following:  <c>VARIANT ondragend</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.ondragenter">
            <summary><para><c>ondragenter</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondragenter</c> property was the following:  <c>VARIANT ondragenter</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.ondragover">
            <summary><para><c>ondragover</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondragover</c> property was the following:  <c>VARIANT ondragover</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.ondragleave">
            <summary><para><c>ondragleave</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondragleave</c> property was the following:  <c>VARIANT ondragleave</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.ondrop">
            <summary><para><c>ondrop</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>ondrop</c> property was the following:  <c>VARIANT ondrop</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onbeforecut">
            <summary><para><c>onbeforecut</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onbeforecut</c> property was the following:  <c>VARIANT onbeforecut</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.oncut">
            <summary><para><c>oncut</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>oncut</c> property was the following:  <c>VARIANT oncut</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onbeforecopy">
            <summary><para><c>onbeforecopy</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onbeforecopy</c> property was the following:  <c>VARIANT onbeforecopy</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.oncopy">
            <summary><para><c>oncopy</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>oncopy</c> property was the following:  <c>VARIANT oncopy</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onbeforepaste">
            <summary><para><c>onbeforepaste</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onbeforepaste</c> property was the following:  <c>VARIANT onbeforepaste</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onpaste">
            <summary><para><c>onpaste</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onpaste</c> property was the following:  <c>VARIANT onpaste</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.currentStyle">
            <summary><para><c>currentStyle</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>currentStyle</c> property was the following:  <c>IHTMLCurrentStyle* currentStyle</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onpropertychange">
            <summary><para><c>onpropertychange</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onpropertychange</c> property was the following:  <c>VARIANT onpropertychange</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.getClientRects">
            <summary><para><c>getClientRects</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>getClientRects</c> method was the following:  <c>HRESULT getClientRects ([out, retval] IHTMLRectCollection** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.getBoundingClientRect">
            <summary><para><c>getBoundingClientRect</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>getBoundingClientRect</c> method was the following:  <c>HRESULT getBoundingClientRect ([out, retval] IHTMLRect** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.setExpression(System.String,System.String,System.String)">
            <summary><para><c>setExpression</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>setExpression</c> method was the following:  <c>HRESULT setExpression (BSTR propname, BSTR expression, [optional, defaultvalue("")] BSTR language)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.getExpression(System.String)">
            <summary><para><c>getExpression</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>getExpression</c> method was the following:  <c>HRESULT getExpression (BSTR propname, [out, retval] VARIANT* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.removeExpression(System.String)">
            <summary><para><c>removeExpression</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>removeExpression</c> method was the following:  <c>HRESULT removeExpression (BSTR propname, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.tabIndex">
            <summary><para><c>tabIndex</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>tabIndex</c> property was the following:  <c>short tabIndex</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.focus">
            <summary><para><c>focus</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>focus</c> method was the following:  <c>HRESULT focus (void)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.accessKey">
            <summary><para><c>accessKey</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>accessKey</c> property was the following:  <c>BSTR accessKey</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onblur">
            <summary><para><c>onblur</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onblur</c> property was the following:  <c>VARIANT onblur</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onfocus">
            <summary><para><c>onfocus</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onfocus</c> property was the following:  <c>VARIANT onfocus</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onresize">
            <summary><para><c>onresize</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onresize</c> property was the following:  <c>VARIANT onresize</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.blur">
            <summary><para><c>blur</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>blur</c> method was the following:  <c>HRESULT blur (void)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.addFilter(System.Object)">
            <summary><para><c>addFilter</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>addFilter</c> method was the following:  <c>HRESULT addFilter (IUnknown* pUnk)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.removeFilter(System.Object)">
            <summary><para><c>removeFilter</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>removeFilter</c> method was the following:  <c>HRESULT removeFilter (IUnknown* pUnk)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.clientHeight">
            <summary><para><c>clientHeight</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>clientHeight</c> property was the following:  <c>long clientHeight</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.clientWidth">
            <summary><para><c>clientWidth</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>clientWidth</c> property was the following:  <c>long clientWidth</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.clientTop">
            <summary><para><c>clientTop</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>clientTop</c> property was the following:  <c>long clientTop</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.clientLeft">
            <summary><para><c>clientLeft</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>clientLeft</c> property was the following:  <c>long clientLeft</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.attachEvent(System.String,System.Object)">
            <summary><para><c>attachEvent</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>attachEvent</c> method was the following:  <c>HRESULT attachEvent (BSTR event, IDispatch* pdisp, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.detachEvent(System.String,System.Object)">
            <summary><para><c>detachEvent</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>detachEvent</c> method was the following:  <c>HRESULT detachEvent (BSTR event, IDispatch* pdisp)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.readyState">
            <summary><para><c>readyState</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>readyState</c> property was the following:  <c>VARIANT readyState</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onreadystatechange">
            <summary><para><c>onreadystatechange</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onreadystatechange</c> property was the following:  <c>VARIANT onreadystatechange</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onrowsdelete">
            <summary><para><c>onrowsdelete</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onrowsdelete</c> property was the following:  <c>VARIANT onrowsdelete</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onrowsinserted">
            <summary><para><c>onrowsinserted</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onrowsinserted</c> property was the following:  <c>VARIANT onrowsinserted</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.oncellchange">
            <summary><para><c>oncellchange</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>oncellchange</c> property was the following:  <c>VARIANT oncellchange</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.dir">
            <summary><para><c>dir</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>dir</c> property was the following:  <c>BSTR dir</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.createControlRange">
            <summary><para><c>createControlRange</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>createControlRange</c> method was the following:  <c>HRESULT createControlRange ([out, retval] IDispatch** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.scrollHeight">
            <summary><para><c>scrollHeight</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>scrollHeight</c> property was the following:  <c>long scrollHeight</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.scrollWidth">
            <summary><para><c>scrollWidth</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>scrollWidth</c> property was the following:  <c>long scrollWidth</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.scrollTop">
            <summary><para><c>scrollTop</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>scrollTop</c> property was the following:  <c>long scrollTop</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.scrollLeft">
            <summary><para><c>scrollLeft</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>scrollLeft</c> property was the following:  <c>long scrollLeft</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.clearAttributes">
            <summary><para><c>clearAttributes</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>clearAttributes</c> method was the following:  <c>HRESULT clearAttributes (void)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.mergeAttributes(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary><para><c>mergeAttributes</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>mergeAttributes</c> method was the following:  <c>HRESULT mergeAttributes (IHTMLElement* mergeThis)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.oncontextmenu">
            <summary><para><c>oncontextmenu</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>oncontextmenu</c> property was the following:  <c>VARIANT oncontextmenu</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.insertAdjacentElement(System.String,C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary><para><c>insertAdjacentElement</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>insertAdjacentElement</c> method was the following:  <c>HRESULT insertAdjacentElement (BSTR where, IHTMLElement* insertedElement, [out, retval] IHTMLElement** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.applyElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.String)">
            <summary><para><c>applyElement</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>applyElement</c> method was the following:  <c>HRESULT applyElement (IHTMLElement* apply, BSTR where, [out, retval] IHTMLElement** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.getAdjacentText(System.String)">
            <summary><para><c>getAdjacentText</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>getAdjacentText</c> method was the following:  <c>HRESULT getAdjacentText (BSTR where, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.replaceAdjacentText(System.String,System.String)">
            <summary><para><c>replaceAdjacentText</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>replaceAdjacentText</c> method was the following:  <c>HRESULT replaceAdjacentText (BSTR where, BSTR newText, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.canHaveChildren">
            <summary><para><c>canHaveChildren</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>canHaveChildren</c> property was the following:  <c>VARIANT_BOOL canHaveChildren</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.addBehavior(System.String,System.Object@)">
            <summary><para><c>addBehavior</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>addBehavior</c> method was the following:  <c>HRESULT addBehavior (BSTR bstrUrl, [in, optional] VARIANT* pvarFactory, [out, retval] long* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.removeBehavior(System.Int32)">
            <summary><para><c>removeBehavior</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>removeBehavior</c> method was the following:  <c>HRESULT removeBehavior (long cookie, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.runtimeStyle">
            <summary><para><c>runtimeStyle</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>runtimeStyle</c> property was the following:  <c>IHTMLStyle* runtimeStyle</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.behaviorUrns">
            <summary><para><c>behaviorUrns</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>behaviorUrns</c> property was the following:  <c>IDispatch* behaviorUrns</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.tagUrn">
            <summary><para><c>tagUrn</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>tagUrn</c> property was the following:  <c>BSTR tagUrn</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onbeforeeditfocus">
            <summary><para><c>onbeforeeditfocus</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>onbeforeeditfocus</c> property was the following:  <c>VARIANT onbeforeeditfocus</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.readyStateValue">
            <summary><para><c>readyStateValue</c> property of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>readyStateValue</c> property was the following:  <c>long readyStateValue</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.getElementsByTagName(System.String)">
            <summary><para><c>getElementsByTagName</c> method of <c>IHTMLElement2</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>getElementsByTagName</c> method was the following:  <c>HRESULT getElementsByTagName (BSTR v, [out, retval] IHTMLElementCollection** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLElementCollection">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElementCollection.toString">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElementCollection.length">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElementCollection.GetEnumerator">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElementCollection.item(System.Object,System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElementCollection.tags(System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.SrcElement">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.AltKey">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.CtrlKey">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ShiftKey">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ReturnValue">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.CancelBubble">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.FromElement">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ToElement">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.keyCode">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.Button">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.EventType">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.Qualifier">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.Reason">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.X">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.Y">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ClientX">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ClientY">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.OffsetX">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.OffsetY">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ScreenX">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ScreenY">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.SrcFilter">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.setAttribute(System.String,System.Object,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.getAttribute(System.String,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.removeAttribute(System.String,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.propertyName">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.bookmarks">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.recordset">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.dataFld">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.boundElements">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.repeat">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.srcUrn">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.SrcElement">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.AltKey">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.CtrlKey">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.ShiftKey">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.FromElement">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.ToElement">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.Button">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.EventType">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.Qualifier">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.reason">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.x">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.y">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.ClientX">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.clientY">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.offsetX">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.offsetY">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.screenX">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.screenY">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.srcFilter">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.dataTransfer">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.action">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.dir">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.elements">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.encoding">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.length">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.method">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.name">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.onreset">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.onsubmit">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.target">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.GetEnumerator">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.item(System.Object,System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.reset">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.submit">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.tags(System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.isMap">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.useMap">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.mimeType">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.fileSize">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.fileCreatedDate">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.fileModifiedDate">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.fileUpdatedDate">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.protocol">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.href">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.nameProp">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.border">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.vspace">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.hspace">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.alt">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.src">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.lowsrc">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.vrml">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.dynsrc">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.readyState">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.complete">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.loop">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.align">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.onload">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.onerror">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.onabort">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.name">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.width">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.height">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.start">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.align">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.alt">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.border">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.checked">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.complete">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.defaultChecked">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.defaultValue">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.disabled">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.dynsrc">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.form">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.height">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.hspace">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.indeterminate">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.loop">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.lowsrc">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.maxLength">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.name">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.onabort">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.onchange">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.onerror">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.onload">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.onselect">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.readOnly">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.readyState">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.size">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.src">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.Start">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.status">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.type">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.value">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.vrml">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.vspace">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.width">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.createTextRange">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.select">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLPainter">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPainter.Draw(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPainter.OnResize(System.Int32,System.Int32)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPainter.GetPainterInfo(C1.Win.C1Editor.Internal.HTML.HTML_PAINTER_INFO)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPainter.HitTestPoint(System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.InvalidatePainterInfo">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.InvalidateRect(System.IntPtr)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.InvalidateRegion(System.IntPtr)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.GetDrawInfo(System.Int32,C1.Win.C1Editor.Internal.HTML.HTML_PAINT_DRAW_INFO@)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.TransformGlobalToLocal(C1.Win.C1Editor.Internal.HTML.POINT,C1.Win.C1Editor.Internal.HTML.POINT@)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.TransformLocalToGlobal(C1.Win.C1Editor.Internal.HTML.POINT,C1.Win.C1Editor.Internal.HTML.POINT@)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.GetHitTestCookie(System.Int32@)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLRect">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRect.bottom">
            <summary><para><c>bottom</c> property of <c>IHTMLRect</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>bottom</c> property was the following:  <c>long bottom</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRect.left">
            <summary><para><c>left</c> property of <c>IHTMLRect</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>left</c> property was the following:  <c>long left</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRect.right">
            <summary><para><c>right</c> property of <c>IHTMLRect</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>right</c> property was the following:  <c>long right</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRect.top">
            <summary><para><c>top</c> property of <c>IHTMLRect</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>top</c> property was the following:  <c>long top</c>;</para></remarks>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLRectCollection">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLRectCollection.item(System.Object@)">
            <summary><para><c>item</c> method of <c>IHTMLRectCollection</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>item</c> method was the following:  <c>HRESULT item ([in] VARIANT* pvarIndex, [out, retval] VARIANT* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRectCollection._newEnum">
            <summary><para><c>_newEnum</c> property of <c>IHTMLRectCollection</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>_newEnum</c> property was the following:  <c>IUnknown* _newEnum</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRectCollection.length">
            <summary><para><c>length</c> property of <c>IHTMLRectCollection</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>length</c> property was the following:  <c>long length</c>;</para></remarks>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textLineThroughStyle">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textUnderlineStyle">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textEffect">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textBackgroundColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textDecorationColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.renderingPriority">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.defaultTextSelection">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textDecoration">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.fontFamily">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.fontStyle">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.fontVariant">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.fontWeight">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.fontSize">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.font">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.color">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.background">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundImage">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundRepeat">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundAttachment">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundPosition">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundPositionX">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundPositionY">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.wordSpacing">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.letterSpacing">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textDecoration">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textDecorationNone">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textDecorationUnderline">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textDecorationOverline">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textDecorationLineThrough">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textDecorationBlink">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.verticalAlign">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textTransform">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textAlign">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textIndent">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.lineHeight">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.marginTop">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.marginRight">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.marginBottom">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.marginLeft">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.margin">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.paddingTop">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.paddingRight">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.paddingBottom">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.paddingLeft">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.padding">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.border">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderTop">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderRight">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderBottom">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderLeft">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderTopColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderRightColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderBottomColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderLeftColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderWidth">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderTopWidth">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderRightWidth">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderBottomWidth">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderLeftWidth">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderStyle">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderTopStyle">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderRightStyle">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderBottomStyle">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderLeftStyle">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.width">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.height">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.styleFloat">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.clear">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.display">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.visibility">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.listStyleType">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.listStylePosition">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.listStyleImage">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.listStyle">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.whiteSpace">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.top">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.left">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.position">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.zIndex">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.overflow">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.pageBreakBefore">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.pageBreakAfter">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.cssText">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.cursor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.clip">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.filter">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.setAttribute(System.String,System.Object,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.getAttribute(System.String,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.removeAttribute(System.String,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.src">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.htmlFor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.scriptevent">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.text">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.defer">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.readyState">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.onerror">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.type">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject.CreateRange">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject.Empty">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject.Clear">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject.EventType">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject2.createRangeCollection">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject2.typeDetail">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLStyle">
            <summary><para><c>IHTMLStyle</c> interface.</para></summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.setAttribute(System.String,System.Object,System.Int32)">
            <summary><para><c>setAttribute</c> method of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>setAttribute</c> method was the following:  <c>HRESULT setAttribute (BSTR strAttributeName, VARIANT AttributeValue, [optional, defaultvalue(1)] long lFlags)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.getAttribute(System.String,System.Int32)">
            <summary><para><c>getAttribute</c> method of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>getAttribute</c> method was the following:  <c>HRESULT getAttribute (BSTR strAttributeName, [optional, defaultvalue(0)] long lFlags, [out, retval] VARIANT* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.removeAttribute(System.String,System.Int32)">
            <summary><para><c>removeAttribute</c> method of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>removeAttribute</c> method was the following:  <c>HRESULT removeAttribute (BSTR strAttributeName, [optional, defaultvalue(1)] long lFlags, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.toString">
            <summary><para><c>toString</c> method of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>toString</c> method was the following:  <c>HRESULT toString ([out, retval] BSTR* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.background">
            <summary><para><c>background</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>background</c> property was the following:  <c>BSTR background</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundAttachment">
            <summary><para><c>backgroundAttachment</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>backgroundAttachment</c> property was the following:  <c>BSTR backgroundAttachment</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundColor">
            <summary><para><c>backgroundColor</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>VARIANT backgroundColor</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundImage">
            <summary><para><c>backgroundImage</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>backgroundImage</c> property was the following:  <c>BSTR backgroundImage</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundPosition">
            <summary><para><c>backgroundPosition</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>backgroundPosition</c> property was the following:  <c>BSTR backgroundPosition</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundPositionX">
            <summary><para><c>backgroundPositionX</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>backgroundPositionX</c> property was the following:  <c>VARIANT backgroundPositionX</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundPositionY">
            <summary><para><c>backgroundPositionY</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>backgroundPositionY</c> property was the following:  <c>VARIANT backgroundPositionY</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundRepeat">
            <summary><para><c>backgroundRepeat</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>backgroundRepeat</c> property was the following:  <c>BSTR backgroundRepeat</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.border">
            <summary><para><c>border</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>border</c> property was the following:  <c>BSTR border</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderBottom">
            <summary><para><c>borderBottom</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderBottom</c> property was the following:  <c>BSTR borderBottom</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderBottomColor">
            <summary><para><c>borderBottomColor</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderBottomColor</c> property was the following:  <c>VARIANT borderBottomColor</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderBottomStyle">
            <summary><para><c>borderBottomStyle</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderBottomStyle</c> property was the following:  <c>BSTR borderBottomStyle</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderBottomWidth">
            <summary><para><c>borderBottomWidth</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderBottomWidth</c> property was the following:  <c>VARIANT borderBottomWidth</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderColor">
            <summary><para><c>borderColor</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderColor</c> property was the following:  <c>BSTR borderColor</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderLeft">
            <summary><para><c>borderLeft</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderLeft</c> property was the following:  <c>BSTR borderLeft</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderLeftColor">
            <summary><para><c>borderLeftColor</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderLeftColor</c> property was the following:  <c>VARIANT borderLeftColor</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderLeftStyle">
            <summary><para><c>borderLeftStyle</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderLeftStyle</c> property was the following:  <c>BSTR borderLeftStyle</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderLeftWidth">
            <summary><para><c>borderLeftWidth</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderLeftWidth</c> property was the following:  <c>VARIANT borderLeftWidth</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderRight">
            <summary><para><c>borderRight</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderRight</c> property was the following:  <c>BSTR borderRight</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderRightColor">
            <summary><para><c>borderRightColor</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderRightColor</c> property was the following:  <c>VARIANT borderRightColor</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderRightStyle">
            <summary><para><c>borderRightStyle</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderRightStyle</c> property was the following:  <c>BSTR borderRightStyle</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderRightWidth">
            <summary><para><c>borderRightWidth</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderRightWidth</c> property was the following:  <c>VARIANT borderRightWidth</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderStyle">
            <summary><para><c>borderStyle</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderStyle</c> property was the following:  <c>BSTR borderStyle</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderTop">
            <summary><para><c>borderTop</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderTop</c> property was the following:  <c>BSTR borderTop</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderTopColor">
            <summary><para><c>borderTopColor</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderTopColor</c> property was the following:  <c>VARIANT borderTopColor</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderTopStyle">
            <summary><para><c>borderTopStyle</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderTopStyle</c> property was the following:  <c>BSTR borderTopStyle</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderTopWidth">
            <summary><para><c>borderTopWidth</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderTopWidth</c> property was the following:  <c>VARIANT borderTopWidth</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderWidth">
            <summary><para><c>borderWidth</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>borderWidth</c> property was the following:  <c>BSTR borderWidth</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.clear">
            <summary><para><c>clear</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>clear</c> property was the following:  <c>BSTR clear</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.clip">
            <summary><para><c>clip</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>clip</c> property was the following:  <c>BSTR clip</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.color">
            <summary><para><c>color</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>color</c> property was the following:  <c>VARIANT color</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.cssText">
            <summary><para><c>cssText</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>cssText</c> property was the following:  <c>BSTR cssText</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.cursor">
            <summary><para><c>cursor</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>cursor</c> property was the following:  <c>BSTR cursor</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.display">
            <summary><para><c>display</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>display</c> property was the following:  <c>BSTR display</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.filter">
            <summary><para><c>filter</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>filter</c> property was the following:  <c>BSTR filter</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.font">
            <summary><para><c>font</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>font</c> property was the following:  <c>BSTR font</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.fontFamily">
            <summary><para><c>fontFamily</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>fontFamily</c> property was the following:  <c>BSTR fontFamily</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.fontSize">
            <summary><para><c>fontSize</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>fontSize</c> property was the following:  <c>VARIANT fontSize</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.fontStyle">
            <summary><para><c>fontStyle</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>fontStyle</c> property was the following:  <c>BSTR fontStyle</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.fontVariant">
            <summary><para><c>fontVariant</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>fontVariant</c> property was the following:  <c>BSTR fontVariant</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.fontWeight">
            <summary><para><c>fontWeight</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>fontWeight</c> property was the following:  <c>BSTR fontWeight</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.height">
            <summary><para><c>height</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>height</c> property was the following:  <c>VARIANT height</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.left">
            <summary><para><c>left</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>left</c> property was the following:  <c>VARIANT left</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.letterSpacing">
            <summary><para><c>letterSpacing</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>letterSpacing</c> property was the following:  <c>VARIANT letterSpacing</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.lineHeight">
            <summary><para><c>lineHeight</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>lineHeight</c> property was the following:  <c>VARIANT lineHeight</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.listStyle">
            <summary><para><c>listStyle</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>listStyle</c> property was the following:  <c>BSTR listStyle</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.listStyleImage">
            <summary><para><c>listStyleImage</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>listStyleImage</c> property was the following:  <c>BSTR listStyleImage</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.listStylePosition">
            <summary><para><c>listStylePosition</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>listStylePosition</c> property was the following:  <c>BSTR listStylePosition</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.listStyleType">
            <summary><para><c>listStyleType</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>listStyleType</c> property was the following:  <c>BSTR listStyleType</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.margin">
            <summary><para><c>margin</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>margin</c> property was the following:  <c>BSTR margin</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.marginBottom">
            <summary><para><c>marginBottom</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>marginBottom</c> property was the following:  <c>VARIANT marginBottom</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.marginLeft">
            <summary><para><c>marginLeft</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>marginLeft</c> property was the following:  <c>VARIANT marginLeft</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.marginRight">
            <summary><para><c>marginRight</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>marginRight</c> property was the following:  <c>VARIANT marginRight</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.marginTop">
            <summary><para><c>marginTop</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>marginTop</c> property was the following:  <c>VARIANT marginTop</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.overflow">
            <summary><para><c>overflow</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>overflow</c> property was the following:  <c>BSTR overflow</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.padding">
            <summary><para><c>padding</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>padding</c> property was the following:  <c>BSTR padding</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.paddingBottom">
            <summary><para><c>paddingBottom</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>paddingBottom</c> property was the following:  <c>VARIANT paddingBottom</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.paddingLeft">
            <summary><para><c>paddingLeft</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>paddingLeft</c> property was the following:  <c>VARIANT paddingLeft</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.paddingRight">
            <summary><para><c>paddingRight</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>paddingRight</c> property was the following:  <c>VARIANT paddingRight</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.paddingTop">
            <summary><para><c>paddingTop</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>paddingTop</c> property was the following:  <c>VARIANT paddingTop</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.pageBreakAfter">
            <summary><para><c>pageBreakAfter</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>pageBreakAfter</c> property was the following:  <c>BSTR pageBreakAfter</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.pageBreakBefore">
            <summary><para><c>pageBreakBefore</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>pageBreakBefore</c> property was the following:  <c>BSTR pageBreakBefore</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.pixelHeight">
            <summary><para><c>pixelHeight</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>pixelHeight</c> property was the following:  <c>long pixelHeight</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.pixelLeft">
            <summary><para><c>pixelLeft</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>pixelLeft</c> property was the following:  <c>long pixelLeft</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.pixelTop">
            <summary><para><c>pixelTop</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>pixelTop</c> property was the following:  <c>long pixelTop</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.pixelWidth">
            <summary><para><c>pixelWidth</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>pixelWidth</c> property was the following:  <c>long pixelWidth</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.posHeight">
            <summary><para><c>posHeight</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>posHeight</c> property was the following:  <c>float posHeight</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.position">
            <summary><para><c>position</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>position</c> property was the following:  <c>BSTR position</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.posLeft">
            <summary><para><c>posLeft</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>posLeft</c> property was the following:  <c>float posLeft</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.posTop">
            <summary><para><c>posTop</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>posTop</c> property was the following:  <c>float posTop</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.posWidth">
            <summary><para><c>posWidth</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>posWidth</c> property was the following:  <c>float posWidth</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.styleFloat">
            <summary><para><c>styleFloat</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>styleFloat</c> property was the following:  <c>BSTR styleFloat</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textAlign">
            <summary><para><c>textAlign</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>textAlign</c> property was the following:  <c>BSTR textAlign</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textDecoration">
            <summary><para><c>textDecoration</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>textDecoration</c> property was the following:  <c>BSTR textDecoration</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textDecorationBlink">
            <summary><para><c>textDecorationBlink</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>textDecorationBlink</c> property was the following:  <c>VARIANT_BOOL textDecorationBlink</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textDecorationLineThrough">
            <summary><para><c>textDecorationLineThrough</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>textDecorationLineThrough</c> property was the following:  <c>VARIANT_BOOL textDecorationLineThrough</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textDecorationNone">
            <summary><para><c>textDecorationNone</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>textDecorationNone</c> property was the following:  <c>VARIANT_BOOL textDecorationNone</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textDecorationOverline">
            <summary><para><c>textDecorationOverline</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>textDecorationOverline</c> property was the following:  <c>VARIANT_BOOL textDecorationOverline</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textDecorationUnderline">
            <summary><para><c>textDecorationUnderline</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>textDecorationUnderline</c> property was the following:  <c>VARIANT_BOOL textDecorationUnderline</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textIndent">
            <summary><para><c>textIndent</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>textIndent</c> property was the following:  <c>VARIANT textIndent</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textTransform">
            <summary><para><c>textTransform</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>textTransform</c> property was the following:  <c>BSTR textTransform</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.top">
            <summary><para><c>top</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>top</c> property was the following:  <c>VARIANT top</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.verticalAlign">
            <summary><para><c>verticalAlign</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>verticalAlign</c> property was the following:  <c>VARIANT verticalAlign</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.visibility">
            <summary><para><c>visibility</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>visibility</c> property was the following:  <c>BSTR visibility</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.whiteSpace">
            <summary><para><c>whiteSpace</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>whiteSpace</c> property was the following:  <c>BSTR whiteSpace</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.width">
            <summary><para><c>width</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>width</c> property was the following:  <c>VARIANT width</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.wordSpacing">
            <summary><para><c>wordSpacing</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>wordSpacing</c> property was the following:  <c>VARIANT wordSpacing</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.zIndex">
            <summary><para><c>zIndex</c> property of <c>IHTMLStyle</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>zIndex</c> property was the following:  <c>VARIANT zIndex</c>;</para></remarks>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.title">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.parentStyleSheet">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.owningElement">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.disabled">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.readOnly">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.imports">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.href">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.type">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.id">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.addImport(System.String,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.addRule(System.String,System.String,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.removeImport(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.removeRule(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.media">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.cssText">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.rules">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRule">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRule.selectorText">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRule.style">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRule.readOnly">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRulesCollection">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRulesCollection.length">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRulesCollection.item(System.Object)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetsCollection">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetsCollection.length">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetsCollection.GetEnumerator">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetsCollection.item(System.Object)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLTable">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.cols">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.border">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.frame">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.rules">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.cellSpacing">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.cellPadding">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.background">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.bgColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.borderColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.borderColorLight">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.borderColorDark">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.align">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.refresh">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.rows">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.width">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.height">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.dataPageSize">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.nextPage">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.previousPage">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.tHead">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.tFoot">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.tBodies">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.caption">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.createTHead">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.deleteTHead">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.createTFoot">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.deleteTFoot">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.createCaption">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.deleteCaption">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.insertRow(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.deleteRow(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.readyState">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.onreadystatechange">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.rowSpan">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.colSpan">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.align">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.vAlign">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.bgColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.noWrap">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.background">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.borderColor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.borderColorLight">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.borderColorDark">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.width">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.height">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.cellIndex">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.align">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.vAlign">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.bgColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.borderColor">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.borderColorLight">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.borderColorDark">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.rowIndex">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.sectionRowIndex">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.cells">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.insertCell(System.Int32)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.deleteCell(System.Int32)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLTitleElement">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTitleElement.text">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange">
            <summary><para><c>IHTMLTxtRange</c> interface.</para></summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.parentElement">
            <summary><para><c>parentElement</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>parentElement</c> method was the following:  <c>HRESULT parentElement ([out, retval] IHTMLElement** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.duplicate">
            <summary><para><c>duplicate</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>duplicate</c> method was the following:  <c>HRESULT duplicate ([out, retval] IHTMLTxtRange** ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.inRange(C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange)">
            <summary><para><c>inRange</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>inRange</c> method was the following:  <c>HRESULT inRange (IHTMLTxtRange* range, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.isEqual(C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange)">
            <summary><para><c>isEqual</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>isEqual</c> method was the following:  <c>HRESULT isEqual (IHTMLTxtRange* range, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.scrollIntoView(System.Boolean)">
            <summary><para><c>scrollIntoView</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>scrollIntoView</c> method was the following:  <c>HRESULT scrollIntoView ([optional, defaultvalue(-1)] VARIANT_BOOL fStart)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.collapse(System.Boolean)">
            <summary><para><c>collapse</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>collapse</c> method was the following:  <c>HRESULT collapse ([optional, defaultvalue(-1)] VARIANT_BOOL Start)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.expand(System.String)">
            <summary><para><c>expand</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>expand</c> method was the following:  <c>HRESULT expand (BSTR Unit, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.move(System.String,System.Int32)">
            <summary><para><c>move</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>move</c> method was the following:  <c>HRESULT move (BSTR Unit, [optional, defaultvalue(1)] long Count, [out, retval] long* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.moveStart(System.String,System.Int32)">
            <summary><para><c>moveStart</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>moveStart</c> method was the following:  <c>HRESULT moveStart (BSTR Unit, [optional, defaultvalue(1)] long Count, [out, retval] long* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.moveEnd(System.String,System.Int32)">
            <summary><para><c>moveEnd</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>moveEnd</c> method was the following:  <c>HRESULT moveEnd (BSTR Unit, [optional, defaultvalue(1)] long Count, [out, retval] long* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.select">
            <summary><para><c>select</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>select</c> method was the following:  <c>HRESULT select (void)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.pasteHTML(System.String)">
            <summary><para><c>pasteHTML</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>pasteHTML</c> method was the following:  <c>HRESULT pasteHTML (BSTR html)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.moveToElementText(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary><para><c>moveToElementText</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>moveToElementText</c> method was the following:  <c>HRESULT moveToElementText (IHTMLElement* element)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.setEndPoint(System.String,C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange)">
            <summary><para><c>setEndPoint</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>setEndPoint</c> method was the following:  <c>HRESULT setEndPoint (BSTR how, IHTMLTxtRange* SourceRange)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.compareEndPoints(System.String,C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange)">
            <summary><para><c>compareEndPoints</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>compareEndPoints</c> method was the following:  <c>HRESULT compareEndPoints (BSTR how, IHTMLTxtRange* SourceRange, [out, retval] long* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.findText(System.String,System.Int32,System.Int32)">
            <summary><para><c>findText</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>findText</c> method was the following:  <c>HRESULT findText (BSTR String, [optional, defaultvalue(1073741823)] long Count, [optional, defaultvalue(0)] long Flags, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.moveToPoint(System.Int32,System.Int32)">
            <summary><para><c>moveToPoint</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>moveToPoint</c> method was the following:  <c>HRESULT moveToPoint (long x, long y)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.getBookmark">
            <summary><para><c>getBookmark</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>getBookmark</c> method was the following:  <c>HRESULT getBookmark ([out, retval] BSTR* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.moveToBookmark(System.String)">
            <summary><para><c>moveToBookmark</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>moveToBookmark</c> method was the following:  <c>HRESULT moveToBookmark (BSTR Bookmark, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.queryCommandSupported(System.String)">
            <summary><para><c>queryCommandSupported</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>queryCommandSupported</c> method was the following:  <c>HRESULT queryCommandSupported (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.queryCommandEnabled(System.String)">
            <summary><para><c>queryCommandEnabled</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>queryCommandEnabled</c> method was the following:  <c>HRESULT queryCommandEnabled (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.queryCommandState(System.String)">
            <summary><para><c>queryCommandState</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>queryCommandState</c> method was the following:  <c>HRESULT queryCommandState (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.queryCommandIndeterm(System.String)">
            <summary><para><c>queryCommandIndeterm</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>queryCommandIndeterm</c> method was the following:  <c>HRESULT queryCommandIndeterm (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.queryCommandText(System.String)">
            <summary><para><c>queryCommandText</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>queryCommandText</c> method was the following:  <c>HRESULT queryCommandText (BSTR cmdID, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.queryCommandValue(System.String)">
            <summary><para><c>queryCommandValue</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>queryCommandValue</c> method was the following:  <c>HRESULT queryCommandValue (BSTR cmdID, [out, retval] VARIANT* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.execCommand(System.String,System.Boolean,System.Object)">
            <summary><para><c>execCommand</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>execCommand</c> method was the following:  <c>HRESULT execCommand (BSTR cmdID, [optional, defaultvalue(0)] VARIANT_BOOL showUI, [optional] VARIANT value, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.execCommandShowHelp(System.String)">
            <summary><para><c>execCommandShowHelp</c> method of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>execCommandShowHelp</c> method was the following:  <c>HRESULT execCommandShowHelp (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.htmlText">
            <summary><para><c>htmlText</c> property of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>htmlText</c> property was the following:  <c>BSTR htmlText</c>;</para></remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.text">
            <summary><para><c>text</c> property of <c>IHTMLTxtRange</c> interface.</para></summary>
            <remarks><para>An original IDL definition of <c>text</c> property was the following:  <c>BSTR text</c>;</para></remarks>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRangeCollection">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRangeCollection.length">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRangeCollection.GetEnumerator">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRangeCollection.item(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.ILineInfo">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.ILineInfo.x">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.ILineInfo.baseLine">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.ILineInfo.textDescent">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.ILineInfo.textHeight">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTML.ILineInfo.lineDirection">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IMarkupContainer">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer.OwningDoc(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.owningDoc(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.createChangeLog(C1.Win.C1Editor.Internal.HTML.IHTMLChangeSink,C1.Win.C1Editor.Internal.HTML.IHTMLChangeLog@,System.Boolean,System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.RegisterForDirtyRange(C1.Win.C1Editor.Internal.HTML.IHTMLChangeSink,System.UInt32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.UnRegisterForDirtyRange(System.UInt32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.GetAndClearDirtyRange(System.UInt32,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.GetVersionNumber">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.GetMasterElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IMarkupPointer">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.OwningDoc(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.Gravity(System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.SetGravity(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.Cling(System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.SetCling(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.Unposition">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.IsPositioned(System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.GetContainer(C1.Win.C1Editor.Internal.HTML.IMarkupContainer@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.MoveAdjacentToElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.MoveToPointer(C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.MoveToContainer(C1.Win.C1Editor.Internal.HTML.IMarkupContainer,System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.Left(System.Boolean,C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE@,C1.Win.C1Editor.Internal.HTML.IHTMLElement@,System.Int32@,System.String@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.Right(System.Boolean,C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE@,C1.Win.C1Editor.Internal.HTML.IHTMLElement@,System.Int32@,System.String@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.CurrentScope(C1.Win.C1Editor.Internal.HTML.IHTMLElement@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.IsLeftOf(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.IsLeftOfOrEqualTo(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.IsRightOf(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.IsRightOfOrEqualTo(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.IsEqualTo(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.MoveUnit(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.FindText(System.String,System.UInt32,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IMarkupServices">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.CreateMarkupPointer(C1.Win.C1Editor.Internal.HTML.IMarkupPointer@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.CreateMarkupContainer(C1.Win.C1Editor.Internal.HTML.IMarkupContainer@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.CreateElement(System.Int32,System.String,C1.Win.C1Editor.Internal.HTML.IHTMLElement@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.CloneElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement,C1.Win.C1Editor.Internal.HTML.IHTMLElement@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.InsertElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.RemoveElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.Remove(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.Copy(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.Move(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.InsertText(System.String,System.Int32,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.ParseString(System.String,System.UInt32,C1.Win.C1Editor.Internal.HTML.IMarkupContainer@,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.ParseGlobal(System.IntPtr,System.UInt32,C1.Win.C1Editor.Internal.HTML.IMarkupContainer@,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.IsScopedElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.GetElementTagId(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.GetTagIDForName(System.String,System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.GetNameForTagID(System.Int32,System.String@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.MovePointersToRange(C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.MoveRangeToPointers(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.BeginUndoUnit(System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.EndUndoUnit">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.ISegment">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISegment.GetPointers(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.ISegmentList">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentList.CreateIterator(C1.Win.C1Editor.Internal.HTML.ISegmentListIterator@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentList.GetType(System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentList.IsEmpty(System.Boolean@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.ISegmentListIterator">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentListIterator.Current(C1.Win.C1Editor.Internal.HTML.ISegment@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentListIterator.First">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentListIterator.IsDone">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentListIterator.Advance">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.ISelectionServices">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServices.SetSelectionType(System.Int32,C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServices.GetMarkupContainer(C1.Win.C1Editor.Internal.HTML.IMarkupContainer@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServices.AddSegment(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.ISegment@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServices.AddElementSegment(C1.Win.C1Editor.Internal.HTML.IHTMLElement,C1.Win.C1Editor.Internal.HTML.IElementSegment@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServices.RemoveSegment(C1.Win.C1Editor.Internal.HTML.ISegment)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServices.GetSelectionServicesListener(C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener.BeginSelectionUndo">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener.EndSelectionUndo">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener.OnSelectedElementExit(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener.OnChangeType(System.Int32,C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener.GetTypeDetail(System.String@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits.Next(System.Int32,System.IntPtr@,System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits.Bogus">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits.Skip(System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits.Reset">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits.Clone(C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IOleClientSite">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleClientSite.SaveObject">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleClientSite.GetMoniker(System.UInt32,System.UInt32,System.Runtime.InteropServices.ComTypes.IMoniker@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleClientSite.GetContainer(C1.Win.C1Editor.Internal.HTML.IOleContainer@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleClientSite.ShowObject">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleClientSite.OnShowWindow(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleClientSite.RequestNewObjectLayout">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IOleContainer">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleContainer.ParseDisplayName(System.Object,System.String,System.Int32[],System.Object[])">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleContainer.EnumObjects(C1.Win.C1Editor.Internal.HTML.tagOLECONTF,C1.Win.C1Editor.Internal.HTML.IEnumUnknown@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleContainer.LockContainer(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.GetWindow(System.IntPtr@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.ContextSensitiveHelp(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.TranslateAccelerator(C1.Win.C1Editor.Internal.HTML.tagMSG@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.OnFrameWindowActivate(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.OnDocWindowActivate(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.ResizeBorder(C1.Win.C1Editor.Internal.HTML.tagRECT@,C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow@,System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.EnableModeless(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.GetWindow(System.IntPtr@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.ContextSensitiveHelp(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.GetBorder(C1.Win.C1Editor.Internal.HTML.tagRECT)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.RequestBorderSpace(C1.Win.C1Editor.Internal.HTML.tagRECT@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.SetBorderSpace(C1.Win.C1Editor.Internal.HTML.tagRECT@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.SetActiveObject(C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject@,System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.InsertMenus(System.IntPtr,System.Object@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.SetMenu(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.RemoveMenus(System.IntPtr)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.SetStatusText(System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.EnableModeless(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.TranslateAccelerator(C1.Win.C1Editor.Internal.HTML.tagMSG@,System.Int16)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow.GetWindow(System.IntPtr@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow.ContextSensitiveHelp(System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow.GetBorder(C1.Win.C1Editor.Internal.HTML.tagRECT@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow.RequestBorderSpace(C1.Win.C1Editor.Internal.HTML.tagRECT@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow.SetBorderSpace(C1.Win.C1Editor.Internal.HTML.tagRECT@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow.SetActiveObject(C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject@,System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IOleObject">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.SetClientSite(C1.Win.C1Editor.Internal.HTML.IOleClientSite)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetClientSite(C1.Win.C1Editor.Internal.HTML.IOleClientSite@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.SetHostNames(System.String,System.String)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.Close(System.UInt32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.SetMoniker(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetMoniker(System.UInt32,System.UInt32,System.Runtime.InteropServices.ComTypes.IMoniker@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.InitFromData(System.Runtime.InteropServices.ComTypes.IDataObject,System.Boolean,System.UInt32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetClipboardData(System.UInt32,System.Runtime.InteropServices.ComTypes.IDataObject@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.DoVerb(System.Int32,C1.Win.C1Editor.Internal.HTML.tagMSG@,C1.Win.C1Editor.Internal.HTML.IOleClientSite,System.Int32,System.IntPtr,C1.Win.C1Editor.Internal.HTML.tagRECT@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.EnumVerbs(System.Object@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.OleUpdate">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.IsUpToDate">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetUserClassID(System.Guid@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetUserType(System.UInt32,System.String@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.SetExtent(System.UInt32,C1.Win.C1Editor.Internal.HTML.tagSIZEL@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetExtent(System.UInt32,C1.Win.C1Editor.Internal.HTML.tagSIZEL@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.Advise(System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.Unadvise(System.UInt32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.EnumAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetMiscStatus(System.UInt32,System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.SetColorScheme(System.Object@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit.Open(C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit.Close(C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit,System.Boolean)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit.Add(C1.Win.C1Editor.Internal.HTML.IOleUndoUnit)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit.FindUnit(C1.Win.C1Editor.Internal.HTML.IOleUndoUnit)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit.GetParentState(System.Int64@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IOleUndoManager">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.Open(C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.Close(C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit,System.Boolean)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.Add(C1.Win.C1Editor.Internal.HTML.IOleUndoUnit)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.GetOpenParentState">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.DiscardFrom(C1.Win.C1Editor.Internal.HTML.IOleUndoUnit)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.UndoTo(C1.Win.C1Editor.Internal.HTML.IOleUndoUnit)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.RedoTo(C1.Win.C1Editor.Internal.HTML.IOleUndoUnit)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.EnumUndoable">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.EnumRedoable">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.GetLastUndoDescription">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.GetLastRedoDescription">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.Enable(System.Boolean)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.IOleUndoUnit">
            <summary>
            This interface is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoUnit.Do(C1.Win.C1Editor.Internal.HTML.IOleUndoManager)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoUnit.GetDescription(System.String@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoUnit.GetUnitType(System.Int32@,System.Int32@)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoUnit.OnNextAdd">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.POINT">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.POINT.X">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.POINT.Y">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.POINT.op_Implicit(C1.Win.C1Editor.Internal.HTML.POINT)~System.Drawing.Point">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.POINT.op_Implicit(System.Drawing.Point)~C1.Win.C1Editor.Internal.HTML.POINT">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.RECT">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.RECT.bottom">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.RECT.left">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.RECT.right">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.RECT.top">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM.eM11">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM.eM12">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM.eM21">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM.eM22">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM.eDx">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM.eDy">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_DRAW_INFO">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_DRAW_INFO.rcViewport">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_DRAW_INFO.hrgnUpdate">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_DRAW_INFO.xform">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.HTML_PAINTER_INFO">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINTER_INFO.lFlags">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINTER_INFO.lZOrder">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINTER_INFO.iidDrawObject">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINTER_INFO.rcBounds">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.TravelLogStruct">
            <summary>
            Used to handle Travel log entries
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.STATURL.pwcsUrl">
            <summary>
            The specified URL.The calling function must free this parameter.
            Set this parameter to STATURL_QUERYFLAG_NOURL if no URL is specified.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.STATURL.pwcsTitle">
            <summary>
            The title of the Web page, as contained in the title tags.
            This calling application must free this parameter.
            Set this parameter to STATURL_QUERYFLAG_NOTITLE if no Web page is specified.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.tagDVASPECTINFO">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagDVASPECTINFO.cb">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagDVASPECTINFO.dwFlags">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.tagPOINT">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagPOINT.X">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagPOINT.Y">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.tagSIZE">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagSIZE.cx">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagSIZE.cy">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.tagSIZEL">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagSIZEL.cx">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagSIZEL.cy">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.tagRECT">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagRECT.Left">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagRECT.Top">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagRECT.Right">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagRECT.Bottom">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.tagRECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.tagMSG">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.hwnd">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.message">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.wParam">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.lParam">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.time">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.pt_x">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.pt_y">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO.cbSize">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO.dwFlags">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO.dwDoubleClick">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO.pchHostCss">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO.pchHostNS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.tagOLEVERB">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLEVERB.lVerb">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLEVERB.lpszVerbName">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLEVERB.fuFlags">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLEVERB.grfAttribs">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.tagOLECMD">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECMD.cmdID">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECMD.cmdf">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.tagOleMenuGroupWidths">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.tagOleMenuGroupWidths.widths">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.STGMEDIUM">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.STGMEDIUM.tymed">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.STGMEDIUM.data">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.STGMEDIUM.pUnkForRelease">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.SECURITY_ATTRIBUTES">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.SECURITY_ATTRIBUTES.nLength">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.SECURITY_ATTRIBUTES.lpSecurityDescriptor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.SECURITY_ATTRIBUTES.bInheritHandle">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.BINDINFO">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.cbSize">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.szExtraInfo">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.stgmedData">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.grfBindInfoF">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.dwBindVerb">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.szCustomVerb">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.cbstgmedData">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.dwOptions">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.dwOptionsFlags">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.dwCodePage">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.securityAttributes">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.iid">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.punk">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.dwReserved">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument">
            <summary>
            This class is for internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.OnDocumentEventHandler">
            <summary>
            This member is for internal use only.
            
            Delegate for initializing event onpropertychange.
            </summary>
            <param name="pEvtObj"></param>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.OnPropertyChange">
            <summary>
            This member is for internal use only.
            
            Event for receiving onpropertychange from element.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.OnBeforeCut">
            <summary>
            This member is for internal use only.
            
            Event for receiving onbeforecut from element.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.OnBeforeCopy">
            <summary>
            This member is for internal use only.
            
            Event for receiving onbeforecopy from element.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.OnBeforePaste">
            <summary>
            This member is for internal use only.
            
            Event for receiving onbeforepaste from element.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.Connect(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2)">
            <summary>
            This member is for internal use only.
            
            Connect to all elements in HTMLDocument.
            </summary>
            <param name="document">Input HTMLDocument</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.Disconnect">
            <summary>
            Disconnect from all elements in HTMLDocument
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.Add(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            Adds new element for receiving events and conects to its events
            </summary>
            <param name="element">element to add</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.DisconnectElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            This member is for internal use only
            </summary>
            <param name="htmlElement">htmlElement</param>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.PathIsNotAbsoluteException">
            <summary>
            The exception that is thrown when path is not absolute.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IO.GetLocalPath(System.String)">
            <summary>
            Returns a relative or absolute path in Windows local file format.
            </summary>
            <param name="path">A path in any format.</param>
            <returns>A path in Windows local file format.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.IO.IsWellFormedPath(System.String,System.Boolean,System.String@,System.Exception@)">
            <summary>
            Indicates whether the path is well-formed.
            </summary>
            <param name="path">A path to check.</param>
            <param name="absoluteOnly">true if path must be absolute.</param>
            <param name="normalized">Normalized path.</param>
            <param name="e">An <see cref="T:System.Exception"/> if path is not well-formad.</param>
            <returns>true if path is well-formed; otherwise, False.</returns>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.SourceEditor">
            <summary>
            Base source editor control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.Internal.SourceEditor"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.SourceEditor._parent">
            <summary>
            A parent <see cref="T:C1.Win.C1Editor.C1Editor"/> control.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.SourceEditor.HtmlEvent">
            <summary>
            Occurs when any Html event occurs.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.SourceEditor.FocusIn">
            <summary>
            Occurs when focus in.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.SourceEditor.FocusOut">
            <summary>
            Occurs when focus out.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.SourceEditor.Drag">
            <summary>
            Occurs when any drag'n'drop operation occurs.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.SourceEditor.BeforeDrop">
            <summary>
            Occurs before drop operation.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.SourceEditor.ShowContextMenu">
            <summary>
            Occurs before context menu is shown.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.SourceEditor.DocumentLoaded">
            <summary>
            Occurs when a document is loaded to the editor.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.SourceEditor.SelectionChanged">
            <summary>
            Occurs when selection is changed in the document.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.SourceEditor.DocumentChanged">
            <summary>
            Occurs when the document is changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.SourceEditor.ClipboardChanged">
            <summary>
            Occurs when clipboard data is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.Initialze(C1.Win.C1Editor.C1Editor)">
            <summary>
            Initializes the control.
            </summary>
            <param name="parent">A parent <see cref="T:C1.Win.C1Editor.C1Editor"/>.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.LoadHtml(System.String)">
            <summary>
            Loads an html string to the editor.
            </summary>
            <param name="html">An html string to load.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.Reload(System.String)">
            <summary>
            Reloads the editor with given html.
            Usualy is used after fixing validation errors.
            </summary>
            <param name="html">A new html string.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.SelectAll">
            <summary>
            Selects all document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.Select(System.Int32,System.Int32)">
            <summary>
            Selects a part of the document.
            </summary>
            <param name="start">Selection start position.</param>
            <param name="length">Selection lenght.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.Select(C1.Win.C1Editor.Internal.XmlNodeInfo)">
            <summary>
            Selects a part of the document.
            </summary>
            <param name="info">An <see cref="T:C1.Win.C1Editor.Internal.XmlNodeInfo"/> that contains information about selection.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.GetTextSelection">
            <summary>
            Returns an <see cref="T:C1.Win.C1Editor.Internal.XmlNodeInfo"/> that represent information about selection.
            </summary>
            <returns>An <see cref="T:C1.Win.C1Editor.Internal.XmlNodeInfo"/> that represent information about selection.</returns>
            <remarks>This method corrects selection to fit it to the text.</remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.ScrollIntoView">
            <summary>
            Scrolls the document to the selection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.Print">
            <summary>
            Prints the document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.Print(System.Boolean,System.String)">
            <summary>
            Prints the document.
            </summary>
            <param name="selectPrinter">If true, show a "choose printer dialog".</param>
            <param name="printTemplateFileName">A print template file name to customize printing.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.PrintPreview(System.String)">
            <summary>
            Shows a print preview dialog.
            </summary>
            <param name="printTemplateFileName">A print template file name to customize printing.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.PageSetup">
            <summary>
            Shows a page setup document for printng.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.ExecuteCommand(System.String)">
            <summary>
            Executes clipboard commands.
            </summary>
            <param name="command">A command name.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.Undo(System.Int32)">
            <summary>
            Undoes the document changes.
            </summary>
            <param name="count">Count of changes to undo.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.Redo(System.Int32)">
            <summary>
            Redoes the document changes.
            </summary>
            <param name="count">Count of changes to redo.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.ClearHistory">
            <summary>
            Clears the document undo/redo stack.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.Find(C1.Win.C1Editor.UICustomization.IFindReplaceOptions)">
            <summary>
            Finds a text in the document.
            </summary>
            <param name="options">An <see cref="T:C1.Win.C1Editor.UICustomization.IFindReplaceOptions"/> to find.</param>
            <returns>True if the text is found.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.Replace(C1.Win.C1Editor.UICustomization.IFindReplaceOptions)">
            <summary>
            Replaces a text in the document.
            </summary>
            <param name="options">An <see cref="T:C1.Win.C1Editor.UICustomization.IFindReplaceOptions"/> to find and replace.</param>
            <returns>True if the text is found.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.ReplaceAll(C1.Win.C1Editor.UICustomization.IFindReplaceOptions)">
            <summary>
            Replaces all entries of a text in the document.
            </summary>
            <param name="options">An <see cref="T:C1.Win.C1Editor.UICustomization.IFindReplaceOptions"/> to find and replace.</param>
            <returns>Count of replacements.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.Format">
            <summary>
            Formats the document xml.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.ValidateXml">
            <summary>
            Validates the document.
            </summary>
            <returns>True if the document is valid.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.UpdateErrors">
            <summary>
            Shows validation errors.
            </summary>
            <returns>A list of validation errors.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.SelectError(C1.Win.Xhtml.ValidateError,C1.Win.C1Editor.Internal.ValidateErrorMarkup)">
            <summary>
            Selects an invalid element in the document.
            </summary>
            <param name="error">A <see cref="T:C1.Win.Xhtml.ValidateError"/> to select.</param>
            <param name="markup">An <see cref="T:C1.Win.C1Editor.Internal.ValidateErrorMarkup"/> to mark invalid element.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.WebBrowser">
            <summary>
            Gets a <see cref="T:C1.Win.C1Editor.Internal.C1WebBrowserBase"/> that represents a source editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.Html">
            <summary>
            Gets an html string of the document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.Modified">
            <summary>
            Gets or sets whether the document is modified.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.SetFocusAfterLoading">
            <summary>
            Gets or sets whether to set focus to the control after document loading.
            </summary>        
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.AppearanceCSS">
            <summary>
            Gets or sets css string to customize the document appearance.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.ReadOnly">
            <summary>
            Gets or sets whether the document is read only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.WordWrap">
            <summary>
            Gets or sets whether words wrap in the document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.CanCut">
            <summary>
            Gets whether the selection can be cut.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.CanCopy">
            <summary>
            Gets whether the selection can be copied.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.CanUndo">
            <summary>
            Gets whether the undo operation is able.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.CanRedo">
            <summary>
            Gets whether the redo operation is able.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.LastUndoName">
            <summary>
            Gets the last undo operation name.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.LastRedoName">
            <summary>
            Gets the last redo operation name.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.UndoList">
            <summary>
            Gets the whole undo operation stack.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.RedoList">
            <summary>
            Gets the whole redo operation stack.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.SupportFind">
            <summary>
            Gets whether the find/replace operations are supported by the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.SelectionStart">
            <summary>
            Gets or sets the slection start position.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.SelectionLength">
            <summary>
            Gets or sets the selection lenght.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.SourceEditor.AllowDropFiles">
            <summary>
            Gets or sets whether a file content can be dropped.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.OnHtmlEvent(C1.Win.C1Editor.HtmlEventEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Editor.Internal.SourceEditor.HtmlEvent"/> event.
            </summary>
            <param name="e">An <see cref="T:C1.Win.C1Editor.HtmlEventEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.OnFocusIn(C1.Win.C1Editor.HtmlEventEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Editor.Internal.SourceEditor.FocusIn"/> event.
            </summary>
            <param name="e">An <see cref="T:C1.Win.C1Editor.HtmlEventEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.OnFocusOut(C1.Win.C1Editor.HtmlEventEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Editor.Internal.SourceEditor.FocusOut"/> event.
            </summary>
            <param name="e">An <see cref="T:C1.Win.C1Editor.HtmlEventEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.OnDrag(C1.Win.C1Editor.Internal.NotifyDragEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Editor.Internal.SourceEditor.Drag"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Editor.Internal.NotifyDragEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.OnBeforeDrop(C1.Win.C1Editor.Internal.NotifyDropEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Editor.Internal.SourceEditor.BeforeDrop"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Editor.Internal.NotifyDropEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.OnShowContextMenu(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Editor.Internal.SourceEditor.ShowContextMenu"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.OnSelectionChanged(C1.Win.C1Editor.HtmlEventEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Editor.Internal.SourceEditor.SelectionChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:C1.Win.C1Editor.HtmlEventEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.OnDocumentLoaded(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Editor.Internal.SourceEditor.DocumentLoaded"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.OnDocumentChanged(C1.Win.C1Editor.DocumentChangedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Editor.Internal.SourceEditor.DocumentChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Editor.DocumentChangedEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.OnCliboardChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Editor.Internal.SourceEditor.ClipboardChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.SourceEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.SourceEditorBrowser">
            <summary>
            Source editor control that uses <see cref="P:C1.Win.C1Editor.Internal.SourceEditorBrowser.WebBrowser"/> control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditorBrowser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.Internal.SourceEditorBrowser"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.SourceEditorBrowser.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditorBrowser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceEditorBrowser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ValidateErrorGrid.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ValidateErrorGrid.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ValidateErrorGrid.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.GotoErrorEventArgs.#ctor(C1.Win.Xhtml.ValidateError)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.Internal.GotoErrorEventArgs"/> class.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.D2HWebBrowserModes">
            <summary>
             Contains available appearance modes for D2HWebBrowser.
            </summary>
            <remarks>This type is for internal use.</remarks>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.D2HWebBrowserModes.Default">
            <summary>
            Default browser mode.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.D2HWebBrowserModes.DownloadOnly">
            <summary>
            Download only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.D2HWebBrowserModes.ShowAllMedia">
            <summary>
            Show all media.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.D2HWebBrowserModes.ShowImages">
            <summary>
            Show images only. Don't show other embed objects.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.C1WebBrowserBase">
            <summary>
             This class makes next things over standard .NET WebBrowser:
             1.Performs initialization with navigating to "about:blank"
             2.Controls content loading and appearance
             3.Allows to load HTML from string with optional path
             4.Can set edit mode to MSHTML document
             It must me COM-visible to catch DISPID_AMBIENT_DLCONTROL
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.C1WebBrowserBase.OnFocusOut">
            <summary>
            Occurs when the control loses input focus.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.C1WebBrowserBase.OnFocusIn">
            <summary>
            Occurs when the control get input focus.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.C1WebBrowserBase.OnBeforeDrop">
            <summary>
            Occurs before drop operation was executed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.C1WebBrowserBase.OnDocumentContentReloaded">
            <summary>
            Occurs in one specific case, when browser content 
            reloaded through HEAD and BODY content replacing. 
            IHTMLDocument2 not changed and OnDocumentLoaded event not raised
            in this case, but in fact document changed.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.C1WebBrowserBase.OnNotifyExternalChange">
            <summary>
            Occurs when HTML-document changed externally, on apply changes in XML-document.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.C1WebBrowserBase.OnClipboardChanged">
            <summary>
            Occurs when clipboard is changed internally, after cut or copy executed in the browser.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.C1WebBrowserBase.OnGenericHTMLEvent">
            <summary>
            Raised in the HTMLDocumentEvents2 interface methods.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.C1WebBrowserBase.OnDragEvent">
            <summary>
            Occurs when the drag operations are executing.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.Edit">
            <summary>
             Sets Edit mode for browser
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.ReadOnly">
            <summary>
             Gets or sets a value indicating whether browser content is read-only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.SuppressAccessibility">
            <summary>
             Suppresses browser accessibility options if true
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.Mode">
            <summary>
             Sets appearance mode
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.AllowDrop">
            <summary>
             Gets or sets a value indicating whether the control can accept data that the user drags onto it.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.ShowComments">
            <summary>
             Sets appearance mode
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.DocType">
            <summary>
             Sets DocType
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.LoadFromString(System.String,System.Uri)">
            <summary>
             Loads browser content from string
            <param name='html'>HTML to output</param>
            <param name='uri'>Path to resolve pictures, video, links e t.c.</param>
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.Navigate(System.String)">
            <summary>
            Loads document from URL
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.Focus">
            <summary>
            Sets input focus to the control.
            </summary>
            <returns>true if the input focus request was successful; otherwise, false.</returns>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.Focused">
            <summary>
            Return true, if control focused; otherwise, False.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.Document">
            <summary>
            returns loaded document
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.LockNotifyChanges">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.UnlockNotifyChanges">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.BeginUndoRedoAction(System.String)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.EndUndoRedoAction">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.RestoreCursorAfterUndoRedo">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.CSS">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.Editor">
            <summary>
            Sets or gets parent Editor
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.CustomSelectionCSS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.CustomHyperlinkCSS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.TableBordersCSS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.IframeBordersCSS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.AppearanceCSS">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.OnHandleCreated(System.EventArgs)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.OnHandleDestroyed(System.EventArgs)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.ExecClick">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.Idispatch_Invoke_Handler_DL_Control">
            <summary>
            This member is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.Idispatch_Invoke_Handler_Usermode">
            <summary>
            This member is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.C1WebBrowserBase.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.TableSelectionBehavior">
            <summary>
            Implement selected table cells custom paint, so whole cell's space highlighted (not only text).
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableSelectionBehavior.GetPosition(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            Calculate element position relative document body.
            </summary>
            <param name="elem">Input element.</param>
            <returns>Element position.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableSelectionBehavior.GetFirstTableCell(C1.Win.C1Editor.Internal.HTML.IHTMLTable)">
            <summary>
            Return first cell of the input table.
            </summary>
            <param name="table">Input table.</param>
            <returns>Result cell.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableSelectionBehavior.ProcessSimpleSelection(C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange)">
            <summary>
            Calculate painted areas for simple selection (set without custom selection mechanism).
            </summary>
            <param name="txtRange">Selection range.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableSelectionBehavior.RefreshSelection">
            <summary>
            Recalculate painted areas for current selection (after table or table column resized).
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableSelectionBehavior.ProcessCustomSelectionChanged(System.Collections.Generic.List{C1.Win.C1Editor.Internal.HTML.IHTMLElement})">
            <summary>
            Calculate painted areas by specified elements.
            </summary>
            <param name="selectedElements"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableSelectionBehavior.ProcessSimpleSelectionChanged">
            <summary>
            Calculate painted areas by current selection.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.CommentSupport">
            <summary>
            Provides Comments functionality
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CommentSupport.Add(System.Int32,System.Int32,System.String)">
            <summary>
            Adds new comment
            </summary>
            <param name="start">Selection start</param>
            <param name="length">Selection length</param>
            <param name="xml">XML to insert</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CommentSupport.Add">
            <summary>
            Adds new comment to the current selection
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CommentSupport.Reply">
            <summary>
            Reply to the current comment
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.CommentSupport.Enabled">
            <summary>
            Gets or sets enable state.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.CommentSupport.Author">
            <summary>
            Gets or sets author name.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CommentSupport.Reply(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            Adds new comment to the current selection
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.CommentBehavior">
            <summary>
            Performs drawing of comment (lines, rectangles, supporting info)
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CommentBehavior.Refresh">
            <summary>
            Refresh internal properties.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.CommentBehavior.Cookie">
            <summary>
            Used for internal purposes.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.CreateElementMethod">
            <summary>
            Used when creating new element in MSHTML
            It can be created
            1.before or after existing element
            2.As a first or last child of existing element
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.ElementComparePosition">
            <summary>
            Position of HTML element against another HTML element
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTMLDataObjectMode">
            <summary>
            Mode for creating DataObject in GetHTMLDataObject
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.StyleEditorMode">
            <summary>
            Mode of Style editor
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.InheritedStylePropertyStateBoxState">
            <summary>
            Type of style property inheritance
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.StyleUnitType">
            <summary>
            HTML style unit types
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.UpDownButtonType">
            <summary>
            Up and down button types
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.ExecuteCommand(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2,C1.Win.C1Editor.Internal.HTML.MSHTML_COMMAND_IDS)">
            <summary>
            Execute MSHTML command without input parameters.
            </summary>
            <param name="command">MSHTML command.</param>
            <param name="htmlDocument">The document.</param> 
            <returns>True, if command execute successful; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.ExecuteCommand(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2,C1.Win.C1Editor.Internal.HTML.MSHTML_COMMAND_IDS,System.Object)">
            <summary>
            Execute MSHTML command with input parameter.
            </summary>
            <param name="command">MSHTML command.</param>
            <param name="htmlDocument">The document.</param> 
            <param name="pIn">Input parameter.</param>
            <returns>True, if command execute successful; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.ExecuteCommand(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2,C1.Win.C1Editor.Internal.HTML.MSHTML_COMMAND_IDS,System.Object,System.Boolean)">
            <summary>
            Execute MSHTML command with input parameter.
            </summary>
            <param name="command">MSHTML command.</param>
            <param name="htmlDocument">The document.</param> 
            <param name="pIn">Input parameter.</param>
            <param name="promptUser">True if need to show user prompt.</param>
            <returns>True, if command execute successful; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.SelectHtmlElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            Set selection in a WebBrowser to the HTML element
            </summary>
            <param name="htmlElement">An <see cref="T:IfacesEnumsStructsClasses.IHTMLElement">IHTMLElement</see> to select</param>
            <returns>TRUE if the operation is completed successfully, FALSE otherwise</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.SelectHtmlRange(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IHTMLDocument2)">
            <summary>
            Set selection in a WebBrowser to the HTML range
            which is bounded by two MSHTML IMarkupPointer-s
            </summary>
            <param name="startMarkupPointer">Start IMarkupPointer of the range</param>
            <param name="endMarkupPointer">End IMarkupPointer of the range</param>
            <param name="htmlDocument"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.SelectPointer(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IHTMLDocument2)">
            <summary>
            Sets selection in a WebBrowser to markup pointer
            </summary>
            <param name="markupPointer">IMarkupPointer</param>
            <param name="htmlDocument">The document.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.FocusHTMLElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement,C1.Win.C1Editor.Internal.HTML.IHTMLDocument2)">
            <summary>
            Sets focus to element
            </summary>
            <param name="element">IHtmlElement</param>
            <param name="htmlDocument">The document.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.GotoBeginning(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2)">
            <summary>
            Sets selection in a WebBrowser to the beginning of document
            </summary>
            <param name="htmlDocument">Source HTML document</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.SetSelection(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2,System.Int32,System.Int32)">
            <summary>
            Set selection in a WebBrowser by start position and length
            </summary>
            <param name="htmlDocument">Source HTML document</param>
            <param name="startPosition">Start position in HTML document</param>
            <param name="length">Selection length</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.GetSelection(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2)">
            <summary>
            Get selection from WebBrowser
            </summary>
            <param name="htmlDocument">Source HTML document</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.GetSelection(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2,System.Int32@,System.Int32@)">
            <summary>
            Get selection position from WebBrowser
            </summary>
            <param name="htmlDocument">Source HTML document</param>
            <param name="startPosition">Selection start position</param>
            <param name="endPosition">Selection end position</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.ConvertPathToUri(System.String,System.Uri)">
            <summary>
            Converts path to Uri
            </summary>
            <param name="path">Path to convert</param>
            <param name="defaultUri">Default uri to return on exception</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.QueryInterface(System.Object,System.Guid)">
            <summary>
            When we have a COM class that can be queried for some interface (other than IUnknown),
            and when the implementation of QueryInterface returns a DIFFERENT pointer for the same interface
            for different calls it seems the RCW does not use the new pointer to invoke the methods.
            Using Marshal.QueryInterface solves the problem.
            </summary>
            <param name="obj">Object that need to cast</param>
            <param name="guid">Interface GUID</param>
            <returns>casted object</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.ReleaseComObject(System.Object)">
            <summary>
            Releases object and calls Debug.Assert if refcount is negative
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.Assert(System.Boolean)">
            <summary>
            Checks for a condition and signals a breakpoint to an attached debugger if the condition is false.</summary>
            <param name="condition"><c>true</c> to prevent a breakpoint being signaled; otherwise, <c>false</c>. </param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.RemoveHTMLElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            Removes HTML element from document
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.IsEmptyXml(System.String)">
            <summary>
            Checks if string doesn't contain any character data
            </summary>
            <param name="xml">input xml</param>
            <returns>true if string contains only from spaces, linebreaks e t.c.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Common.AddBorder(System.Drawing.Image,System.Int32,System.Drawing.Color)">
            <summary>
            Adds a border to the <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="image">An <see cref="T:System.Drawing.Image"/> to add border.</param>
            <param name="width">Border width.</param>
            <param name="color"><see cref="T:System.Drawing.Color"/> of the border.</param>
            <returns>The original <see cref="T:System.Drawing.Image"/> with specified border.</returns>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.Common.LoopList">
            <summary>
            This class allows to store objects in "infinite loop" array with fixed size
            Newest added value override oldest
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.BaseTreeView">
            <summary>
            Class that extends <see cref="T:System.Windows.Forms.TreeView"/> to provide more standard selection behavior
            and additional utilities for finding nodes etc.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.Internal.BaseTreeView"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.BaseTreeView.BorderStyle">
            <summary>
            Gets or sets the type of border around the control.
            (Overriden to change the default to None.)
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.BaseTreeView.HideSelection">
            <summary>
            Gets or sets whether the control should hide the selection when it loses focus.
            (Overriden to change the default to false.)
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.BaseTreeView.ExpandOnDoubleClicks">
            <summary>
            Gets or sets a value that determines whether double-clicking a node should
            collapse and expand it.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.BaseTreeView.LabelEdit">
            <summary>
            Gets or sets a value indicating whether the label text of the tree nodes can be edited.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.BeginEdit(System.Windows.Forms.TreeNode)">
            <summary>
            Initiates the editing of the tree node label.
            </summary>
            <param name="node">A <see cref="T:System.Windows.Forms.TreeNode"/> to edit.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.FindNode(System.Object)">
            <summary>
            Find an object in the Tree, based on the node tags.
            </summary>
            <param name="tag"><see cref="T:System.Windows.Forms.TreeNode"/> tag value to find</param>
            <returns>The <see cref="T:System.Windows.Forms.TreeNode"/> with a Tag property equals to the <paramref name="tag"/> parameter, null of not found.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.SaveSelectedNode">
            <summary>
            Saves the path of the currently selected node for restoring later with <see cref="M:C1.Win.C1Editor.Internal.BaseTreeView.RestoreSelectedNode"/>.
            This is useful if the tree is re-populated after a db refresh so you can restore the node
            based on its <see cref="P:System.Windows.Forms.TreeNode.FullPath"/> property.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.RestoreSelectedNode">
            <summary>
            Restores the selection saved with the previous call to <see cref="M:C1.Win.C1Editor.Internal.BaseTreeView.SaveSelectedNode"/>.
            </summary>
            <returns>true if the selection was suvvessfully restored.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.Populate">
            <summary>
            Populates the control.
            </summary>
            <returns>true if the control was populated.</returns>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.BaseTreeView.NeedPopulate">
            <summary>
            Gets whether to need to populate the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.CheckPopulate">
            <summary>
            Checks a visibility of control and returns a necessity to populate him.
            </summary>
            <returns>A necessity to populate the control.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.CheckPopulate(System.Boolean)">
            <summary>
            Checks a visibility of control and returns a necessity to populate him.
            </summary>
            <param name="clearNodes">If value is true and control is invisible then clears all nodes, otherwise ignored.</param>
            <returns>A necessity to populate the control.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.OnVisibleChanged(System.EventArgs)">
            <summary>
            If the control is visible and need to populate exists, populates the control.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.FindNodeByText(System.Windows.Forms.TreeNodeCollection,System.String)">
            <summary>
            Find a node in a node collection by it text.
            </summary>
            <param name="nodes"><see cref="T:System.Windows.Forms.TreeNodeCollection"/> to search.</param>
            <param name="label">Text to find.</param>
            <returns>The <see cref="T:System.Windows.Forms.TreeNode"/> with a Text property equals to the <paramref name="label"/> parameter, null of not found.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.FindNode(System.Windows.Forms.TreeNodeCollection,System.Object)">
            <summary>
            Find an object in a node collection, based on the node tags.
            </summary>
            <param name="nodes"><see cref="T:System.Windows.Forms.TreeNodeCollection"/> to search.</param>
            <param name="tag"><see cref="T:System.Windows.Forms.TreeNode"/> tag value to find</param>
            <returns>The <see cref="T:System.Windows.Forms.TreeNode"/> with a Tag property equals to the <paramref name="tag"/> parameter, null of not found.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.RemoveNode(System.Windows.Forms.TreeNode)">
            <summary>
            Removes the specified node and corrects the selection.
            </summary>
            <param name="node">The <see cref="T:System.Windows.Forms.TreeNode"/> to remove.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.MeasureContent">
            <summary>
            Gets the size of the tree content (used for autosizing).
            </summary>
            <returns>A <see cref="T:System.Drawing.Size"/> needed to display all the tree contents.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.GetParentCollection(System.Windows.Forms.TreeNode)">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.TreeNodeCollection"/> that contains a given <see cref="T:System.Windows.Forms.TreeNode"/>.
            </summary>
            <param name="node">Node whose parent collection is to be found.</param>
            <returns>The collection that contains the <paramref name="node"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.SetNodeText(System.Windows.Forms.TreeNode,System.String)">
            <summary>
            Sets text to the <see cref="T:System.Windows.Forms.TreeNode"/>.
            </summary>
            <param name="node">A <see cref="T:System.Windows.Forms.TreeNode"/> to change text.</param>
            <param name="text">A new node text.</param>
            <remarks>This method fixes .NET 2.0 bug of <see cref="T:System.Windows.Forms.TreeView"/> perfomance.</remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseTreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)">
            <summary>
            Restores the <see cref="P:TreeView.LabelEdit"/> property and raises the<see cref="E:BeforeLabelEdit"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.NodeLabelEditEventArgs"/> that contains event data.</param>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.InsertPosition">
            <summary>
            Class that calculates a insert position of new nodes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.InsertPosition.#ctor(System.Windows.Forms.TreeView)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.Internal.InsertPosition"/> class.
            </summary>
            <param name="view">A <see cref="T:System.Windows.Forms.TreeView"/> to calculate insert position.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.InsertPosition.#ctor(System.Windows.Forms.TreeView,System.Int32,System.Windows.Forms.TreeNodeCollection,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.Internal.InsertPosition"/> class.
            </summary>
            <param name="view">A <see cref="T:System.Windows.Forms.TreeView"/> to calculate insert position.</param>
            <param name="level">A one-based level of the new node.</param>
            <param name="nodes">A <see cref="T:System.Windows.Forms.TreeNodeCollection"/> of the new node.</param>
            <param name="index">A zero-based index of the new node.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.InsertPosition.Index">
            <summary>
            Gets or sets a zero-based index of the new node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.InsertPosition.Level">
            <summary>
            Gets a one-based level of the new node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.InsertPosition.Nodes">
            <summary>
            Gets a <see cref="T:System.Windows.Forms.TreeNodeCollection"/> of the new node.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.InsertPosition.Update(System.Int32)">
            <summary>
            Updates the insert postion by a new level of the new node.
            </summary>
            <param name="level"></param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.BorderedUserControl.Border">
            <summary>
            Gets or sets whether the control should have a thin border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.BorderedUserControl.Padding">
            <summary>
            Override to hide from serialization (let the Border property work instead)
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.BorderedUserControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BorderedUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BorderedUserControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.CheckBoxStylePropertyControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CheckBoxStylePropertyControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CheckBoxStylePropertyControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.CollapsibleGroupBox">
            <summary>
            GroupBox that can be collapsed and expanded.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CollapsibleGroupBox.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Win.C1Editor.Internal.CollapsibleGroupBox"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.CollapsibleGroupBox.Collapsible">
            <summary>
            Gets or sets whether the CollapsibleGroupBox allows collapse.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.CollapsibleGroupBox.Collapsed">
            <summary>
            Gets or sets whether the CollapsibleGroupBox is currently collapsed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.CollapsibleGroupBox.AutoSizeParent">
            <summary>
            Gets or sets whether the control adjust the parent height when it collapses or expands.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.CollapsibleGroupBox.ExpandedHeight">
            <summary>
            Gets or sets the height of the CollapsibleGroupBox when expanded.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CollapsibleGroupBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override to paint the CollapsibleGroupBox.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CollapsibleGroupBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override to handle collapse/expand.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.CollapsibleGroupBoxDesigner">
            <summary>
            Designer to allow collapsing/expanding with the mouse at design time.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ColorPickerStylePropertyControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ColorPickerStylePropertyControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ColorPickerStylePropertyControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ComboBoxStylePropertyControl.AllowCustomValue">
            <summary>
            Allow user's value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ComboBoxStylePropertyControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ComboBoxStylePropertyControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ComboBoxStylePropertyControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.ConcreteControlClassAttribute">
            <summary>
            This attribute should be placed on any abstract class derived from
            <see cref="T:System.Windows.Forms.Control"/> where it is necessary
            to declare a concrete version of that class at design time.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.ConcreteControlClassProvider`1">
            <summary>
            This class is a proxy for the type description provider which
            provides supplemental metadata to the <see cref="T:System.ComponentModel.TypeDescriptor"></see>.
            All the provider proxy do is return concrete abstract class descendant as the reflection type.
            This provider uses the <see cref="T:C1.Win.C1Editor.Internal.ConcreteControlClassAttribute"></see> to find the concrete class.
            </summary>
            <typeparam name="TControl">A <see cref="T:System.Windows.Forms.Control"/> descendant the abstract control was inherited from.</typeparam>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ConcreteControlClassProvider`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider"></see> class proxy
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ConcreteControlClassProvider`1.EnsureTypes(System.Type)">
            <summary>
            This method locates the abstract and concrete types we should be returning.
            </summary>
            <param name="objectType"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ConcreteControlClassProvider`1.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
            <summary>
             Creates an object that can substitute for another data type.
            </summary>
            <param name="provider">An optional service provider.</param>
            <param name="objectType">The type of object to create. This parameter is never null.</param>
            <param name="argTypes">An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be null or of zero length.</param>
            <param name="args">An optional array of parameter values to pass to the object's constructor.</param>
            <returns>The substitute <see cref="T:System.Object"></see>.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ConcreteControlClassProvider`1.GetReflectionType(System.Type,System.Object)">
            <summary>
             Performs normal reflection against the given object with the given type.
            </summary>
            <param name="objectType">The type of object for which to retrieve the <see cref="T:System.Reflection.IReflect"></see>.</param>
            <param name="instance">An instance of the type. Can be null.</param>
            <returns>A <see cref="T:System.Type"></see>.</returns>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.Office2007Renderer">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.DragTabControl">
            <summary>
            Tab control that looks like the tabs in Visual Studio, plus:
            allows dragging tabs to new positions, 
            includes buttons to close the current page or select a page from a list
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.TabPages">
            <summary>
            Gets the collection of <see cref="T:C1.Win.C1Editor.Internal.DragTabPage"/> objects in the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.RaiseSelectedTabChanged">
            <summary>
            Gets or sets whether the <see cref="E:C1.Win.C1Editor.Internal.DragTabControl.SelectedTabChanged"/> event should be raised.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.SelectedTab">
            <summary>
            Gets or sets the currently selected <see cref="T:C1.Win.C1Editor.Internal.DragTabPage"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected <see cref="T:C1.Win.C1Editor.Internal.DragTabPage"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.TabRectangle">
            <summary>
            Gets the rectangle that contains the tabs (above the client area)>
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.ShowCloseButton">
            <summary>
            Gets or sets whether the "close tab" button should be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.ShowTabCloseButton">
            <summary>
            Gets or sets whether the "close tab" button should be displayed on the selected tab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.TruncateTabs">
            <summary>
            Gets or sets whether the tabs should be truncated to make each visible on the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.ShowToolTip">
            <summary>
            Gets or sets whether the tool tip should be displayed for the tabs.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.TabCloseButton">
            <summary>
            Gets the reference to the "close tab" button on the selected tab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.ShowTabSelectionButton">
            <summary>
            Gets or sets whether the "tab selection" button should be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.ShowImagesOnTabs">
            <summary>
            Gets or sets whether the images set in the <see cref="T:C1.Win.C1Editor.Internal.DragTabPage"/> objects should be displayed in the tabs.
            </summary>
            <remarks>
            The images are always displayed in the page selection menu.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.AllowDraggingPages">
            <summary>
            Gets or sets a value that determines whether users should be allowed to drag tab pages and change their order within the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.TabPosition">
            <summary>
            Gets or sets the area of the control where the tabs should be displayed
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.Padding">
            <summary>
            Hide the <see cref="P:C1.Win.C1Editor.Internal.DragTabControl.Padding"/> property and make it non-persistable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.DragTabControl.BeginUpdate">
            <summary>
            Stop redrawing until the control has been fully updated.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.DragTabControl.EndUpdate">
            <summary>
            Resume redrawing after the control has been fully updated.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.DragTabControl.HitTest(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:C1.Win.C1Editor.Internal.DragTabPage"/> at a given point on the screen.
            </summary>
            <param name="x">Horizontal coordinate of the point to test (in client coordinates).</param>
            <param name="y">Vertical coordinate of the point to test (in client coordinates).</param>
            <returns>The tab at the given point, or null if there's no tab at the specified point.</returns>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabControl.Renderer">
            <summary>
            Gets the renderer used to paint this control.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.DragTabPageCollection">
            <summary>
            Collection of pages in a <see cref="T:C1.Win.C1Editor.Internal.DragTabControl"/>.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.DragTabPage">
            <summary>
            For internal use only.
            Page in a DragTabControl
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabPage.Text">
            <summary>
            Gets or sets the text in the tab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabPage.Image">
            <summary>
            Gets or sets the Image in the tab.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabPage.TabBounds">
            <summary>
            Gets or sets the tab bounds.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabPage.GraphicsPath">
            <summary>
            Gets a <see cref="P:C1.Win.C1Editor.Internal.DragTabPage.GraphicsPath"/> that determines the non-rectangular shape of the tab.
            </summary>
            <remarks>
            The path is calculated automatically when the <see cref="P:C1.Win.C1Editor.Internal.DragTabPage.TabBounds"/> property is set.</remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.DragTabPage.OnPaintTab(System.Drawing.Graphics)">
            <summary>
            Paints the tab.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object where the tab will be painted.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabPage.TabIsInVisibleArea">
            <summary>
            Gets a value that determines if the tab is in the visible area of the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabPage.IsTruncated">
            <summary>
            Gets a value that determines if the tab is truncated.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabPage.PageVisible">
            <summary>
            Gets or sets a value that determines whether the tab page is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabPage.TabVisible">
            <summary>
            Gets or sets a value that determines whether the tab is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.DragTabPage.AllowTransparentHeader">
            <summary>
            Gets or sets a value indicating whether Transparent color can be used in the page header as BackColor
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.DragTabControlDesigner">
            <summary>
            Designer to allow selecting pages at design time.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.FindOptions.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.FindOptions.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.FindOptions.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HighlightButton">
            <summary>
            Button that displays an image and highlights when the mouse is over it.
            Used in <see cref="T:C1.Win.C1Editor.Internal.DragTabControl"/> for closing and listing tabs,
            And in panel captions for closing panels.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HighlightButton.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.Internal.HighlightButton"/> class.
            </summary>
            <param name="image"><see cref="T:System.Drawing.Image"/> to display in the button.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HighlightButton.Renderer">
            <summary>
            Gets or sets the renderer used to paint this control's elements.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.InheritedStylePropertyStateBox.ImageClick">
            <summary>
            Event raised when user clicked on state box
            in the only case when style property value is specified.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.InheritedStylePropertyStateBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.InheritedStylePropertyStateBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.InheritedStylePropertyStateBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.NumericUnitControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.NumericUnitControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.NumericUnitControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Number.#ctor(System.Double)">
            <summary>
            Create number with value, unit will be default - px.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ReplaceOptions.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ReplaceOptions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ReplaceOptions.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.PreviewType">
            <summary>
            Type of style preview.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.RuleStylePreviewControl.Renderer">
            <summary>
            Gets the renderer used to paint this control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.RuleStylePreviewControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws border around control.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains event data.</param>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.RuleStylePreviewControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.RuleStylePreviewControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.RuleStylePreviewControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.RuleStylePreviewGenerator.UpdateHtmlElement(System.Windows.Forms.HtmlElement,System.Collections.Hashtable,C1.Win.C1Editor.Internal.PreviewType)">
            <summary>
            Update HTML element style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.RuleStylePreviewGenerator.Navigate(System.String,System.Windows.Forms.WebBrowser)">
            <summary>
            Navigate Web Browser to defined URL.
            </summary>
            <param name="url">URL.</param>
            <param name="webBrowser">Web browser.</param>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.StateBoxStylePropertyEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.StateBoxStylePropertyEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.StateBoxStylePropertyEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.StyleEditor">
            <summary>
            Edits style string and can run style editor
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.StyleEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.StyleEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.StyleEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.StylePropertyEditorControlBase._nonNumberEntered">
            <summary>
            Boolean flag used to determine when a character other than a number is entered.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.StylePropertyEditorControlBase.CanBeNumeric">
            <summary>
            Indicates whether the control supports numeric values.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TextBoxStylePropertyControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TextBoxStylePropertyControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TextBoxStylePropertyControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.EditingGlyphSupport">
            <summary>
            Support editing glyphs technology - show custom glyphs for specified tags.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditingGlyphSupport.Parse">
            <summary>
            Parse configuration string and load it info in dictionary.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.EditingGlyphSupport.Info">
            <summary>
            Configuration string with supported tags info.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditingGlyphSupport.Refresh">
            <summary>
            Refresh html-document glyphs table.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.EditorModeSupport.OnBeforeModeChanged">
            <summary>
            Occur before editor mode change.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.EditorModeSupport.OnBeforeSave">
            <summary>
            Occurs before the document saving.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.Internal.EditorModeSupport.OnSave">
            <summary>
            Occurs when the document saved.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorModeSupport.Save``1(``0,System.Boolean,System.Text.Encoding@,C1.Win.C1Editor.Internal.DocumentFormat)">
            <summary>
             Saves document to file
            </summary>
            <param name="obj">Name of file to save</param>
            <param name="convertToUTF8"></param>
            <param name="encoding"></param>
            <param name='format'>Document format.</param>
            <returns>true if file is saved</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorModeSupport.GetSourceHtml">
            <summary>
            Return source HTML-string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorModeSupport.FindPointerInfo(System.Int64,System.Xml.XmlNode@,System.Int64@)">
            <summary>
            Transform input source position to params for XmlDocument MarkupPointer.
            </summary>
            <param name="pos">Input position in source text.</param>
            <param name="node">Output node.</param>
            <param name="offset">Output offset.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorModeSupport.CorrectNode(System.Xml.XmlNode)">
            <summary>
            Correct node, if it place in HEAD or object child tag tag.
            </summary>
            <param name="node">Input node.</param>
            <returns>HTML/OBJECT tag, if input node placement inside HEAD/PARAM, or input node.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorModeSupport.GetTextChild(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Find first or last child text node.
            </summary>
            <param name="node">Parent node.</param>
            <param name="first">If true, search first child text node, else last child text node.</param>
            <returns>Specified (first or last) child text node or null.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorXmlDocument.Load(System.String,System.Boolean)">
            <summary>
            Loads document from string
            </summary>
            <param name="xml">XML string</param>
            <param name="convertToUTF8">if true, adds META-tag with UTF-8 charset</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorXmlDocument.Load(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads document from string
            </summary>
            <param name="xml">XML string</param>
            <param name="autoFix">if true, converts input xml string to well-formed, validated xml string</param>
            <param name="convertToUTF8">if true, adds META-tag with UTF-8 charset</param>
            <returns>true, if XML successfully loaded</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorXmlDocument.GetValue(System.Boolean,System.Boolean)">
            <summary>
            Gets XML string value
            </summary>
            <param name="removeTempIDs">if true, removes temp IDs</param>
            <param name="convertCustomTags"></param>
            <returns>returns XML string</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorXmlDocument.Save``1(``0,System.Boolean)">
            <summary>
            Saves XML document to file
            </summary>
            <param name="obj">Name of file</param>
            <param name="convertToUTF8">if true, saves in UTF format, otherwise uses XHTML charset</param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.EditorXmlDocument.Document">
            <summary>
            XML document
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorXmlDocument.Lock">
            <summary>
            Locks XML change event raising
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorXmlDocument.Unlock">
            <summary>
            Unlocks XML change event raising
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorXmlDocument.SaveVersion(System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves version of head tag in hashtable
            </summary>
            <param name="name">key for hashtable</param>
            <param name="forRedo"></param>
            <param name="useNewID"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorXmlDocument.RestoreVersion(System.String)">
            <summary>
            Restores head tag from hashtable
            </summary>
            <param name="name">key for hashtable</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.EditorXmlDocument.CleanUnusedVersions">
            <summary>
            Cleans hashtable with versions from unneeded versions
            UNDO/REDO stacks store only needed names of document versions
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.BaseEditorForm">
            <summary>
            This type is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.BaseEditorForm._settings">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.BaseEditorForm._tooltip">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.BaseEditorForm._item">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseEditorForm.#ctor">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseEditorForm.ValidateNumber(System.Object,System.EventArgs)">
            <summary>
            Sets a value of the sender to the <see cref="p:NumericUpDown.Text"/> property.
            </summary>
            <param name="sender">An event sender.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseEditorForm.LoadSizeFormat(System.Windows.Forms.ComboBox)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseEditorForm.LoadAlignmentHorizontalFormat(System.Windows.Forms.ComboBox)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseEditorForm.LoadAlignmentVerticalFormat(System.Windows.Forms.ComboBox)">
            <summary>
            This member is for internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.BaseEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BaseEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.BookmarkEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BookmarkEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.BookmarkEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.CellEditorForm">
            <summary>
            Form for editing XHTML table cell item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.CellEditorForm.AlignmentGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Alignment group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.CellEditorForm.SpanGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Span group box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.CellEditorForm.CellEditorFormSettings">
            <summary>
            Class that implement the <see cref="T:C1.Win.C1Editor.Internal.CellEditorForm"/> settings feature.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CellEditorForm.CellEditorFormSettings.#ctor(C1.Win.C1Editor.Internal.CellEditorForm)">
            <summary>
            Initializes an instance of the <see cref="T:C1.Win.C1Editor.Internal.CellEditorForm.CellEditorFormSettings"/> class. 
            </summary>
            <param name="form">The <see cref="T:C1.Win.C1Editor.Internal.CellEditorForm"/> whose parametres will be loading or saving.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.CellEditorForm.CellEditorFormSettings.AlignmentGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Alignment group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.CellEditorForm.CellEditorFormSettings.SpanGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Span group box.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CellEditorForm.CellEditorFormSettings.Load">
            <summary>
            Applies the stored properties to the <see cref="T:C1.Win.C1Editor.Internal.CellEditorForm"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CellEditorForm.CellEditorFormSettings.Save">
            <summary>
            Saving properties of the the <see cref="T:C1.Win.C1Editor.Internal.CellEditorForm"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.CellEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CellEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CellEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ColumnEditorForm.AlignmentGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Alignment group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ColumnEditorForm.SpanGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Span group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ColumnEditorForm.SizeGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Size group box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.ColumnEditorForm.ColumnEditorFormSettings">
            <summary>
            Class that implement the <see cref="T:C1.Win.C1Editor.Internal.ColumnEditorForm"/> settings feature.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ColumnEditorForm.ColumnEditorFormSettings.#ctor(C1.Win.C1Editor.Internal.ColumnEditorForm)">
            <summary>
            Initializes an instance of the <see cref="T:C1.Win.C1Editor.Internal.ColumnEditorForm.ColumnEditorFormSettings"/> class. 
            </summary>
            <param name="form">The <see cref="T:C1.Win.C1Editor.Internal.ColumnEditorForm"/> whose parametres will be loading or saving.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ColumnEditorForm.ColumnEditorFormSettings.AlignmentGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Alignment group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ColumnEditorForm.ColumnEditorFormSettings.SpanGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Span group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ColumnEditorForm.ColumnEditorFormSettings.SizeGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Size group box.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ColumnEditorForm.ColumnEditorFormSettings.Load">
            <summary>
            Applies the stored properties to the <see cref="T:C1.Win.C1Editor.Internal.ColumnEditorForm"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ColumnEditorForm.ColumnEditorFormSettings.Save">
            <summary>
            Saving properties of the the <see cref="T:C1.Win.C1Editor.Internal.ColumnEditorForm"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ColumnEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ColumnEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ColumnEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.FindReplaceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.FindReplaceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.FindReplaceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ObjectEditorForm.OptionsGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Options group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ObjectEditorForm.SizeGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Size group box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.ObjectEditorForm.ObjectEditorFormSettings">
            <summary>
            Class that implement the <see cref="T:C1.Win.C1Editor.Internal.ObjectEditorForm"/> settings feature.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ObjectEditorForm.ObjectEditorFormSettings.#ctor(C1.Win.C1Editor.Internal.ObjectEditorForm)">
            <summary>
            Initializes an instance of the <see cref="T:C1.Win.C1Editor.Internal.ObjectEditorForm.ObjectEditorFormSettings"/> class. 
            </summary>
            <param name="form">The <see cref="T:C1.Win.C1Editor.Internal.ObjectEditorForm"/> whose parametres will be loading or saving.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ObjectEditorForm.ObjectEditorFormSettings.OptionsGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Options group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ObjectEditorForm.ObjectEditorFormSettings.SizeGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Size group box.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ObjectEditorForm.ObjectEditorFormSettings.Load">
            <summary>
            Applies the stored properties to the <see cref="T:C1.Win.C1Editor.Internal.ObjectEditorForm"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ObjectEditorForm.ObjectEditorFormSettings.Save">
            <summary>
            Saving properties of the the <see cref="T:C1.Win.C1Editor.Internal.ObjectEditorForm"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ObjectEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ObjectEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ObjectEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.FormSettingsBase">
            <summary>
            Base class that implement the <see cref="T:System.Windows.Forms.Form"/> settings feature.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.FormSettingsBase.#ctor(System.Windows.Forms.Form)">
            <summary>
            Initializes an instance of the <see cref="T:C1.Win.C1Editor.Internal.FormSettingsBase"/> class. 
            </summary>
            <param name="form">The <see cref="T:System.Windows.Forms.Form"/> whose parametres will be loading or saving.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.FormSettingsBase.FormLocation">
            <summary>
            Gets or sets the location of the form.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.FormSettingsBase.FormSize">
            <summary>
            Gets or sets the size of the form.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.FormSettingsBase.FormMaximized">
            <summary>
            Gets or sets whether is necessary to maximize form.
            </summary>        
        </member>
        <member name="P:C1.Win.C1Editor.Internal.FormSettingsBase.HelpPanelWidth">
            <summary>
            Gets or sets Dynamic help panel width.
            </summary>        
        </member>
        <member name="M:C1.Win.C1Editor.Internal.FormSettingsBase.Load">
            <summary>
            Applies the stored properties to the form.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.FormSettingsBase.Save">
            <summary>
            Stores the current form properties. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HyperlinkEditorForm.BasicGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Basic group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HyperlinkEditorForm.AdvancedGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Advanced group box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HyperlinkEditorForm.HyperlinkEditorFormSettings">
            <summary>
            Class that implement the <see cref="T:C1.Win.C1Editor.Internal.HyperlinkEditorForm"/> settings feature.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HyperlinkEditorForm.HyperlinkEditorFormSettings.#ctor(C1.Win.C1Editor.Internal.HyperlinkEditorForm)">
            <summary>
            Initializes an instance of the <see cref="T:C1.Win.C1Editor.Internal.HyperlinkEditorForm.HyperlinkEditorFormSettings"/> class. 
            </summary>
            <param name="form">The <see cref="T:C1.Win.C1Editor.Internal.HyperlinkEditorForm"/> whose parametres will be loading or saving.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HyperlinkEditorForm.HyperlinkEditorFormSettings.BasicGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Basic group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HyperlinkEditorForm.HyperlinkEditorFormSettings.AdvancedGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Advanced group box.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HyperlinkEditorForm.HyperlinkEditorFormSettings.Load">
            <summary>
            Applies the stored properties to the <see cref="T:C1.Win.C1Editor.Internal.HyperlinkEditorForm"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HyperlinkEditorForm.HyperlinkEditorFormSettings.Save">
            <summary>
            Saving properties of the the <see cref="T:C1.Win.C1Editor.Internal.HyperlinkEditorForm"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.HyperlinkEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HyperlinkEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HyperlinkEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.ImageEditorForm">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ImageEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ImageEditorForm.SizeGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Size group box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.ImageEditorForm.ImageEditorFormSettings">
            <summary>
            Class that implement the <see cref="T:C1.Win.C1Editor.Internal.ImageEditorForm"/> settings feature.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ImageEditorForm.ImageEditorFormSettings.#ctor(C1.Win.C1Editor.Internal.ImageEditorForm)">
            <summary>
            Initializes an instance of the <see cref="T:C1.Win.C1Editor.Internal.ImageEditorForm.ImageEditorFormSettings"/> class. 
            </summary>
            <param name="form">The <see cref="T:C1.Win.C1Editor.Internal.ColumnEditorForm"/> whose parametres will be loading or saving.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ImageEditorForm.ImageEditorFormSettings.BorderGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Border group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.ImageEditorForm.ImageEditorFormSettings.SizeGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Size group box.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ImageEditorForm.ImageEditorFormSettings.Load">
            <summary>
            Applies the stored properties to the <see cref="T:C1.Win.C1Editor.Internal.ImageEditorForm"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ImageEditorForm.ImageEditorFormSettings.Save">
            <summary>
            Saving properties of the the <see cref="T:C1.Win.C1Editor.Internal.ImageEditorForm"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ImageEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ImageEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ProgressForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ProgressForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.ProgressForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.RowEditorForm">
            <summary>
            Form for editing XHTML table row item.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.RowEditorForm.AlignmentGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Alignment group box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.RowEditorForm.RowEditorFormSettings">
            <summary>
            Class that implement the <see cref="T:C1.Win.C1Editor.Internal.RowEditorForm"/> settings feature.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.RowEditorForm.RowEditorFormSettings.#ctor(C1.Win.C1Editor.Internal.RowEditorForm)">
            <summary>
            Initializes an instance of the <see cref="T:C1.Win.C1Editor.Internal.RowEditorForm.RowEditorFormSettings"/> class. 
            </summary>
            <param name="form">The <see cref="T:C1.Win.C1Editor.Internal.RowEditorForm"/> whose parametres will be loading or saving.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.RowEditorForm.RowEditorFormSettings.AlignmentGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Alignment group box.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.RowEditorForm.RowEditorFormSettings.Load">
            <summary>
            Applies the stored properties to the <see cref="T:C1.Win.C1Editor.Internal.RowEditorForm"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.RowEditorForm.RowEditorFormSettings.Save">
            <summary>
            Saving properties of the the <see cref="T:C1.Win.C1Editor.Internal.RowEditorForm"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.RowEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.RowEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.RowEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.StyleEditorForm.Mode">
            <summary>
            Edit Style Mode is a mode for editing style string, other mode is for Formatting feature
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.StyleEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.TableEditorForm">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.TableEditorForm.AlignmentGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Alignment group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.TableEditorForm.BorderGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Border group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.TableEditorForm.SizeGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Size group box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.TableEditorForm.TableEditorFormSettings">
            <summary>
            Class that implement the <see cref="T:C1.Win.C1Editor.Internal.TableEditorForm"/> settings feature.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableEditorForm.TableEditorFormSettings.#ctor(C1.Win.C1Editor.Internal.TableEditorForm)">
            <summary>
            Initializes an instance of the <see cref="T:C1.Win.C1Editor.Internal.TableEditorForm.TableEditorFormSettings"/> class. 
            </summary>
            <param name="form">The <see cref="T:C1.Win.C1Editor.Internal.TableEditorForm"/> whose parametres will be loading or saving.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.TableEditorForm.TableEditorFormSettings.AlignmentGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Alignment group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.TableEditorForm.TableEditorFormSettings.BorderGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Border group box.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.TableEditorForm.TableEditorFormSettings.SizeGroupCollapsed">
            <summary>
            Gets or sets the current collapse state of the Size group box.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableEditorForm.TableEditorFormSettings.Load">
            <summary>
            Applies the stored properties to the <see cref="T:C1.Win.C1Editor.Internal.TableEditorForm"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableEditorForm.TableEditorFormSettings.Save">
            <summary>
            Saving properties of the the <see cref="T:C1.Win.C1Editor.Internal.TableEditorForm"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TableEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.CaretInfo">
            <summary>
            This class saves/restores caret info
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTMLCurrentStyle.ParentStyle">
            <summary>
            Return style of the parent element.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.SyncException">
            <summary>
            Special exception that throws if synchronization by markers raises assert
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTMLSynchronizer">
            <summary>
            This class performs synchronization HTML->XML
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.Synchronize(C1.Win.C1Editor.Internal.C1WebBrowserBase,System.Xml.XmlDocument)">
            <summary>
            Synchronizes body of whole document
            </summary>
            <param name="browser">browser</param>
            <param name="xmlDocument">XML document</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.Synchronize(C1.Win.C1Editor.Internal.C1WebBrowserBase,System.Xml.XmlDocument,C1.Win.C1Editor.Internal.NotifyChangeEventArgs,System.Boolean@)">
            <summary>
            Synchronizes document using begin and end markers
            </summary>
            <param name="browser">browser</param>
            <param name="xmlDocument">XML document</param>
            <param name="args">Contains info about changed content in HTML document</param>
            <param name="isCorrected"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.GetRangeForCorrecting(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2,C1.Win.C1Editor.Internal.NotifyChangeEventArgs,System.Boolean@,System.String@)">
            <summary>
            Gets range for 2 block neighbour elements that first and last markers belong to
            This is needed for further check of correct HTML
            </summary>
            <param name="htmlDocument">HTML document</param>
            <param name="args">object that contains first and last markers</param>
            <param name="isBody">if true, found HTMLElement is the "body" tag</param>
            <param name="origText"></param>
            <returns>range from begin of first element to the end of last element</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.GetDirtyNodes(C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement,C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement)">
            <summary>
            Gets list of dirty XML nodes.
            </summary>
            <param name="syncElement1">element1</param>
            <param name="syncElement2">element2</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.RemoveOldContent(System.Collections.Generic.List{C1.Win.C1Editor.Internal.HTMLSynchronizer.DirtyNode},System.Boolean)">
            <summary>
            Removes content in XML document
            </summary>
            <param name="nodes">Nodes to remove</param>
            <param name="removeComments">if true, remove comments</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.GetNextNode(System.Xml.XmlNode,System.Xml.XmlNode,System.Boolean,System.Boolean)">
            <summary>
            Gets next node to remove from XML document
            </summary>
            <param name="nodeFrom">begin node</param>
            <param name="nodeTo">right bound node</param>
            <param name="removeFromBegin">if true returns first child of <paramref name="nodeFrom"/></param>
            <param name="removeToEnd">if true, removes all nodes until end of element</param>
            <returns>node if found or null otherwise</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.IsNodeLeftToNode(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Returns false if node1 is equal to node2 or is a right sibling of node2.
            </summary>
            <param name="node1">node1</param>
            <param name="node2">node2</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.GetSyncElement(C1.Win.C1Editor.Internal.C1WebBrowserBase,System.Xml.XmlDocument,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,System.Boolean)">
            <summary>
            Analyses <paramref name="pointer"/>, finds proper HTML element for this pointer and creates new <see cref="T:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement"/>
            </summary>
            <param name="browser">browser</param>
            <param name="xmlDocument">XML document</param>
            <param name="pointer">HTML markup pointer</param>
            <param name="isLeftMarker">if true, <paramref name="pointer"/> is left marker, otherwise - it is right marker</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.GetHTMLBlockElement(C1.Win.C1Editor.C1Editor,C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            Returns HTML Block element
            </summary>
            <param name="editor">Editor</param>
            <param name="element">Element</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.SetHTMLElementToXmlNode(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.Xml.XmlNode,System.String)">
            <summary>
            Converts given string from HTML compatible mode to XML
            </summary>
            <param name="element">HTML element</param>
            <param name="node">Resulting XML Node</param>
            <param name="url">Relative URL</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.Assert(System.Boolean)">
            <summary>
            If <paramref name="value"/> raises Debug.Assert and throws custom exception
            </summary>
            <param name="value">check flag</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.ShowMarkersInfo(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2,C1.Win.C1Editor.Internal.NotifyChangeEventArgs)">
            <summary>
            Used in debugging purposes
            </summary>
            <param name="htmlDocument">Document.</param>
            <param name="args"></param>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement">
            <summary>
            Contains info about HTML marker and link to XMLDocument.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.Normalize(C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement)">
            <summary>
            We need to normalize begin and end element, they must have one parent
            to simplify synchronization process as creating chain of sibling nodes
            Also this method links HTML bound elements with XML elements
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.HTMLElement">
            <summary>
            Bound HTML element
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.HTMLElementInSync">
            <summary>
            Element that is synchronized with <see cref="P:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.XmlNodeInSync"/>
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.XmlNodeInSync">
            <summary>
            Element that is synchronized with <see cref="P:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.HTMLElementInSync"/>
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.IsTextChanged">
            <summary>
            If true, element internal content is changed only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.IsSingleAction">
            <summary>
            If true, only single action is required for synchronization
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.CreateMethod">
            <summary>
            Method of synchronization for XML document
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.CompareByElements(C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement)">
            <summary>
            Compares with <see cref="T:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement"/> by <see cref="T:System.Windows.Forms.HtmlElement"/>
            </summary>
            <param name="syncElement"><see cref="T:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement"/> to compare</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.CompareBySyncElements(C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement)">
            <summary>
            Compares with <see cref="T:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement"/> by <see cref="P:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.HTMLElementInSync"/>
            </summary>
            <param name="syncElement"><see cref="T:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement"/> to compare</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.Synchronize(C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement,System.Boolean)">
            <summary>
            Creates nodes in XML document by current marker
            </summary>
            <param name="boundElement">Right bound marker</param>
            <param name="canChangeHTMLDocument"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.CopyFrom(C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement)">
            <summary>
            Copies data from another <see cref="T:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement"/>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.CreateNewNode(System.Boolean)">
            <summary>
            Creates new XML element using <see cref="F:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement._createMethod"/>
            </summary>
            <returns>created element</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.ReplaceNodeContent(System.Boolean)">
            <summary>
            Creates new XML element using <see cref="F:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement._createMethod"/>
            </summary>
            <returns>created element</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.FindSyncAnchor">
            <summary>
            Finds synchronized HTML/XML pair and method for creating
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.MoveToNextNode(System.Xml.XmlNode)">
            <summary>
            Finds next HTML element after current element. If text nodes are presented between current and next elements
            they are inserted to XmlDocument
            </summary>
            <param name="currentNode">current XML element</param>
            <returns>true if next element is found</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement.CheckBoundPosition(C1.Win.C1Editor.Internal.HTMLSynchronizer.SyncElement)">
            <summary>
            Checks if current position if not exceeds bound element
            </summary>
            <param name="boundElement">bound element</param>
            <returns>if true, bound is not reached</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.MouseTableSelection.Clear">
            <summary>
            Remove custom table selection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.MouseTableSelection.SelectRectRange(C1.Win.C1Editor.Internal.HTML.IHTMLTableCell,C1.Win.C1Editor.Internal.HTML.IHTMLTableCell)">
            <summary>
            Select a cell rectangle in a table.
            </summary>
            <param name="cell1">Start cell.</param>
            <param name="cell2">End cell.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.MouseTableSelection.SelectColumns(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Select continuous range of columns in a table.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="curX"></param>
            <param name="keepCurrentSelection"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.MouseTableSelection.SelectRows(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Select continuous range of rows in a table.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="curY"></param>
            <param name="keepCurrentSelection"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CustomSelectionSupport.Clear">
            <summary>
            Removes our custom selection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CustomTableSelectionVisualizer.AddChildTagsId(System.String,C1.Win.C1Editor.Internal.HTML.IHTMLElement2)">
            <summary>
            Add child tags with specified tagName id to selected id list.
            </summary>
            <param name="tagName">Child tag name for processing.</param>
            <param name="htmlElement2">Parent cell.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.CustomTableSelectionVisualizer.AddCellWithChildTagsIds(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            Add cell id and all it child table tags id to selected id list.
            </summary>
            <param name="htmlElement"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XHTMLTableHelper.ApplyStyle(System.String,System.String)">
            <summary>
            Applies class-attribute style to specified table item.
            </summary>
            <param name="tag">Specified table item type (node name).</param>
            <param name="styleClassName">Style name.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XHTMLTableHelper.CanApply(System.String,System.String)">
            <summary>
            Checks, is specified class-attribute style can be applied to table item.
            </summary>
            <param name="tag">Specified table item type(node name).</param>
            <param name="styleClassName">Style name.</param>
            <returns>True, if style can be applied; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XHTMLTableHelper.ClearFormat">
            <summary>
            Removes class-attribute formatting from selected cells, full-selected rows and columns,
            oneself table, if it whole selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.XHTMLTableHelper.SelectionInsideTable">
            <summary>
            Returns true, if selection inside table; otherwise, False.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.XHTMLTableHelper.OnlyCellsSelected">
            <summary>
            Returns true, if selection inside table and not inside CAPTION-tag.
            I.e. only table cells or single cell content inside selection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Table.ApplyStyle(System.String)">
            <summary>
            Apply class-attribute style to table.
            </summary>
            <param name="styleClassName">Style name.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Table.CanApply(System.String)">
            <summary>
            Check, is specified class-attribute style can be applied to table.
            </summary>
            <param name="styleClassName">Style name.</param>
            <returns>True, if style can be applied; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.Table.ClearFormat">
            <summary>
            Remove class-attribute formatting.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.DummyTableCell">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableItemBase.ApplyStyle(System.String)">
            <summary>
            Apply class-attribute style to table item.
            </summary>
            <param name="styleClassName">Style name.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableItemBase.CanApply(System.String)">
            <summary>
            Check, is specified class-attribute style can be applied to table item.
            </summary>
            <param name="styleClassName">Style name.</param>
            <returns>True, if style can be applied; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.TableItemBase.ClearFormat">
            <summary>
            Remove class-attribute formatting.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.MarkerInfo.OutputKind.StaticText">
            <summary>
            Output fixed text without dependence from tag content.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.MarkerInfo.OutputKind.TagName">
            <summary>
            Output tag name.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.MarkerInfo.MarkerPlacement.Both">
            <summary>
            Placement two marker - before and tag.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.MarkerInfo.MarkerPlacement.Before">
            <summary>
            Placement marker before tag.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.MarkerInfo.MarkerPlacement.After">
            <summary>
            Placement marker after tag.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.RtfConverter">
            <summary>
            Performs conversion from RTF to XHTML and back
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.RtfConverter.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.RtfConverter.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.RtfConverter.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.History">
            <summary>
            This class provides undo and redo operations.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.History.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged resources used by the <see cref="T:C1.Win.C1Editor.Internal.History"/> class.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources; false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.History.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:C1.Win.C1Editor.Internal.History"/> class.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.History.Undo(System.Int32)">
            <summary>
            Undo a given number of operations.
            </summary>
            <param name="count">Number of operations to undo.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.History.Redo(System.Int32)">
            <summary>
            Redo a given number of operations.
            </summary>
            <param name="count">Number of operations to redo.</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.History.UndoList">
            <summary>
            Returns the list of available undo operations.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.History.RedoList">
            <summary>
            Returns the list of available redo operations.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.History.Undo">
            <summary>
            Undo the last operation.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.History.Redo">
            <summary>
            Redo the last operation
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.History.CanUndo">
            <summary>
            Returns true if undo command can be executed
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.History.CanRedo">
            <summary>
            Returns true if redo command can be executed
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceHTMLBuilder.WriteHTMLString(System.String)">
            <summary>
            Write string to XmlTextWriter and synchronously increase position in output HTML
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceHTMLBuilder.WriteHTMLString(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Write string to XmlTextWriter and synchronously increase position in output HTML
            </summary>
            <param name="value">text to output</param>
            <param name="keepBreaks">if true, output line breaks</param>
            <param name="level">level to indent string if keepBreaks is true</param>
            <param name="indentText">if true, indent lines, otherwise keep original indent</param>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.SourceHTMLHighlighter">
            <summary>
            Provide HTML text highlighting.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.HTMLContent">
            <summary>
            Base class for structuring HTML text.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.HTMLText">
            <summary>
            Represent text.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.HTMLAttribute">
            <summary>
            Represent html attribute as name and value pair.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.HTMLTag">
            <summary>
            Represent html tag as name and attributes enclosed brackets.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.HTMLComment">
            <summary>
            Represent html commentary.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.HTMLFragment">
            <summary>
            Represent HTML document fragment as tags list.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.SetTotalChanges(C1.Win.C1Editor.Internal.NotifyChangeEventArgs)">
            <summary>
            Check total changed range bounds and enlarge it if necessary.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.ExtendTotalChangesByElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            Enlarge if necessary changed range by specified HTML element (so range contain element).
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.HighlightValue(C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange,C1.Win.C1Editor.Internal.SourceHTMLHighlighter.HTMLContent,System.String)">
            <summary>
            Highlight specified range of HTML if necessary
            </summary>
            <param name="baseRange">Base range, relative that specified highlighting range.</param>
            <param name="value">Specify highlighting range properties - position and length.</param>
            <param name="className">Specify highlighting properties.</param>
            <returns>Return false if specified part always highlighted, otherwise true.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.CorrectRange(C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange)">
            <summary>
            Correct range bounds if necessary (bounds can placement inside adjacent elements).
            </summary>
            <param name="range">Corrected range.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.RemoveElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            Remove element with keep it content.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.RemoveChild(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.String)">
            <summary>
            Remove child element with specified type for parent element
            </summary>
            <param name="parent">Parent element.</param>
            <param name="typeName">Deleted child elements type.</param>
            <returns>Returns True, if at least one element was removed; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.IsElementClass(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.String)">
            <summary>
            Compare class attribute value with specified value.
            </summary>
            <param name="element"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.SourceHTMLHighlighter.IsElementType(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.String)">
            <summary>
            Compare element type (tag name) with specified value.
            </summary>
            <param name="element"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.SynchronizationHelper">
            <summary>
            required to perform code running in separate thread
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.Synchronizer">
            <summary>
            This class performs synchronization between browser and XMLDocument
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.XhtmlList.Pointer.Paragraph">
            <summary>
            Parent paragraph node of the Node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.XhtmlList.Pointer.ListItem">
            <summary>
            Parent list item node of the Node.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.XhtmlList.IsSelectionInsideList">
            <summary>
            Return true, if selection is fully inside list.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.XhtmlList.ListEnabled">
            <summary>
            Return true, if the list commands can be executed for the current selection, otherwise false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.XhtmlList.IncreaseIndentEnabled">
            <summary>
            Return true, if the 'Increase Indent' command can be executed for the current selection, otherwise false.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.XhtmlList.DecreaseIndentEnabled">
            <summary>
            Return true, if the 'Decrease Indent' command can be executed for the current selection, otherwise false.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XhtmlList.Parse(C1.Win.C1Editor.C1TextRange)">
            <summary>
            Parse the selection and build list structure, if the selection
            is fully inside list.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XhtmlList.IsList(System.Xml.XmlNode)">
            <summary>
            Return true, if the node is a list tag.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XhtmlList.IsListItem(System.Xml.XmlNode)">
            <summary>
            Return true, if the node is a list item tag.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XhtmlList.FirstItemLineSelected(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Return true, if first line in the list item is selected, otherwise false.
            First line can be a single text or paragraph.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XhtmlList.LastItemLineSelected(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Return true, if last line in the list item is selected, otherwise false.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.XmlChangedElements.NodeAction">
            <summary>
            Stores elementary change of document
            Can be action for element or attribute
            Has 3 states: Insert, Remove and Change
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.XmlChangedElements.NodeAction.XMLString">
            <summary>
            Returns XML string of creating element and his neighbours
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.XmlChangedElements.ElementsComparer">
            <summary>
            This comparer compares 2 elements by that way:
            1.Removed nodes
            2.Inserted nodes by their order in document
            3.Changed nodes
            4.Attributes (removed, inserted, changed)
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XmlChangedElements.Add(System.Xml.XmlNodeChangedEventArgs)">
            <summary>
            Adds an action
            </summary>
            <param name="e">raw XML action</param>
            <returns>Undo title string for action</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XmlChangedElements.Apply(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2,System.String)">
            <summary>
            Applies change actions to HTML document
            </summary>
            <param name="htmlDocument2">HTML document</param>
            <param name="undoUnitTitle"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XmlChangedElements.RemoveFrom(System.Int32)">
            <summary>
            Removes a tail part of change actions
            </summary>
            <param name="index">Begin index for deleting</param>
        </member>
        <member name="P:C1.Win.C1Editor.Internal.XmlChangedElements.Count">
            <summary>
            Returns count of change actions
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XmlChangedElements.WriteActions(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2,System.String,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
            <summary>
            Writes normalized list of actions to HTMLDocument, set bound pointers for result 
            (by all actions) changes range.
            </summary>
            <param name="htmlDocument2"></param>
            <param name="undoUnitTitle"></param>
            <param name="startPointer">Specify start pointer of HTML-document changes range.</param>
            <param name="endPointer">Specify end pointer of HTML-document changes range.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XmlChangedElements.RemoveUnlinkedActions">
            <summary>
            If insert/change action has element that is not in document tree, we must not use it
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XmlChangedElements.CorrectAtributeActions">
            <summary>
            Some attribute actions cannot be apply to MSHTML as they are
            They must be converted to actions that will have effect in MSHTML
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XmlChangedElements.SetIDsAndFillHashtables(System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            This method sets element ID for action if it's missed and fills <paramref name="elementActions"/> and <paramref name="attributeActions"/>
            </summary>
            <param name="elementActions"></param>
            <param name="attributeActions"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XmlChangedElements.RemoveDuplicates(System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            This method removes repeating actions
            </summary>
            <param name="elementActions">hashtable with element actions</param>
            <param name="attributeActions">hashtable with attribute actions</param>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XmlChangedElements.CorrectCreateElementActions">
            <summary>
            This method concatenates insert actions of neighbours
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Internal.XmlChangedElements.DefineInsertMethodForCreatingElements">
            <summary>
            This method defines inserting method for element.
            If no inserting method can be found, parent element is used in change action
            Also this method corrects change actions for table cells and rows by replacing them to change table tag
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.WebBrowserModes">
            <summary>
             Contains available appearance modes for D2HWebBrowser.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.DocumentFormat">
            <summary>
             Defines the input/output format when document loading/saving
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.XHTMLTagIndexes">
            <summary>
            Types of items to create or edit in <see cref="M:C1.Win.C1Editor.C1Editor.NewItem(C1.Win.C1Editor.Internal.XHTMLTagIndexes)"/>, <see cref="M:C1.Win.C1Editor.C1Editor.EditItem(C1.Win.C1Editor.Internal.XHTMLTagIndexes)"/>
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.XHTMLTagIndexes.Table">
            <summary>
            Table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.XHTMLTagIndexes.TableRow">
            <summary>
            A row of a table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.XHTMLTagIndexes.TableCell">
            <summary>
            A cell of a table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.XHTMLTagIndexes.TableColumn">
            <summary>
            A column of a table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.XHTMLTagIndexes.Image">
            <summary>
            Image.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.XHTMLTagIndexes.Object">
            <summary>
            SWF movie object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.XHTMLTagIndexes.Anchor">
            <summary>
            Anchor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.XHTMLTagIndexes.Hyperlink">
            <summary>
            Hyperlink.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.XHTMLTagIndexes.Bookmark">
            <summary>
            Bookmark.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.ApplyStyleAction">
            <summary>
             Specifies the possible values of action of 
            <see cref="M:C1.Win.C1Editor.IApplyStyleBehaviour.StyleApplying(System.Xml.XmlNode,C1.Win.C1Editor.Internal.ApplyStyleAction@)"/> and <see cref="M:C1.Win.C1Editor.IApplyStyleBehaviour.StyleApplied(System.Xml.XmlNode,C1.Win.C1Editor.Internal.ApplyStyleAction)"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ApplyStyleAction.Apply">
            <summary>
            Apply the style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ApplyStyleAction.Cancel">
            <summary>
            Cancel the operation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ApplyStyleAction.Continue">
            <summary>
            Pass current style and continue operation.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ApplyStyleAction.CreateAttribute">
            <summary>
            Create an attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ApplyStyleAction.CreateElementInside">
            <summary>
            Create an element inside current node.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ApplyStyleAction.CreateElementOutside">
            <summary>
            Create an element outside current node.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ApplyStyleAction.RemoveElement">
            <summary>
            Omit specific element but leave its content.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ApplyStyleAction.RemoveAttribute">
            <summary>
            Remove specific attribute.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.ListType">
            <summary>
            Specifies possible list types, that can be applied to a text.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ListType.None">
            <summary>
            The list type is not defined.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ListType.Ordered">
            <summary>
            The list is an ordered list.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.ListType.Unordered">
            <summary>
            The list is an unordered list.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.TableAction">
            <summary>
            Defines action applied to a table in <see cref="M:C1.Win.C1Editor.C1Editor.ProcessTable(C1.Win.C1Editor.Internal.TableAction)"/> method.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TableAction.DeleteTable">
            <summary>
            Deletes selected tables.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TableAction.DeleteRows">
            <summary>
            Deletes selected rows.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TableAction.DeleteColumns">
            <summary>
            Deletes selected columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TableAction.InsertBefore">
            <summary>
            Inserts a column before selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TableAction.InsertAfter">
            <summary>
            Inserts a column after selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TableAction.InsertAbove">
            <summary>
            Inserts a row above selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TableAction.InsertBelow">
            <summary>
            Inserts a row below selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TableAction.Merge">
            <summary>
            Merges selected cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TableAction.Split">
            <summary>
            Splits selected cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.CharCasing">
            <summary>
            Represents change case options to use in C1TextRange.ChangeCase method.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.CharCasing.SentenceCase">
            <summary>
            Capitalizes the first letter of the first word in the selected sentence, or the first word after the end of a sentence.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.CharCasing.LowerCase">
            <summary>
            Changes text to all lowercase letters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.CharCasing.UpperCase">
            <summary>
            Changes selected text to all uppercase letters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.CharCasing.CapitalizeWords">
            <summary>
            Capitalizes the first letter of each word.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.CharCasing.ToggleCase">
            <summary>
            Changes all uppercase letters to lowercase letters and all lowercase letters to uppercase letters in the text.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Internal.TextAlignment">
            <summary>
            Specifies how text in a text range is horizontally aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TextAlignment.Default">
            <summary>
            Text is aligned by default.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TextAlignment.Left">
            <summary>
            Text is aligned on the left.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TextAlignment.Right">
            <summary>
            Text is aligned on the right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TextAlignment.Center">
            <summary>
            Text is aligned in the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Internal.TextAlignment.Justify">
            <summary>
            Text lines are justified to both margins.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.C1Editor">
            <summary>
            Represents the C1Editor control.
            </summary>
            <remarks>
            <para> The control has a <see cref="P:C1.Win.C1Editor.C1Editor.Document"/> property. 
            It is possible to assign an existing document to this property and it will be 
            displayed in the control.
            
            The control and the document are bound. 
            If the document is edited within the control, 
            the underlying XmlDocument changes to match the edited document. 
            If the XmlDocument changes (in code), then the changes appear in the editor.</para>
            </remarks>
            <example>
            This sample shows how to load an XHTML string into the editor and 
            append a stylesheet using functions of XmlDocument.
            <code>
            c1Editor1.LoadXml(xhtml);
            XmlElement style = c1Editor1.Document.CreateElement("style");
            style.InnerXml = "strong {text-decoration:underline}";
            foreach (XmlNode node in c1Editor1.Document.DocumentElement)
            {
                if (node.Name == "head")
                {
                    node.AppendChild(style);
                    break;
                }
            }
            </code>
            </example>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.DocumentChanged">
             <summary>
             Occurs when any change has happened in the document.
             </summary>
             <remarks>
             Handle this event to provide the processing that your application requires when changes occur in the edited document.
             </remarks>
             <example> This example shows how to add an "Add Image" button to the form.
             <code>
             private void Form1_Load(object sender, EventArgs e)
             {
                _btnAddImage = new Button();
                _btnAddImage.Text = "Add Image";
                _btnAddImage.Click += AddPictureDialog;
                this.Controls.Add(_btnAddImage);
            
                _btnAddImage.Location = new Point(10, 10);
            
                c1Editor1.DocumentChanged += UpdateUI;
                c1Editor1.SelectionChanged += UpdateUI;
                c1Editor1.ModeChanged += UpdateUI;
             }
            
             private void AddPictureDialog(object sender, EventArgs e)
             {
                c1Editor1.ShowDialog(DialogType.Image);
             }
            
             private void UpdateUI(object sender, EventArgs e)
             {
                _btnAddImage.Enabled = c1Editor1.CanShowDialog(DialogType.Image);
             }
             </code>
             </example>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.SelectionChanged">
             <summary>
             Occurs when the current selection is changed. 
             </summary>
             <example> This example shows how to add an "Add Image" button to the form.
             <code>
             private void Form1_Load(object sender, EventArgs e)
             {
                _btnAddImage = new Button();
                _btnAddImage.Text = "Add Image";
                _btnAddImage.Click += AddPictureDialog;
                this.Controls.Add(_btnAddImage);
            
                _btnAddImage.Location = new Point(10, 10);
            
                c1Editor1.DocumentChanged += UpdateUI;
                c1Editor1.SelectionChanged += UpdateUI;
                c1Editor1.ModeChanged += UpdateUI;
             }
            
             private void AddPictureDialog(object sender, EventArgs e)
             {
                c1Editor1.ShowDialog(DialogType.Image);
             }
            
             private void UpdateUI(object sender, EventArgs e)
             {
                _btnAddImage.Enabled = c1Editor1.CanShowDialog(DialogType.Image);
             }
             </code>
             </example>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.ModeChanged">
             <summary>
             Occurs when the <see cref="P:C1.Win.C1Editor.C1Editor.Mode"/> of the Editor is changed. 
             </summary>
             <example> This example shows how to add an "Add Image" button to the form.
             <code>
             private void Form1_Load(object sender, EventArgs e)
             {
                _btnAddImage = new Button();
                _btnAddImage.Text = "Add Image";
                _btnAddImage.Click += AddPictureDialog;
                this.Controls.Add(_btnAddImage);
            
                _btnAddImage.Location = new Point(10, 10);
            
                c1Editor1.DocumentChanged += UpdateUI;
                c1Editor1.SelectionChanged += UpdateUI;
                c1Editor1.ModeChanged += UpdateUI;
             }
            
             private void AddPictureDialog(object sender, EventArgs e)
             {
                c1Editor1.ShowDialog(DialogType.Image);
             }
            
             private void UpdateUI(object sender, EventArgs e)
             {
                _btnAddImage.Enabled = c1Editor1.CanShowDialog(DialogType.Image);
             }
             </code>
             </example>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.BeforeModeChange">
            <summary>
            Occurs when the <see cref="P:C1.Win.C1Editor.C1Editor.Mode"/> of the Editor is about to change. 
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.BeforeSave">
            <summary>
            Occurs before the document is saved.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.AfterSave">
            <summary>
            Occurs after the document is saved.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.HtmlEvent">
            <summary>
            Occurs when an HTML event occurs in the browser.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.DocumentChangedInt">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.FindDialogShowing">
            <summary>
            Occurs after user press Ctrl + F and before FindReplace dialog must be shown.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.ReplaceDialogShowing">
            <summary>
            Occurs after user press Ctrl + H and before FindReplace dialog must be shown.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.FindNextExecuting">
            <summary>
            Occurs before next searching with F3 hotkey will be executed. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.C1Editor"/> class. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.AutoScroll">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.AutoScrollOffset">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.AutoScrollMargin">
            <inheritdoc cref="P:System.Windows.Forms.ScrollableControl.AutoScrollMargin"/>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.AutoScrollMinSize">
            <inheritdoc cref="P:System.Windows.Forms.ScrollableControl.AutoScrollMinSize"/>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.AutoSize">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.AutoSizeMode">
            <inheritdoc cref="P:System.Windows.Forms.UserControl.AutoSizeMode"/>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.AutoValidate">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.RightToLeft">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.BackgroundImage">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.BackgroundImageLayout">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.Cursor">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.UseWaitCursor">
            <inheritdoc cref="P:System.Windows.Forms.Control.UseWaitCursor"/>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.BackgroundImageChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageChanged"/>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.BackgroundImageLayoutChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged"/>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.MouseHover">
            <inheritdoc cref="E:System.Windows.Forms.Control.MouseHover"/>
        </member>
        <member name="E:C1.Win.C1Editor.C1Editor.MouseCaptureChanged">
            <inheritdoc cref="E:System.Windows.Forms.Control.MouseCaptureChanged"/>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.BorderStyle">
            <summary>
            Indicates whether the editor should have a border.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.Mode">
            <summary>
            Defines current editor view and behavior.
            </summary>
            <remarks>
            There are 3 modes: Design, Preview, Source.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.WordWrap">
            <summary>
            Indicates whether the editor automatically wraps words to the beginning of the next line when necessary in the Source mode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.Focused">
            <summary>
            Gets a <b>Boolean</b> value indicating  whether the control has input focus.
            </summary>
            <value>
            <b>True</b> if the document has focus; otherwise, <b>False</b>.
            </value>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.AcceptsTab">
            <summary>
            Gets or sets a value indicating whether pressing the TAB key in a control types a TAB character in the editor instead of moving the focus to the next control in the tab order.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.AllowDrop">
            <summary>
            Gets or sets a value indicating whether the editor can accept data that the user drags onto it.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.ContextMenuStrip">
            <summary>
            Overrides the <see cref="P:System.Windows.Forms.Control.ContextMenuStrip"/> property.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.DefaultTitle">
            <summary>
            Gets or sets a string (followed by a number) used for the 'title' attribute of the loaded document if that attribute is not specified.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.ReadOnly">
            <summary>
            Gets or sets a value indicating whether content in the editor is read-only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.ConvertToUTF8">
            <summary>
             Converts to UTF-8 when loading/saving.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.Document">
             <summary>
             Gets or sets the XML document bound to the <see cref="T:C1.Win.C1Editor.C1Editor"/>.
             </summary>
             <remarks>
             The control and the document are bound. 
             If the document is edited within the control, 
             then the underlying XmlDocument changes to match it. 
             If the XmlDocument changes (in code), then the changes appear in the editor.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.BaseUri">
            <summary>
            Gets the base Uri of the current document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.Xml">
            <summary>
            Gets or sets the current XML content of the editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.Text">
            <summary>
            Gets or sets the current text in the editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.IsDirty">
            <summary>
            Gets a Boolean value that indicates whether the document has been modified since it was last saved.
            </summary>
            <remarks>
            If the IsDirty property is True, data in the XML document has been changed since it was last saved. If False, no changes have occurred.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.MaxLength">
            <summary>
            Gets or sets the maximum number of characters the user can type or paste into the editor control.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.WebBrowser">
            <summary>
            Returns the ActiveX WebBrowser object for current <see cref="P:C1.Win.C1Editor.C1Editor.Mode"/>. 
            </summary>
            <remarks>
            <para>This property returns a reference to the IWebBrowser2 interface.
            C1Editor uses Microsoft WebBrowser ActiveX control internally.</para>
            <para>In some advanced cases programmers may need to access that control directly
            to perform tasks that aren't otherwise available from C1Editor public interface.
            Such direct access to the underlying WebBrowser should be used only if there is no other way, and
            the programmer using it is responsible for not interfering with intenal invisible markup and attributes 
            (such as ids, etc) used in the underlying HTML by C1Editor.</para>
            </remarks>remarks>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.EnableComments">
            <summary>
            Indicates whether the editor turns Comments feature on or off.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.AllowAdHocTags">
            <summary>
            Indicates whether the editor turns validation on or off.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.RenderEngine">
            <summary>
            Specifies the IE rendering engine.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.XmlExtensions">
            <summary>
             Contains information about custom elements and attributes that extend the standard XHTML DTD.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.CustomDialogs">
            <summary>
            Allows user-defined dialog boxes such as 
            Find/Replace, Format, Insert table, and others to be used.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1Editor.C1Editor"/> contains several dialogs used to perform
            actions such as search/replace, inserting images, tables, and so on.</para>
            <para>To replace one or more of the built-in dialogs with your own custom ones,
            follow these steps:</para>
            <para>1. Implement the custom dialog making sure it supports the appropriate
            interface (for example <see cref="T:C1.Win.C1Editor.UICustomization.IFindReplaceDialog"/>).</para>
            <para>2. Assign an instance of the custom dialog to the appropriate member of
            the <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/> property.</para>
            </remarks>
            <example>
            The code below replaces the built-in bookmark and find/replace dialogs with
            customized versions of the dialogs.
            <code>
            private void InitCustomDialogs()
            {
              _editor.CustomDialogs.BookmarkDialog = new BookmarkEditorForm();
              _editor.CustomDialogs.FindReplaceDialog = new FindReplaceForm();
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.KeyboardShortcutsEnabled">
            <summary>
             Gets or sets a value indicating whether the editor processes shortcuts for basic editing operations
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.SelectionStart">
            <summary>
            Gets or sets the index of the first selected character in the <see cref="T:C1.Win.C1Editor.C1Editor"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.SelectionLength">
            <summary>
            Gets or sets the number of selected characters in the <see cref="T:C1.Win.C1Editor.C1Editor"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.SelectedText">
            <summary>
            Gets the text currently selected in the <see cref="T:C1.Win.C1Editor.C1Editor"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.Selection">
            <summary>
            Gets the current selection in the <see cref="T:C1.Win.C1Editor.C1Editor"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.CanCut">
             <summary>
             Gets a value indicating whether the cut command is supported on the current selection.
             </summary>
            <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnCopy.Enabled = _owner.CanCopy;
                    _btnCut.Enabled = _owner.CanCut;
                    _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
                    base.OnOpening(e);
               }
               </code>
               </example>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.CanCopy">
             <summary>
             Gets a value indicating whether the copy command is supported on the current selection.
             </summary>
            <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnCopy.Enabled = _owner.CanCopy;
                    _btnCut.Enabled = _owner.CanCut;
                    _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
                    base.OnOpening(e);
               }
               </code>
               </example>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.CanPaste">
             <summary>
             Gets a value indicating whether the paste command is supported on the current selection.
             </summary>
            <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnCopy.Enabled = _owner.CanCopy;
                    _btnCut.Enabled = _owner.CanCut;
                    _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
                    base.OnOpening(e);
               }
               </code>
               </example>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.CanPasteAsText">
             <summary>
             Determines whether you can paste information from the Clipboard in text format.
             </summary>
            <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    // close menu (not automatic)
                    Close();
            
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    // on to base class
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    if (_owner.Mode == EditorMode.Preview)
                    {
                        e.Cancel = true;
                    }
                    else if (_owner.Mode == EditorMode.Source)
                    {
                       _btnCopy.Enabled = _owner.CanCopy;
                       _btnCut.Enabled = _owner.CanCut;
                       _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
            
                    // on to base class
                    base.OnOpening(e);
                    }
               }
               </code>
               </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadDesignCSS(System.String)">
            <summary>
            Loads a design CSS from a given file.
            The base URL is inferred from the file location.
            </summary>
            <param name="fileName">The file from which the design CSS is loaded.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadDesignCSS(System.IO.Stream)">
            <summary>
            Loads a design CSS from a given stream. 
            </summary>
            <param name="stream">The stream from which the design CSS is loaded.</param>
            <remarks>
            Base URL is not specified because this method only handles a simple, self-contained CSS. 
            The stream must be encoded in UTF-8.
            </remarks>
            <example >
            string value = "p {color:red;}";
            Stream stream = new MemoryStream(Encoding.UTF8.GetBytes(value));
            LoadDesignCSS(stream);
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadPreviewCSS(System.String)">
            <summary>
            Loads the preview CSS from a given file.
            <remarks>
            Base URL is inferred from the file location.
            </remarks>
            </summary>
            <param name="fileName">The file from which the preview CSS is loaded.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadPreviewCSS(System.IO.Stream)">
            <summary>
            Loads the preview CSS from a given stream.
            The base URL is not given; it assumes a simple, self-contained CSS. 
            It also assumes the stream is encoded in UTF8.
            </summary>
            <param name="stream">The stream from which the design CSS is loaded.</param>
            <example >
            string value = "p {color:red;}";
            Stream stream = new MemoryStream(Encoding.UTF8.GetBytes(value));
            LoadDesignCSS(stream);
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadXml(System.String,System.Uri)">
            <summary>
            Loads the document from an XML string.
            </summary>
            <param name='xml'>XML string to load.</param>
            <param name='baseUri'> Path to resolve pictures, video, links, and other resources.</param>
            <returns><b>True</b>, if XML successfully loaded; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadXml(System.IO.Stream,System.Uri)">
            <summary>
            Loads the document from the specified stream in XML format.
            <param name='stream'>The <see cref="T:System.IO.Stream"/> containing the XML document to load.</param>
            <param name='baseUri'> Path to resolve pictures, video, links, and so on.</param>
            </summary>
            <returns><b>True</b>, if XML successfully loaded; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadXml(System.String)">
            <summary>
            Loads the document from the specified file in XML format.
            </summary>
            <param name="fileName">The name of the file containing the document to load.</param>
            <returns>True, if the file is successfully loaded; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadRtf(System.IO.Stream,System.Uri)">
            <summary>
            Loads the document from the specified stream in RTF format.
            <param name='stream'>The <see cref="T:System.IO.Stream"/> containing the RTF document to load.</param>
            <param name='baseUri'> Path to resolve pictures, video, links, and so on.</param>
            </summary>
            <returns><b>True</b>, if XML successfully loaded; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadRtf(System.String)">
            <summary>
            Loads the document from the specified file in RTF format.
            </summary>
            <param name="fileName">The name of the file containing the document to load.</param>
            <returns>True, if the file is successfully loaded; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.SaveXml(System.String)">
            <summary>
            Saves the document to the specified file in XML format.
            </summary>
            <param name="fileName">The name of the file where you want to save the document.</param>
            <returns>True, if the file is successfully saved; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.SaveXml(System.IO.Stream)">
            <summary>
            Saves the document to the specified stream in XML format.
            </summary>
            <param name="stream">The stream to which you want to save.</param>
            <returns>True, if the document is successfully saved; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.SaveXml">
            <summary>
            Returns the XML content of the document as a string.
            </summary>
            <returns>XML content of the document as a string</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.SaveRtf(System.String)">
            <summary>
            Saves the document to the specified file in RTF format.
            </summary>
            <param name="fileName">The name of the file where you want to save the document.</param>
            <returns>True, if the file is successfully saved; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.SaveRtf(System.IO.Stream)">
            <summary>
            Saves the document to the specified stream in RTF format.
            </summary>
            <param name="stream">The stream to which you want to save.</param>
            <returns>True, if the document is successfully saved; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.ValidateSource">
            <summary>
            Validates document in source mode and shows validation errors if found.
            </summary>
            <returns><b>True</b> if document was validated without errors; otherwise, False. </returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.FixSource">
            <summary>
            Fixes the document in source mode, corrects errors, makes it valid XHTML.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.BeginTransaction(System.String)">
             <summary>
             Begins a transaction.
             </summary>
             <param name="title">Title of the started transaction.</param>
             <remarks>
             If the <see cref="P:C1.Win.C1Editor.C1Editor.Document"/> is changed without using transactions, each time any of the
             NodeInserted, NodeRemoved and NodeChanged events of the XmlDocument occurs, the control performs
             synchronization between XML and MSHTML. Calling <see cref="M:C1.Win.C1Editor.C1Editor.BeginTransaction(System.String)"/> tells the control
             it must not synchronized any changes made in XmlDocument until <see cref="M:C1.Win.C1Editor.C1Editor.CommitTransaction"/> is called. 
             The <see cref="M:C1.Win.C1Editor.C1TextRange.ApplyStyle(System.String,System.String)"/> and the <see cref="M:C1.Win.C1Editor.C1TextRange.RemoveStyle(System.String,System.String)"/> methods of the <see cref="T:C1.Win.C1Editor.C1TextRange"/> automatically start a transaction, if
             it has not been started yet.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CommitTransaction">
             <summary>
             Commits the started transaction.
             </summary>
             <remarks>
             If the <see cref="P:C1.Win.C1Editor.C1Editor.Document"/> is changed without using transactions, each time any of the
             NodeInserted, NodeRemoved and NodeChanged events of the XmlDocument occurs, the control performs
             synchronization between XML and MSHTML. Calling <see cref="M:C1.Win.C1Editor.C1Editor.BeginTransaction(System.String)"/> tells the control
             it must not synchronized any changes made in XmlDocument until <see cref="M:C1.Win.C1Editor.C1Editor.CommitTransaction"/> is called. 
             The <see cref="M:C1.Win.C1Editor.C1TextRange.ApplyStyle(System.String,System.String)"/> and the <see cref="M:C1.Win.C1Editor.C1TextRange.RemoveStyle(System.String,System.String)"/> methods of the <see cref="T:C1.Win.C1Editor.C1TextRange"/> automatically start a transaction, if
             it has not been started yet.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.RollbackTransaction">
             <summary>
             Rolls back the transaction.
             </summary>
             <remarks>
             If the <see cref="P:C1.Win.C1Editor.C1Editor.Document"/> is changed without using transactions, each time any of the
             NodeInserted, NodeRemoved and NodeChanged events of the XmlDocument occurs, the control performs
             synchronization between XML and MSHTML. Calling <see cref="M:C1.Win.C1Editor.C1Editor.BeginTransaction(System.String)"/> tells the control
             it must not synchronized any changes made in XmlDocument until <see cref="M:C1.Win.C1Editor.C1Editor.CommitTransaction"/> is called. 
             The <see cref="M:C1.Win.C1Editor.C1TextRange.ApplyStyle(System.String,System.String)"/> and the <see cref="M:C1.Win.C1Editor.C1TextRange.RemoveStyle(System.String,System.String)"/> methods of the <see cref="T:C1.Win.C1Editor.C1TextRange"/> automatically start a transaction, if
             it has not been started yet.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.Focus">
            <summary>
            Sets input focus to the control.
            </summary>
            <returns>True if the input focus request was successful; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.ScrollIntoView">
            <summary>
            Scrolls current document selection into view.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CanShowDialog(C1.Win.C1Editor.DialogType)">
             <summary>
             Returns a Boolean value indicating whether or not the specified dialog can be shown. 
             </summary>
             <param name="type">The dialog type.</param>
             <returns>A Boolean value indicating whether or not the specified dialog can be shown.</returns>
             <example> This example shows how to add an "Add Image" button to the form.
             <code>
             private void Form1_Load(object sender, EventArgs e)
             {
                _btnAddImage = new Button();
                _btnAddImage.Text = "Add Image";
                _btnAddImage.Click += AddPictureDialog;
                this.Controls.Add(_btnAddImage);
            
                _btnAddImage.Location = new Point(10, 10);
            
                c1Editor1.DocumentChanged += UpdateUI;
                c1Editor1.SelectionChanged += UpdateUI;
                c1Editor1.ModeChanged += UpdateUI;
             }
            
             private void AddPictureDialog(object sender, EventArgs e)
             {
                c1Editor1.ShowDialog(DialogType.Image);
             }
            
             private void UpdateUI(object sender, EventArgs e)
             {
                _btnAddImage.Enabled = c1Editor1.CanShowDialog(DialogType.Image);
             }
             </code>
             </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.ShowDialog(C1.Win.C1Editor.DialogType)">
             <summary>
             Shows the specified dialog box.
             </summary>
             <param name="type">The type of dialog box to show.</param>
             <example> This example shows how to add an "Add Image" button to the form.
             <code>
             private void Form1_Load(object sender, EventArgs e)
             {
                _btnAddImage = new Button();
                _btnAddImage.Text = "Add Image";
                _btnAddImage.Click += AddPictureDialog;
                this.Controls.Add(_btnAddImage);
            
                _btnAddImage.Location = new Point(10, 10);
            
                c1Editor1.DocumentChanged += UpdateUI;
                c1Editor1.SelectionChanged += UpdateUI;
                c1Editor1.ModeChanged += UpdateUI;
             }
            
             private void AddPictureDialog(object sender, EventArgs e)
             {
                c1Editor1.ShowDialog(DialogType.Image);
             }
            
             private void UpdateUI(object sender, EventArgs e)
             {
                _btnAddImage.Enabled = c1Editor1.CanShowDialog(DialogType.Image);
             }
             </code>
             </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.SelectAll">
            <summary>
            Selects the entire contents of the editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.Select(System.Int32,System.Int32)">
            <summary>
            Creates a range that begins with the specified starting character and continues through the specified length of characters, and moves selection to the range.
            </summary>
            <param name="start">The start position.</param>
            <param name="length">The length of the range.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CreateRange">
            <summary>
            Creates a text range.
            </summary>
            <returns>A new text range.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CreateRange(System.Int32,System.Int32)">
            <summary>
            Creates a range that begins with the specified starting character and continues through the specified length of characters.
            </summary>
            <param name="start">The start position</param>
            <param name="length">The length of the range</param>
            <returns>The text range.</returns>
            <example> This code demonstrates the <see cref="M:C1.Win.C1Editor.C1Editor.CreateRange(System.Int32,System.Int32)"/> method.
            <code>
            <![CDATA[
                    private void button1_Click(object sender, EventArgs e)
                   {
                       c1Editor1.LoadXml("<html><head><title>Document</title></head><body><p>12<span>3</span>456</p></body></html>", new Uri("c:\\"));
                       C1TextRange r = c1Editor1.CreateRange(1, 3);
                       Console.WriteLine(r.Text);
                       // Output: 234
                   }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CreateRange(System.Xml.XmlNode)">
            <summary>
            Creates a range on the specified <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node">The target node.</param>
            <returns>The text range.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CreateRange(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
            <summary>
            Creates a range between the specified start and end <see cref="T:C1.Win.C1Editor.C1TextPointer"/>.
            </summary>
            <param name="start">The start pointer.</param>
            <param name="end">The end pointer.</param>
            <returns>The text range.</returns>
            <example> This code demonstrates the <see cref="M:C1.Win.C1Editor.C1Editor.CreateRange(System.Int32,System.Int32)"/> method.
            <code>
            <![CDATA[
                    private void button1_Click(object sender, EventArgs e)
                   {
                       c1Editor1.LoadXml("<html><head><title>Document</title></head><body><p>12<span>3</span>456</p></body></html>", new Uri("c:\\"));
                       C1TextRange r = c1Editor1.CreateRange(1, 3);
                       Console.WriteLine(r.Text);
                       // Output: 234
                   }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.GetActiveXInstance">
            <summary>
            Gets the underlying ActiveX WebBrowser control. 
            </summary>
            <returns>Reference to the ActiveX WebBrowser object.</returns>
            <remarks>
            Use this method to get a reference to the IWebBrowser2 interface.
            For example, <b>C1SpellChecker</b> uses the IWebBrowser2 interface
            to support spelling in the C1Editor.
            </remarks>
            <example>Code below shows how to activate spell checking 
            using C1SpellChecker and the <b>GetActiveXInstance</b> method.
            <code>
            spellChecker.SetActiveSpellChecking(editor, editor.GetActiveXInstance(), true);
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.Print">
            <summary>
            Prints the current document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.Print(System.Boolean)">
            <summary>
            Prints the current document.
            </summary>
            <param name="selectPrinter">Determines whether a printer selection dialog box is displayed. 
            </param>
            <remarks>
             If <paramref name="selectPrinter"/> is True, the Print dialog box opens before printing, so the user can select a printer and change settings.
             If <paramref name="selectPrinter"/> is False, then the current page is printed.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.Print(System.Boolean,System.String)">
            <summary>
            <para>
            Prints the current document.
             </para>
            </summary>
            <param name="selectPrinter">Determines whether a printer selection dialog box is displayed.
            </param>
            <param name="printTemplateFileName">File name of a print template.</param>
            <remarks>
             If <paramref name="selectPrinter"/> is True, the Print dialog box opens before printing, so the user can select a printer and change settings.
             If <paramref name="selectPrinter"/> is False, then the current page is printed.
             The specified print template is used.
             For details about print templates see
             http://msdn.microsoft.com/en-us/library/aa753279(VS.85).aspx
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.PrintPreview">
            <summary>
            Shows a print preview dialog.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.PrintPreview(System.String)">
            <summary>
            <para>
            Shows a print preview dialog.
             Uses the specified print template.
             See more details about print templates at
             http://msdn.microsoft.com/en-us/library/aa753279(VS.85).aspx
             </para>
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.Cut">
             <summary>
             Moves the current selection to the Clipboard.
             </summary>
            <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnCopy.Enabled = _owner.CanCopy;
                    _btnCut.Enabled = _owner.CanCut;
                    _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
                    base.OnOpening(e);
               }
               </code>
               </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.Copy">
             <summary>
             Copies the current selection to the Clipboard.
             </summary>
            <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnCopy.Enabled = _owner.CanCopy;
                    _btnCut.Enabled = _owner.CanCut;
                    _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
                    base.OnOpening(e);
               }
               </code>
               </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.Paste">
             <summary>
             Replaces the current selection in the editor with the contents of the Clipboard.
             </summary>
            <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnCopy.Enabled = _owner.CanCopy;
                    _btnCut.Enabled = _owner.CanCut;
                    _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
                    base.OnOpening(e);
               }
               </code>
               </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.PasteAsText">
            <summary>
            Pastes the contents of the Clipboard into the editor using text format.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.PasteEmbeddedImages">
            <summary>
            Pastes the contents of an image in the Clipboard into the editor.
            If no image is present, behaves as Paste.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.Undo">
             <summary>
             Performs Undo action in the current editor mode (design or source).
             </summary>
            <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Undo and Redo buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnUndo, _btnRedo;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnUndo = (ToolStripMenuItem)Items.Add("Undo");
                    _btnUndo.ShortcutKeys = Keys.Control | Keys.Z;
                    _btnRedo = (ToolStripMenuItem)Items.Add("Redo");
                    _btnRedo.ShortcutKeys = Keys.Control | Keys.Y;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
            
                    if (e.ClickedItem == _btnUndo)
                        _owner.Undo();
                    else if (e.ClickedItem == _btnRedo)
                        _owner.Redo();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnUndo.Enabled = _owner.CanUndo;
                    _btnRedo.Enabled = _owner.CanCut;
                    base.OnOpening(e);
                }
               </code>
               </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.Redo">
             <summary>
             Performs Redo action in the current editor mode (design or source).
             </summary>
            <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Undo and Redo buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnUndo, _btnRedo;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnUndo = (ToolStripMenuItem)Items.Add("Undo");
                    _btnUndo.ShortcutKeys = Keys.Control | Keys.Z;
                    _btnRedo = (ToolStripMenuItem)Items.Add("Redo");
                    _btnRedo.ShortcutKeys = Keys.Control | Keys.Y;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
            
                    if (e.ClickedItem == _btnUndo)
                        _owner.Undo();
                    else if (e.ClickedItem == _btnRedo)
                        _owner.Redo();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnUndo.Enabled = _owner.CanUndo;
                    _btnRedo.Enabled = _owner.CanCut;
                    base.OnOpening(e);
                }
               </code>
               </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CanUndo">
             <summary>
             Returns a value that indicates whether the most recent action can be undone.
             </summary>
             <returns>True if the most recent action can be undone; otherwise, False.</returns>
            <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Undo and Redo buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnUndo, _btnRedo;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnUndo = (ToolStripMenuItem)Items.Add("Undo");
                    _btnUndo.ShortcutKeys = Keys.Control | Keys.Z;
                    _btnRedo = (ToolStripMenuItem)Items.Add("Redo");
                    _btnRedo.ShortcutKeys = Keys.Control | Keys.Y;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
            
                    if (e.ClickedItem == _btnUndo)
                        _owner.Undo();
                    else if (e.ClickedItem == _btnRedo)
                        _owner.Redo();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnUndo.Enabled = _owner.CanUndo;
                    _btnRedo.Enabled = _owner.CanCut;
                    base.OnOpening(e);
                }
               </code>
               </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CanRedo">
             <summary>
             Returns a value that indicates whether the most recent undo action can be redone.
             </summary>
             <returns>True if the most recent undo action can be redone; otherwise, False.</returns>
            <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Undo and Redo buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnUndo, _btnRedo;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnUndo = (ToolStripMenuItem)Items.Add("Undo");
                    _btnUndo.ShortcutKeys = Keys.Control | Keys.Z;
                    _btnRedo = (ToolStripMenuItem)Items.Add("Redo");
                    _btnRedo.ShortcutKeys = Keys.Control | Keys.Y;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
            
                    if (e.ClickedItem == _btnUndo)
                        _owner.Undo();
                    else if (e.ClickedItem == _btnRedo)
                        _owner.Redo();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnUndo.Enabled = _owner.CanUndo;
                    _btnRedo.Enabled = _owner.CanCut;
                    base.OnOpening(e);
                }
               </code>
               </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.BeginInit">
            <summary>
            Begins the initialization of a <see cref="T:C1.Win.C1Editor.C1Editor"/> control that is used on a form or used by another component. 
            The initialization occurs at run time.
            </summary>
            <remarks>
            The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The EndInit method ends the initialization. Using the BeginInit and EndInit methods prevents the control from being used before it is fully initialized.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.EndInit">
            <summary>
            Ends the initialization of a <see cref="T:C1.Win.C1Editor.C1Editor"/> that is used on a form or used by another component. 
            The initialization occurs at run time.
            </summary>
            <remarks>
            The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The BeginInit method starts the initialization. Using the BeginInit and EndInit methods prevents the control from being used before it is fully initialized.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.DefaultMinimumSize">
            <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.DefaultMinimumSize"/>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.
            </summary>
            <param name="m">Message.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.OnEnter(System.EventArgs)">
            <summary>
            Sends focus to active browser when entering the editor.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.Dispose(System.Boolean)">
            <summary>
            Releases all the resources that the editor owns.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.OnBeforeSave(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises <see cref="E:C1.Win.C1Editor.C1Editor.BeforeSave"/> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.OnAfterSave(System.EventArgs)">
            <summary>
            Raises <see cref="E:C1.Win.C1Editor.C1Editor.AfterSave"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.OnHtmlEvent(C1.Win.C1Editor.HtmlEventEventArgs)">
            <summary>
            Raises <see cref="E:C1.Win.C1Editor.C1Editor.HtmlEvent"/> event.
            </summary>
            <param name="e">A <see cref="T:C1.Win.C1Editor.HtmlEventEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.OnDocumentChanged(System.EventArgs)">
            <summary>
            Raises <see cref="E:C1.Win.C1Editor.C1Editor.DocumentChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.OnSelectionChanged(System.EventArgs)">
            <summary>
            Raises <see cref="E:C1.Win.C1Editor.C1Editor.SelectionChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.OnBeforeModeChange(C1.Win.C1Editor.BeforeModeChangeEventArgs)">
            <summary>
            Raises <see cref="E:C1.Win.C1Editor.C1Editor.SelectionChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.OnModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Editor.C1Editor.ModeChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.OnLoad(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.OnBackColorChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.OnFontChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.OnForeColorChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.XhtmlType">
            <summary>
            Gets or sets type of used XHTML DTD - strict or transitional.
            </summary>
            <remarks>
            Can be Strict (default value) of Transitional
            </remarks>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.ApplicationName">
            <summary>
            Gets or overrides default application name
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.ProjectPath">
            <summary>
             Root path for project
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.MediaPath">
            <summary>
             Path for storing media files path for project
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.History">
            <summary>
             Returns XML document for editing
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.FileName">
            <summary>
            Gets loaded file name
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.CommentSupport">
            <summary>
            Provides Comments functionality
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadHtmlFileToXmlDocument(System.String)">
            <summary>
            Loads html file to XMLDocument
            </summary>
            <param name="fileName">file name to load</param>
            <returns>XML document</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadHtmlFileToXmlDocument(System.String,System.String)">
            <summary>
            Loads html file to XMLDocument
            </summary>
            <param name="fileName">file name to load</param>
            <param name="customization">xml string for customization</param>
            <returns>XML document</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadHtmlFileToXmlDocument(System.String,System.String,System.Boolean)">
            <summary>
            Loads html file to XMLDocument
            </summary>
            <param name="fileName">file name to load</param>
            <param name="customization">xml string for customization</param>
            <param name="strict">if true, Strict DTD will be used, otherwise Transitional DTD</param>
            <returns>XML document</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CheckAndFixXmlDocument(System.Xml.XmlDocument,System.String)">
            <summary>
            Checks document regarding DTD and corrects errors if necessary.
            </summary>
            <param name="document">XML document to check and correct.</param>
            <param name="customization">Customisation string.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CheckAndFixXmlDocument(System.Xml.XmlDocument,System.String,System.Boolean)">
            <summary>
            Checks document regarding DTD and corrects errors if necessary.
            </summary>
            <param name="document">XML document to check and correct.</param>
            <param name="customization">Customisation string.</param>
            <param name="strict">If true, Strict DTD is used, otherwise Transitional DTD is used.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.IsStandardXHTMLElement(System.String)">
            <summary>
            Gets a value indicating whether the given element is a standard XHTML element.
            </summary>
            <param name="name">Tag name of element.</param>
            <returns>True if the given element is a standard XHTML element; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.PreProcessClipboardPaste">
            <summary>
            Process clipboard content before data pasting.
            Further clipboard processing must be canceled, if True returned.
            </summary>
            <returns>True, if clipboard data pasted manually; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadDocument(System.IO.Stream,System.Uri,C1.Win.C1Editor.Internal.DocumentFormat)">
            <summary>
            Loads the document from the specified stream.
            <param name='stream'>The <see cref="T:System.IO.Stream"/> containing the XML document to load.</param>
            <param name='baseUri'> Path to resolve pictures, video, links, and so on.</param>
            <param name='format'> Document format.</param>
            </summary>
            <returns><b>True</b>, if XML successfully loaded; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadDocument(System.String,System.Uri,System.Boolean,C1.Win.C1Editor.Internal.DocumentFormat)">
            <summary>
            Loads content from string with custom dialog for validate error
            </summary>
            <param name="xml">input XML</param>
            <param name="uri">Path to resolve pictures, video, links e t.c.</param>
            <param name="autoFix">If true, automatically fixes invalid document, otherwise asks user for it</param>
            <param name='format'>Document format.</param>
            <returns>true, if XML successfully loaded</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.RefreshAllDesignCSS">
            <summary>
            Refreshes design css.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadXml(System.String,System.Boolean)">
            <summary>
            Loads content from file with custom dialog for validate error
            </summary>
            <param name="fileName">Name of file to load</param>
            <param name="autoFix">If true, automatically fixes invalid document, otherwise asks user for it</param>
            <returns>True, if file successfully loaded</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.LoadDocument(System.String,System.Boolean,C1.Win.C1Editor.Internal.DocumentFormat)">
            <summary>
            Loads content from file with custom dialog for validate error
            </summary>
            <param name="fileName">Name of file to load</param>
            <param name="autoFix">If true, automatically fixes invalid document, otherwise asks user for it</param>
            <param name='format'>Document format.</param>
            <returns>True, if file successfully loaded</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.GetValue">
            <summary>
             Returns current document as a XML string.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.GetSelectionRange">
            <summary>
            Returns selected range.
            </summary>
            <returns>Selected range.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.GetSelectionRanges(System.Boolean)">
            <summary>
            Returns collection of selected ranges.
            </summary>
            <param name="byDisplayPointer"></param>
            <returns>Collection of selected ranges of <see cref="T:C1.Win.C1Editor.C1TextRange"/> type. </returns>
            <remarks>
            Normally <see cref="T:C1.Win.C1Editor.C1Editor"/> has single selected range or empty (collapsed) selection,
            in this case <b>Ranges</b> has only one item.
            The only situation when <b>Ranges</b> has more then one items is selection of several table cells by vertical.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.SelectRange(C1.Win.C1Editor.Range)">
            <summary>
            Moves current selecton to the given range.
            </summary>
            <param name="range">Range to move selection.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.HasOpenTransaction">
            <summary>
            Gets a value indicating whether the editor has open transaction.
            </summary>
            <returns><b>True</b> if the editor has open transaction; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.IsBlockElement(System.String)">
            <summary>
            Gets a value indicating whether the given element is a block element.
            </summary>
            <param name="name">Tag name of element.</param>
            <returns>True if the given element is a block; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.IsBlockContainerElement(System.String)">
            <summary>
            Gets a value indicating whether the given element is a block container element.
            </summary>
            <param name="name">Tag name of element.</param>
            <returns>True if the given element is block container; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.ElementCanContainText(System.String)">
            <summary>
            Returns a <b>Boolean</b> value indicating whether element with given tag name can contain inner text.
            </summary>
            <param name="name">Source element name.</param>
            <returns>
            <b>True</b> if element with given <paramref name="name"/> can contain inner text;  otherwise <b>False</b>.
            </returns>
            <example>The following code example tests if a XmlElement is empty and 
            can contain inner text. In this case code sets some text to the element.
            <code>
            string elName = element.Name;
            if (c1Editor1.ElementCanContainText(elName) &amp;&amp; element.IsEmpty)
               element.InnerXml = text;
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.ElementCanContainTag(System.String,System.String)">
            <summary>
            Returns a <b>Boolean</b> value indicating whether element with given tag <paramref name="name"/> can contain nested element with given <paramref name="tagName"/>.
            </summary>
            <param name="name">Container</param>
            <param name="tagName"></param>
            <returns><b>True</b> if parent <paramref name="name"/> can contain a child with <paramref name="tagName"/>; otherwise <b>False</b>.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.IsParagraphElement(System.String)">
            <summary>
            Gets a value indicating whether the given element is a paragraph element.
            </summary>
            <param name="name">Tag name of element.</param>
            <returns>True if the given element is a paragraph; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.IsInlineElement(System.String)">
            <summary>
            Gets a value indicating whether the given element is a paragraph element.
            </summary>
            <param name="name">Tag name of element.</param>
            <returns>True if the given element is a paragraph; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.ProcessItem(C1.Win.C1Editor.Internal.XHTMLTagIndexes)">
            <summary>
            Inserts or edits specified ty <paramref name="tag"/> object on selection.
            </summary>
            <param name="tag">Specifies type of object to work with.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.EditItem(C1.Win.C1Editor.Internal.XHTMLTagIndexes)">
            <summary>
            Edits specified by <paramref name="tag"/> object on selection.
            </summary>
            <param name="tag">Specifies type of object to edit.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.EditItem(C1.Win.C1Editor.Internal.XHTMLTagIndexes,System.Xml.XmlNode)">
            <summary>
            Edits specified by <paramref name="tag"/> object on <paramref name="itemNode"/> .
            </summary>
            <param name="tag">Specifies type of object to edit.</param>
            <param name="itemNode">Specifies node to edit</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.NewItem(C1.Win.C1Editor.Internal.XHTMLTagIndexes)">
            <summary>
            Inserts specified ty <paramref name="index"/> object on selection.
            </summary>
            <param name="index">Specifies type of object to insert.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.FindReplace(System.Boolean)">
            <summary>
            Shows find/replace dialog window.
            </summary>
            <param name="startWithFindDialog">If <b>True</b> activates Find tab of the FindReplace dialog. 
            If <b>False</b> activates Replace tab of the FindReplace dialog on show.
            </param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.FormatSelection">
            <summary>
            Shows format dialog.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.ProcessTable(C1.Win.C1Editor.Internal.TableAction)">
            <summary>
            Applies specified action to the selected table.
            </summary>
            <param name="action">Action to perform.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.ProcessTable(C1.Win.C1Editor.UICustomization.HorizontalAlignment,C1.Win.C1Editor.UICustomization.VerticalAlignment)">
            <summary>
            Changes vertical or horizontal alignment of cells of the selected table.
            </summary>
            <param name="hAlignment">Horizontal alignment.</param>
            <param name="vAlignment">Vertical alignment.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.ClearHistory">
            <summary>
            Clear undo/redo stack
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.PageSetup">
            <summary>
            Shows page setup dialog.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.GetDomDocument">
            <summary>
            Returns reference to DOM document object.
            </summary>
            <returns>reference to DOM document object.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.SendTab(System.Boolean)">
            <summary>
            Sends TAB or SHIFT-TAB to control 
            </summary>
            <param name="withShift"></param>
        </member>
        <member name="P:C1.Win.C1Editor.C1Editor.SetFocusAfterLoading">
            <summary>
            Gets or sets a value indicating whether focus will be set to a control after the document is loaded.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CorrectCursor">
            <summary>
            In several situations cursor need to be corrected
            Currently there is only one such situation - table in the beginning of document
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.IsSelectionEndingWithEmptyCell(C1.Win.C1Editor.Internal.HTML.IHTMLElement@)">
            <summary>
            Define, if selection ends with empty cell or not, and return result cell in output argument.
            </summary>
            <param name="cell">Output table cell or null.</param>
            <returns>True, if selection ends with empty table cell.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.InitDocument">
            <summary>
            Inits a document to enable the editor be editable
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.C1Editor.CustomClipboardProcessor">
            <summary>
            Implement additional copy/paste action's processing.
            Media tags (IMG, OBJECT) inside anchor tag always copy with anchor.
            Full selected custom inline tags pasted manually - MSHTML not keep
            custom tag and paste only it content.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CustomClipboardProcessor.CustomTagPasted(System.String)">
            <summary>
            Paste custom tag html while PASTE action executing.
            </summary>
            <param name="html">Custom tag html-text.</param>
            <returns>Return true, if html pasted; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CustomClipboardProcessor.CustomTagPasted(System.String,C1.Win.C1Editor.Internal.NotifyDropEventArgs)">
            <summary>
            Paste custom tag html while DROP action executive.
            </summary>
            <param name="html">Custom tag html-text.</param>
            <param name="arg">Drop action parameters.</param>
            <returns>Return true, if html pasted; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CustomClipboardProcessor.LoadClipboard">
            <summary>
            Load data from clipboard and calculate fragment and selection info.
            </summary>
            <returns>True, if clipboard contain valid html data; otherwise, False</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CustomClipboardProcessor.LoadDataObject(System.Windows.Forms.DataObject)">
            <summary>
            Load data from DataObject and calculate fragment and selection info.
            </summary>
            <param name="dataObject">Input DataObject.</param>
            <returns>True, if DataObject contain valid html data; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CustomClipboardProcessor.ExtendSelectionFromMediaToAnchor">
            <summary>
            Extend selection from media tags (IMG, OBJECT) to parent anchor tag.
            </summary>
            <returns>True, if clipboard content changed; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CustomClipboardProcessor.FixEmptyLastCell(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
            <summary>
            WORKAROUND for MSHTML bug: if selection ends with empty table cell, this cell absent in clipboard.
            Correct initial clipboard text and setting, create new DataObject from corrected text and put it in clipboard.
            </summary>
            <param name="cell">Input cell.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.CustomClipboardProcessor.PasteCustomTags">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Editor.C1Editor.SelectionSynchronizer">
            <summary>
            Find out cursor position: inside or outside current selection, - and set
            new selection at cursor if needed.
            </summary>        
        </member>
        <member name="T:C1.Win.C1Editor.C1Editor.DesignModeHotKeyInterceptor">
            <summary>
            Intercept hotkeys in design mode and perform it custom handling.
            Customized strong and emphasis formatting and opening FindReplace dialog.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.C1Editor.SourceModeHotKeyInterceptor">
            <summary>
            Intercept hotkeys in source mode and perform it custom handling.
            Customized opening FindReplace dialog, all other actions canceled.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.C1Editor.HeadTagContentReplacer">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.C1Editor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1Editor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.DocumentChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1Editor.C1Editor.DocumentChanged"/> event of the editor.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.C1Editor.DocumentChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Editor.BeforeModeChangeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1Editor.C1Editor.BeforeModeChange"/> event of the editor.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.C1Editor.BeforeModeChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Editor.HtmlEventEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1Editor.C1Editor.HtmlEvent"/> event of the editor.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:C1.Win.C1Editor.HtmlEventEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:C1.Win.C1Editor.DocumentChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1Editor.C1Editor.DocumentChanged"/> event.
            </summary>
            <remarks>
            This type used in <see cref="E:C1.Win.C1Editor.C1Editor.DocumentChanged"/> event.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.DocumentChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.DocumentChangedEventArgs"/> class.
            </summary>
            <param name="headIsChanged">A <b>Boolean</b> value indicating what any change in the &lt;head&gt; element happened.</param>
        </member>
        <member name="P:C1.Win.C1Editor.DocumentChangedEventArgs.HeadIsChanged">
            <summary>
            Gets a <b>Boolean</b> value indicating what any change in the &lt;head&gt; element happened.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.BeforeModeChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1Editor.C1Editor.BeforeModeChange"/> event.
            </summary>
            <remarks>
            This type is used in the <see cref="E:C1.Win.C1Editor.C1Editor.BeforeModeChange"/> event.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.BeforeModeChangeEventArgs.#ctor(C1.Win.C1Editor.EditorMode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.BeforeModeChangeEventArgs"/> class.
            </summary>
            <param name="newMode">Gets or sets a new editing mode.</param>
            <param name="htmlString">Gets or sets the HTML source for the document being edited.</param>
        </member>
        <member name="P:C1.Win.C1Editor.BeforeModeChangeEventArgs.NewMode">
            <summary>
            Gets or sets a new editing mode. Choose from Design, Source, or Preview modes.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.BeforeModeChangeEventArgs.HtmlString">
            <summary>
            Gets or sets the HTML source for the document being edited.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.HtmlEventEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Win.C1Editor.C1Editor.HtmlEvent"/> event.
            </summary>
            <remarks>
            This type is used in the <see cref="E:C1.Win.C1Editor.C1Editor.HtmlEvent"/> event.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.HtmlEventEventArgs.#ctor(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj,C1.Win.C1Editor.HtmlEventTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.HtmlEventEventArgs"/> class.
            </summary>
            <param name="htmlEventObj">Gets information about an HTML event.</param>
            <param name="type">Gets the type of HTML event.</param>
        </member>
        <member name="P:C1.Win.C1Editor.HtmlEventEventArgs.HTMLEventObj">
            <summary>
            Gets information about an HTML event.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.HtmlEventEventArgs.Type">
            <summary>
            Gets the type of HTML event.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Design.C1EditorDesigner">
            <summary>
            Designer for the C1Editor component (provides AboutBox)
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Design.C1EditorActionList">
            <summary>
            C1EditorDesigner action list
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.IApplyStyleBehaviour">
            <summary>
            Used to provide to custom style apply behavior in C1TextRange.ApplyStyle,
            C1TextRange.RemoveStyle methods.
            </summary>
            <remarks>
            Set one of <see cref="T:C1.Win.C1Editor.Internal.ApplyStyleAction"/> values in <see cref="M:C1.Win.C1Editor.IApplyStyleBehaviour.StyleApplying(System.Xml.XmlNode,C1.Win.C1Editor.Internal.ApplyStyleAction@)"/> to control to process.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.IApplyStyleBehaviour.BeforeApplying">
            <summary>
            Executes before the apply action.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.IApplyStyleBehaviour.StyleApplying(System.Xml.XmlNode,C1.Win.C1Editor.Internal.ApplyStyleAction@)">
            <summary>
            Executes on applying a style.
            </summary>
            <param name="node">xml node receiving the style</param>
            <param name="action">if <paramref name="action"/> return </param>
        </member>
        <member name="M:C1.Win.C1Editor.IApplyStyleBehaviour.StyleApplied(System.Xml.XmlNode,C1.Win.C1Editor.Internal.ApplyStyleAction)">
            <summary>
            Executes when style is applied.
            </summary>
            <param name="node">xml node received the style</param>
            <param name="action">Indicates resulting action.</param>
        </member>
        <member name="M:C1.Win.C1Editor.IApplyStyleBehaviour.OnValidate(System.Boolean@)">
            <summary>
            Performs additional validation.
            </summary>
            <param name="validate"></param>
        </member>
        <member name="M:C1.Win.C1Editor.IApplyStyleBehaviour.AfterApplying">
            <summary>
            Executes after the apply action.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.ICheckForStyleBehaviour">
            <summary>
            Used to provide custom check-for-style behavior.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ICheckForStyleBehaviour.BeforeCheck">
            <summary>
            Executes before the check.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ICheckForStyleBehaviour.CheckForStyle(System.Xml.XmlNode)">
            <summary>
            Handles the check.
            </summary>
            <param name="node">A node of <see cref="T:System.Xml.XmlNode"/> type to check.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.ICheckForStyleBehaviour.AfterCheck(System.Boolean)">
            <summary>
            Executes after the check.
            </summary>
            <param name="isApplied">A Boolean value indicating whether the specified style applied.</param>
        </member>
        <member name="T:C1.Win.C1Editor.C1TextPointer">
            <summary>
            This class represents a text position within the XmlDocument.
            </summary>
            <remarks>
            Allows the text contents of the document to be programmatically manipulated from your program.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Editor.C1TextPointer.Offset">
            <summary>
            Returns offset (as number of characters) of the text pointer, in relation to the <see cref="P:C1.Win.C1Editor.C1TextPointer.LeftNode"/>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1TextPointer.LeftNode">
            <summary>
            Gets the next node to the left.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1TextPointer.RightNode">
            <summary>
            Gets the next node to the right.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1TextPointer.Node">
            <summary>
            XmlNode which contains the text pointer.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1TextPointer.IsPositioned">
            <summary>
            Determines whether the text pointer has been positioned.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1TextPointer.Editor">
            <summary>
            Returns the <see cref="T:C1.Win.C1Editor.C1Editor"/> which created the text pointer.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.#ctor(C1.Win.C1Editor.C1Editor,System.Xml.XmlNode,System.Int32,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Initializes a text pointer of the <see cref="T:C1.Win.C1Editor.C1TextPointer"/> type.
            </summary>
            <param name="editor">Specifies the editor which is creating the <see cref="T:C1.Win.C1Editor.C1TextPointer"/> object.</param>
            <param name="currentScope">The <see cref="T:System.Xml.XmlNode"/> where this pointer located.</param>
            <param name="offset">Offset in characters </param>
            <param name="leftNode"></param>
            <param name="rightNode"></param>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.Invalidate">
             <summary>
             Resets the <see cref="T:C1.Win.C1Editor.C1TextRange"/> object.
             </summary>
             <remarks>
            Current text range becomes non-positioned.
             </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.MoveTo(C1.Win.C1Editor.C1TextPointer)">
            <summary>
            Moves this <see cref="T:C1.Win.C1Editor.C1TextPointer"/> object to another pointer's location.
            </summary>
            <param name="markupPointer">Pointer to a <see cref="T:C1.Win.C1Editor.C1TextPointer"/> object where the original pointer is moved.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.Move(C1.Win.C1Editor.MoveUnit,System.Int32)">
            <summary>
            Moves this <see cref="T:C1.Win.C1Editor.C1TextPointer"/> object by 'count' number of units.
            </summary>
            <param name="moveUnitAction"><see cref="T:C1Editor.MoveUnitAction">MoveUnitAction</see> enumeration value that specifies the move action to perform.</param>
            <param name="count">Number of units to move the MarkupPointer around.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.op_Inequality(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
            <summary>
            The inequality operator (!=) returns False if its operands of <see cref="T:C1.Win.C1Editor.C1TextPointer"/> type are equal; otherwise, it returns True.  
            </summary>
            <param name="markupPointer1">The first text pointer to compare.</param>
            <param name="markupPointer2">The second text pointer to compare.</param>
            <returns>Returns True if two specified objects of <see cref="T:C1.Win.C1Editor.C1TextPointer"/> type are not equal; otherwise, it returns False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.op_Equality(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
            <summary>
            The equality operator (==) compares two <see cref="T:C1.Win.C1Editor.C1TextPointer"/> operands and returns True if the  <see cref="T:C1.Win.C1Editor.C1TextPointer"/> operands are equal; otherwise, it returns False.
            </summary>
            <param name="markupPointer1">The first text pointer to compare.</param>
            <param name="markupPointer2">The second text pointer to compare.</param>
            <returns> Returns True if two <see cref="T:C1.Win.C1Editor.C1TextPointer"/> operands are equal; otherwise, it returns False.</returns>
            <example> The code below compares end position of range1 and start position of range2.
            <code>
               if (range1.End == range2.Start)
                   Console.WriteLine("The ranges are adjacent.");
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.Equals(C1.Win.C1Editor.C1TextPointer)">
            <summary>
            Compares two <see cref="T:C1.Win.C1Editor.C1TextPointer"/> objects for equality. 
            </summary>
            <param name="markupPointer">A <see cref="T:C1.Win.C1Editor.C1TextPointer"/> object to which to compare the current  <see cref="T:C1.Win.C1Editor.C1TextPointer"/> object. </param>
            <returns>True if the objects are equal; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.Equals(System.Object)">
            <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
            <param name="obj">An object to which to compare the current  <see cref="T:C1.Win.C1Editor.C1TextPointer"/> object. </param>
            <returns>True if the objects are equal; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.op_LessThan(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
            <summary>
            Checks to see whether this text pointer's position is to the left of another text pointer's position.
            </summary>
            <param name="markupPointer1">The first text pointer to compare.</param>
            <param name="markupPointer2">The second text pointer to compare.</param>
            <returns>True if the first pointer is to the left of the second pointer, otherwise false.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.op_LessThanOrEqual(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
            <summary>
            Checks to see whether this text pointer's position  is to the left of or is equal to another text pointer's position.
            </summary>
            <param name="markupPointer1">The first text pointer to compare.</param>
            <param name="markupPointer2">The second text pointer to compare.</param>
            <returns>True if the first pointer is to the left of or is equal to the second pointer, otherwise false.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.op_GreaterThan(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
            <summary>
            Checks to see whether this text pointer's position is to the right of another text pointer's position.
            </summary>
            <param name="markupPointer1">The first text pointer to compare.</param>
            <param name="markupPointer2">The second text pointer to compare.</param>
            <returns>True if the first pointer is to the right of the second pointer, otherwise false.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.op_GreaterThanOrEqual(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
            <summary>
            Checks to see whether this text pointer's position  is to the right of or is equal to another text pointer's position.
            </summary>
            <param name="markupPointer1">The first text pointer to compare.</param>
            <param name="markupPointer2">The second text pointer to compare.</param>
            <returns>True if the first pointer is to the right of or is equal to the second pointer, otherwise false.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.EqualsByTextPosition(C1.Win.C1Editor.C1TextPointer)">
            <summary>
            Returns a value that indicates whether the security identifier text pointer has the same position as the specified <paramref name="markupPointer"/>. 
            </summary>
            <param name="markupPointer">The text pointer to compare with this <see cref="T:C1.Win.C1Editor.C1TextPointer"/> object.</param>
            <returns>True if the text pointer represented by this <see cref="T:C1.Win.C1Editor.C1TextPointer"/> object has the same text position as 
            the <paramref name="markupPointer"/>; otherwise, false. </returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.IsLeftTo(C1.Win.C1Editor.C1TextPointer)">
            <summary>
            Checks to see whether this text pointer's position is to the left of another text pointer's position.
            </summary>
            <param name="markupPointer">Pointer of <see cref="T:C1.Win.C1Editor.C1TextPointer"/> type that is used to compare one pointer against another.</param>
            <returns>True if this pointer is to the left of another pointer specified by <paramref name="markupPointer"/>, or false otherwise.</returns>        /// <seealso cref="T:C1.Win.C1Editor.C1TextPointer"/>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.IsRightTo(C1.Win.C1Editor.C1TextPointer)">
            <summary>
            Checks to see whether this text pointer's position is to the right of another text pointer's position.
            </summary>
            <param name="markupPointer">Pointer of <see cref="T:C1.Win.C1Editor.C1TextPointer"/> type that is used to compare one pointer against another.</param>
            <returns>True if this pointer is to the right of another pointer specified by <paramref name="markupPointer"/>, or false otherwise.</returns>        /// <seealso cref="T:C1.Win.C1Editor.C1TextPointer"/>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.IsEqualOrLeftTo(C1.Win.C1Editor.C1TextPointer)">
            <summary>
            Checks to see whether this text pointer's position  is to the left of or is equal to another text pointer's position.
            </summary>
            <param name="markupPointer">Pointer of <see cref="T:C1.Win.C1Editor.C1TextPointer"/> type that is used to compare one pointer against another.</param>
            <returns>True if this pointer is to the left of or is equal to another pointer specified by <paramref name="markupPointer"/>, or false otherwise.</returns>        /// <seealso cref="T:C1.Win.C1Editor.C1TextPointer"/>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.IsEqualOrRightTo(C1.Win.C1Editor.C1TextPointer)">
            <summary>
            Checks to see whether this text pointer's position  is to the right of or is equal to another text pointer's position.
            </summary>
            <param name="markupPointer">Pointer of <see cref="T:C1.Win.C1Editor.C1TextPointer"/> type that is used to compare one pointer against another.</param>
            <returns>True if this pointer is to the right of or is equal to another pointer specified by <paramref name="markupPointer"/>, or false otherwise.</returns>        /// <seealso cref="T:C1.Win.C1Editor.C1TextPointer"/>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.NormalizeToLeft(System.Boolean)">
             <summary>
            This method moves the markup pointer maximally to the left point without crossing text or whole elements.
             </summary>
             <param name="moveThroughMaxParent"></param>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.NormalizeToRight(System.Boolean)">
             <summary>
            This method moves the markup pointer maximally to the right point without crossing text or whole elements.
             </summary>
             <param name="moveThroughMaxParent"></param>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextPointer.GetPlace">
            <summary>
            Returns "virtual" place in XMLDocument, where marker stands
            Calculates by current scope, offset, left and right nodes
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Editor.C1TextPointer.MarkupPointerPlace">
            <summary>
            Stores info about MarkupPointer place in XMlDocument and performs operations above it
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Range">
            <summary>
            Represents a contiguous area in a XML document
            </summary>
            <remarks>
            Each <b>C1TextRange</b> object is defined by a starting, <see cref="P:C1.Win.C1Editor.Range.StartPosition"/> and an ending, <see cref="P:C1.Win.C1Editor.Range.EndPosition"/>, character position of the type <see cref="T:C1.Win.C1Editor.C1TextPointer"/>. 
            <b>C1TextRange</b> objects are used to identify specific portions of a document.
            <b>C1TextRange</b> objects are independent of the selection. 
            That is, you can define and manipulate a range without changing the selection. You can also define multiple ranges in a document, while there can be only one selection per pane.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Range.StartPosition">
            <summary>
            Returns the starting position of the <see cref="T:C1.Win.C1Editor.C1TextRange"/> object.
            <seealso cref="T:C1.Win.C1Editor.C1TextPointer"/>
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Range.EndPosition">
            <summary>
            Returns the ending position of the <see cref="T:C1.Win.C1Editor.C1TextRange"/> object.
            <seealso cref="T:C1.Win.C1Editor.C1TextPointer"/>
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Range.IsEmpty">
            <summary>
            Gets a value indicating whether the <see cref="T:C1.Win.C1Editor.C1TextRange"/> is empty. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Range.IsPositioned">
            <summary>
            Checks the position of the text range.
            </summary>
            <remarks>
            Returns true if both <see cref="P:C1.Win.C1Editor.Range.StartPosition"/> and <see cref="P:C1.Win.C1Editor.Range.EndPosition"/> are positioned.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Range.SelectedNode">
            <summary>
            Returns a selected XmlNode if possible.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Range.CurrentScope">
            <summary>
            Returns current scope of the range.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Range.Text">
            <summary>
            Returns or sets inner text of the text range.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Range.HtmlText">
            <summary>
            Retrieves the XHTML source of the text range as a valid XHTML fragment.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Range.MoveToNode(System.Xml.XmlNode)">
            <summary>
            Moves the <see cref="T:C1.Win.C1Editor.C1TextRange"/> object to the specified <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node">The target node.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.MoveToNodeText(System.Xml.XmlNode)">
            <summary>
            Moves the text range to the most inner child node with text.
            </summary>
            <param name="node">The most inner child node with text.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.MoveStart(C1.Win.C1Editor.MoveUnit,System.Int32)">
            <summary>
            Moves the <see cref="P:C1.Win.C1Editor.Range.StartPosition"/>  of the text range by the given number of units and using the <paramref name="moveUnitAction"/> specified.
            </summary>
            <param name="moveUnitAction">Value of type <see cref="T:C1.Win.C1Editor.MoveUnit"/> specifies the move action to perform.</param>
            <param name="count">Number of units to move.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.MoveEnd(C1.Win.C1Editor.MoveUnit,System.Int32)">
            <summary>
            Moves the <see cref="P:C1.Win.C1Editor.Range.EndPosition"/>  of the text range by the given numebr of units and using <paramref name="moveUnitAction"/> specified.
            </summary>
            <param name="moveUnitAction">Value of type <see cref="T:C1.Win.C1Editor.MoveUnit"/> specifies the move action to perform.</param>
            <param name="count">Number of units to move.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.Collapse(System.Boolean)">
            <summary>
            Moves the <see cref="P:C1.Win.C1Editor.Range.EndPosition"/> to the <see cref="P:C1.Win.C1Editor.Range.StartPosition"/> or <see cref="P:C1.Win.C1Editor.Range.StartPosition"/> to the <see cref="P:C1.Win.C1Editor.Range.EndPosition"/>, 
            depending on the value of the <paramref name="toStartPosition"/>.
            </summary>
            <param name="toStartPosition">If True, <see cref="P:C1.Win.C1Editor.Range.EndPosition"/> moves to <see cref="P:C1.Win.C1Editor.Range.StartPosition"/>. If False, <see cref="P:C1.Win.C1Editor.Range.StartPosition"/> moves to  <see cref="P:C1.Win.C1Editor.Range.EndPosition"/>.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.ExtendToEnclosingElement(System.Boolean)">
            <summary>
            
            </summary>
            <param name="toBlockElementOnly"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.Normalize">
             <summary>
             Moves the range pointers to the most inner text.
             </summary>
             <remarks>
             Different ranges can point to one and the same text, but to different XML tags. For example, suppose we have three XML-fragments:
             
            &lt;p&gt;text|&lt;strong&gt;&lt;em&gt;innert text&lt;/em&gt;&lt;/strong&gt;|text&lt;/p&gt;
            &lt;p&gt;text&lt;strong&gt;|&lt;em&gt;innert text&lt;/em&gt;|&lt;/strong&gt;text&lt;/p&gt;
            &lt;p&gt;text&lt;strong&gt;&lt;em&gt;|innert text|&lt;/em&gt;&lt;/strong&gt;text&lt;/p&gt;
            
            In all three fragments the ranges point to one and the same text, "innert text", but they have different XML-ranges. 
            The Normalize method transforms the first two ranges to the third one, it moves pointers inside (into the innermost tag).
            So, this method must be used to make sure that you work with a range positioned exactly on the text ant not somewhere between elements.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Range.Duplicate">
            <summary>
            Creates and returns a copy of the current text range.
            </summary>
            <returns>A copy of the current text range.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Range.Select">
            <summary>
            Moves selection to the current text range.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Range.InsertXmlElement(System.Xml.XmlElement)">
            <summary>
            Replaces the text range content with the given <paramref name="element"/> of <see cref="T:System.Xml.XmlElement"/> type.
            </summary>
            <param name="element">An XmlElement to replace the range content.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.ApplyStyle(System.String)">
             <summary>
             Applies specified style to the text range.
             </summary>
             <param name="element">Style element to apply to the current text range.</param>
             <example>
             This sample applies the "strong", or bold, style to the selected text.
             <code>
              RangeCollection ranges = c1Editor1.SelectionRanges;
              if ((ranges != null) &amp;&amp; ranges.IsPositioned)
              {
                    ranges.ApplyStyle("strong");
              }
            </code>
             </example>
        </member>
        <member name="M:C1.Win.C1Editor.Range.ApplyStyle(System.String,System.String)">
            <summary>
            Applies the specified attribute and value to the text range.
            </summary>
            <param name="name">Name of attribute.</param>
            <param name="value">Value to set.</param>
            <example> This example puts the selected text range in an element with class=&quot;blue&quot;.
            <code>            
               C1TextRange r = editor.SelectionRanges[0];
               r.ApplyStyle("class", "blue");
               r.Select();
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.Range.ApplyInlineStyle(System.String,System.String)">
             <summary>
             Applies specified inline style to the range.
             </summary>
             <param name="name">Name of CSS property.</param>
             <param name="value">CSS value.</param>
             <example>This example converts a Color value to a CSS value and sets it
             as the background color of the selected range.
             <code>
             string htmlColor = ColorTranslator.ToHtml(value);
             this.SelectionRanges[0].ApplyInlineStyle("background-color", htmlColor);
            </code>
             </example>
        </member>
        <member name="M:C1.Win.C1Editor.Range.ApplyInlineStyle(System.String,System.String,C1.Win.C1Editor.C1StyleType)">
            <summary>
            Applies specified inline style to the range respecting <paramref name="type"/>.
            </summary>
            <param name="name">Name of CSS property.</param>
            <param name="value">CSS value.</param>
            <param name="type">Defines type of content to which the inline style must be applied.</param>
            <example>This code aligns the paragraph containing the given range to the left.
            <code>
            range.ApplyInlineStyle("text-align", "left", C1StyleType.Paragraph);
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.Range.ApplyStyle(System.String,System.Collections.Generic.IDictionary{System.String,System.String},C1.Win.C1Editor.IApplyStyleBehaviour)">
            <summary>
            Applies specified style and attributes to the range.
            </summary>
            <param name="element">Style element to apply to the current text range.</param>
            <param name="attributes">A list of name-value attributes to apply to the element.</param>
            <param name="behaviour">An object of <see cref="T:C1.Win.C1Editor.IApplyStyleBehaviour"/> manages the action.  </param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.CheckForStyle(System.String)">
            <summary>
            Gets a Boolean value indicating whether the range is decorated with the specified style.
            </summary>
            <param name="elementName">Style element.</param>
            <returns>True if the specified element if is applied to the text range; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Range.CheckForStyle(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets a Boolean value indicating whether the range is decorated with the specified attributes.
            </summary>
            <param name="attributes">Attributes to check.</param>
            <returns>True if the specified attributes is applied to the text range; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Range.CheckForStyle(C1.Win.C1Editor.ICheckForStyleBehaviour)">
            <summary>
            Gets a Boolean value indicating whether the range passes a test with the given behavior.
            </summary>
            <param name="behaviour">Defines checking behavior.</param>
            <returns>True if the behavior finds the target style.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Range.CheckForStyle(C1.Win.C1Editor.ICheckForStyleBehaviour,System.Boolean)">
            <summary>
            Gets a Boolean value indicating whether the range passes a test with the given behavior.
            </summary>
            <param name="behaviour">Defines checking behavior.</param>
            <param name="optimize">If false, stops code execution if found nodes are not be neighbours.</param>
            <returns>True if the behavior finds the target style.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Range.CheckForInlineStyle(System.String)">
            <summary>
            Gets a Boolean value indicating whether range has inline style with the given name.
            </summary>
            <param name="name">Name of style property to check.</param>
            <returns>True if the range contains an inline style with the specified in <paramref name="name"/> and any value.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Range.CheckForInlineStyle(System.String,System.String)">
            <summary>
            Gets a Boolean value indicating whether the range has an inline style with the given name and value.
            </summary>
            <param name="name">Name of style property to check.</param>
            <param name="value">Value of style property to check.</param>
            <returns>True if the range contains an inline style with the specified in <paramref name="name"/> and value specified in <paramref name="value"/>.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Range.RemoveStyle(System.String)">
            <summary>
            Removes specified style.
            </summary>
            <param name="elementName">Style to remove.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.RemoveStyle(System.String,C1.Win.C1Editor.IApplyStyleBehaviour)">
            <summary>
            Removes the specified style using specified behavior.
            </summary>
            <param name="elementName">Style to remove.</param>
            <param name="behaviour">Defines removing behavior.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.RemoveStyle(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Removes specified name-value attributes. 
            </summary>
            <param name="attributes">Attributes to remove.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.RemoveStyle(System.Collections.Generic.IDictionary{System.String,System.String},C1.Win.C1Editor.IApplyStyleBehaviour)">
            <summary>
            Removes specified the name-value attributes using specified behavior. 
            </summary>
            <param name="attributes">Attributes to remove.</param>
            <param name="behaviour">Defines removing behavior.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.RemoveInlineStyle(System.String)">
            <summary>
            Removes specified inline style from the range.
            </summary>
            <param name="name">Name of the inline style.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.RemoveInlineStyle(System.String,System.String)">
            <summary>
            Removes specified inline style if it has specified value from the range.
            </summary>
            <param name="name">Name of the inline style.</param>
            <param name="value">CSS value of the inline style.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.Trim">
            <summary>
            Trims the text range.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Range.NormalizeNode(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Normilize a node which is nearest to a text node starting its search from the beginning or from the end of the given node.
            </summary>
            <param name="node"></param>
            <param name="atStart"></param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.EncloseElementContentInNewChildElement(System.Xml.XmlNode,System.String)">
            <summary>
            Creates inside the XmlElement node a new XmlElement and move all the source node content into the just created element.
            </summary>
            <param name="node">Element which content should be enclosed in the new child element</param>
            <param name="elementName">Element name</param>
            <returns>XmlElement</returns>
        </member>
        <member name="T:C1.Win.C1Editor.Range.ApplyBlockquoteTag">
            <summary>
            Default ApplyStyle behaviour - style (tag) not applying, if it always applied to selection.
            ApplyBlockquoteTag perform multiple blockquote tag applying, so one blockquote tag will be 
            nest in other blockquote tag.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Range.RemoveBlockquoteTag">
            <summary>
            Default RemoveStyle behaviour - specified style (tag) completely remove from selection.
            RemoveBlockquoteTag cancel all changes in the RemoveStyle. Instead it prepare nodes list, 
            that will be removed later.
            This is WARKAROUND for possible bug in the RemovePartialStyle method.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Range.GetInlineStyle(System.String)">
            <summary>
            Gets the value of the specified inline style.
            </summary>
            <param name="name">Name of the CSS style.</param>
            <returns>Value of the inline style, if defined; otherwise, it returns an empty string.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Range.GetInlineStyle(System.String,C1.Win.C1Editor.C1StyleType)">
            <summary>
            Gets the value of the specified inline style.
            </summary>
            <param name="name">Name of the CSS style.</param>
            <param name="styleType">Checked style type.</param>
            <returns>Value of the inline style, if defined; otherwise, it returns an empty string.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Range.ApplyStyle(System.String,System.Collections.Generic.IDictionary{System.String,System.String},C1.Win.C1Editor.C1StyleType)">
            <summary>
            Applies the specified style, attributes, and style type to the text range. 
            </summary>
            <param name="element">Tag name.</param>
            <param name="attributes">List of attributes.</param>
            <param name="styleType">Style type for the command.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Range.ClearFormatting">
            <summary>
            Removes any elements or inline styles 
            which change font properties or text decoration
            in the current range.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Range.ChangeCase(C1.Win.C1Editor.Internal.CharCasing)">
            <summary>
            Changes selected characters to all uppercase letters, all lowercase letters, or a combination of uppercase and lowercase letters. 
            </summary>
            <param name="casing">Value indicating how to change the text.</param>
            <remarks>The method uses current culture.</remarks>
        </member>
        <member name="M:C1.Win.C1Editor.Range.ChangeCase(C1.Win.C1Editor.Internal.CharCasing,System.Globalization.CultureInfo)">
            <summary>
            Changes selected characters to all uppercase letters, all lowercase letters, or a combination of uppercase and lowercase letters. 
            </summary>
            <param name="casing">Value indicating how to change the text.</param>
            <param name="culture">The CultureInfo object that represents the culture for which the text is localized.</param>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker">
            <summary>
            Represents a toolstrip color picker control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker"/> class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker.Image">
            <inheritdoc/>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker.Color">
            <summary>
            Gets or sets the color selected by the user.
            </summary>
        </member>
        <member name="E:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker.ColorChanged">
            <summary>
            Occurs when the Color property value changes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker.OnColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker.ColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker.OnDropDownShow(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker.OnDropDownOpened(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.ButtonAdapter.SetButtonLook(System.Windows.Forms.ToolStripButton,C1.Win.C1Editor.ToolStrips.CommandButton)">
            <summary>
            Sets image, text, and a tooltip to the specified button.
            </summary>
            <param name="button">The button.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.ButtonAdapter.GetButtonChecked(C1.Win.C1Editor.C1Editor,C1.Win.C1Editor.ToolStrips.CommandButton)">
            <summary>
            Gets a Boolean value indicating whether or not the button should be in checked state.
            </summary>
            <param name="editor">The editor.</param>
            <param name="command">The command.</param>
            <returns>True, if the button should be checked.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.ButtonAdapter.GetButtonEnabled(C1.Win.C1Editor.C1Editor,C1.Win.C1Editor.ToolStrips.CommandButton)">
            <summary>
            Gets a Boolean value indicating whether or not the button should be enabled.
            </summary>
            <param name="editor">The editor.</param>
            <param name="command">The command.</param>
            <returns>True, if the button should be enabled.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.ButtonAdapter.DoButtonAction(C1.Win.C1Editor.C1Editor,System.Boolean,C1.Win.C1Editor.ToolStrips.CommandButton)">
            <summary>
            Performs the command.
            </summary>
            <param name="editor">The editor.</param>
            <param name="value">A Boolean value.</param>
            <param name="command">The command.</param>
            <remarks>Some commands may ignore the value.</remarks>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.ButtonAdapter.GetTag(C1.Win.C1Editor.C1Editor,System.String)">
            //////////////////
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker">
            <summary>
            Represents a toolstrip color picker which performs a command in a linked <see cref="T:C1.Win.C1Editor.C1Editor"/> control.
            </summary>
            <remarks>
            Use this class to add a <see cref="T:C1.Win.C1Editor.C1Editor"/>-related color picker to a ToolStrip.
            </remarks>
            <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker"/> and add it to a <see cref="T:System.Windows.Forms.ToolStrip"/>. 
            <code>
              C1EditorToolStripColorPicker colorPicker = new C1EditorToolStripColorPicker();
              colorPicker.Command = CommandColorPicker.ForeColor;
              colorPicker.Editor = c1Editor1;
              toolStrip1.Items.Add(colorPicker);
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker.Command">
            <summary>
            Gets or sets the command.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker.Editor">
            <summary>
            Gets or sets the editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker.OnCommandChanged">
            <summary>
            Occurs when the command is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker.OnEditorChanging">
            <summary>
            Occurs when the editor is changing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker.OnEditorChanged">
            <summary>
            Occurs when the editor is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker.OnButtonClick(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker.OnColorChanged(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton">
            <summary>
            Represents a toolstrip split button which performs a command in a linked <see cref="T:C1.Win.C1Editor.C1Editor"/> control.
            </summary>
            <remarks>
            Use this class to add a <see cref="T:C1.Win.C1Editor.C1Editor"/>-related split button to a ToolStrip.
            </remarks>
            <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton"/> and add it to a <see cref="T:System.Windows.Forms.ToolStrip"/>. 
            <code>
              C1EditorToolStripSplitButton button = new C1EditorToolStripSplitButton();
              button.Command = CommandSplitButton.Border;
              button.Editor = c1Editor1;
              toolStrip1.Items.Add(button);
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.Command">
            <summary>
            Gets or sets the command.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.Editor">
            <summary>
            Gets or sets the editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.Checked">
            <summary>
            Gets or sets a value indicating whether the button is in the checked state.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.OnCommandChanged">
            <summary>
            Occurs when the command is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.OnEditorChanging">
            <summary>
            Occurs when the editor is changing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.OnEditorChanged">
            <summary>
            Occurs when the editor is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.OnButtonClick(System.EventArgs)">
            <summary>
            Overrides OnButtonClick.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.OnDropDownItemClicked(System.Windows.Forms.ToolStripItemClickedEventArgs)">
            <summary>
            Overrides OnDropDownItemClicked.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides OnPaint.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.CommandButton">
            <summary>
            Specifies the command used in a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton" />.
            </summary>
            <remarks>
            The CommandButton enumeration is used by the <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton" /> to set associated with the command text, tooltip and image. 
            The command defines also whether the button is checked or unchecked and whether the button is enabled or disabled.
            </remarks>
            <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton"/> and add it to a <see cref="T:System.Windows.Forms.ToolStrip"/>. 
            <code>
              C1EditorToolStripButton button = new C1EditorToolStripButton();
              button.Command = CommandButton.ClearFormatting;
              button.Editor = c1Editor1;
              toolStrip1.Items.Add(button);
            </code>
            </example>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.None">
            <summary>
            Empty command.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Bold">
            <summary>
            Bold.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Italic">
            <summary>
            Italic.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Underline">
            <summary>
            Underline.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Strikethrough">
            <summary>
            Strikethrough.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Subscript">
            <summary>
            Subscript.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Superscript">
            <summary>
            Superscript.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.ClearFormatting">
            <summary>
            Clear formatting.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Justify">
            <summary>
            Justify.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.BigFont">
            <summary>
            Big font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.SmallFont">
            <summary>
            Small font.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.New">
            <summary>
            New file.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Open">
            <summary>
            Open file.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Save">
            <summary>
            Save file.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Print">
            <summary>
            Print.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Cut">
            <summary>
            Cut.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Copy">
            <summary>
            Copy.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Paste">
            <summary>
            Paste.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Undo">
            <summary>
            Undo.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Redo">
            <summary>
            Redo.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.SelectAll">
            <summary>
            Select all.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Find">
            <summary>
            Find.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Replace">
            <summary>
            Replace.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Design">
            <summary>
            Design view.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Source">
            <summary>
            Source view.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Preview">
            <summary>
            Preview.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Table">
            <summary>
            New table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.InsertRowAbove">
            <summary>
            Insert row above.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.InsertRowBelow">
            <summary>
            Insert row below.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.InsertColumnBefore">
            <summary>
            Insert column before.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.InsertColumnAfter">
            <summary>
            Insert column after.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.TableProperties">
            <summary>
            Table properties.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.RowProperties">
            <summary>
            Row properties.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.ColumnProperties">
            <summary>
            Column properties.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.CellProperties">
            <summary>
            Cell properties.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.DeleteTable">
            <summary>
            Delete table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.DeleteRow">
            <summary>
            Delete row.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.DeleteColumn">
            <summary>
            Delete column.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Picture">
            <summary>
            Picture.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Hyperlink">
            <summary>
            Hyperlink.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Bookmark">
            <summary>
            Bookmark.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.FlashMovie">
            <summary>
            FlashMovie.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.NumberedList">
            <summary>
            Numbered list.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.BulletedList">
            <summary>
            Bulleted list.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.IncreaseIndent">
            <summary>
            Increase indent.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.DecreaseIndent">
            <summary>
            Decrease indent.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.AddComment">
            <summary>
            Adds comment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.ReplyComment">
            <summary>
            Replies to the comment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.DeleteComment">
            <summary>
            Deletes the current comment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.DeleteAllComments">
            <summary>
            Deletes all comments.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.MovePreviousComment">
            <summary>
            Moves to the previous comment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.MoveNextComment">
            <summary>
            Moves to the next comment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.ShowComments">
            <summary>
            Shows comments.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.CommandSplitButton">
            <summary>
            Specifies the command used in a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton" />.
            </summary>
            <remarks>
            The CommandSplitButton enumeration is used by the <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton" /> to set associated with the command text, tooltip, image, and menu items. 
            The command defines also whether the button is checked or unchecked and whether the button is enabled or disabled.
            </remarks>
            <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton"/> and add it to a <see cref="T:System.Windows.Forms.ToolStrip"/>. 
            <code>
              C1EditorToolStripSplitButton button = new C1EditorToolStripSplitButton();
              button.Command = CommandSplitButton.Border;
              button.Editor = c1Editor1;
              toolStrip1.Items.Add(button);
            </code>
            </example>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandSplitButton.None">
            <summary>
            Empty command.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandSplitButton.Border">
            <summary>
            Border
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.CommandComboBox">
            <summary>
            Specifies the command used in a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox" />.
            </summary>
            <remarks>
            The CommandComboBox enumeration is used by the <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox" /> to set items associated with the command. 
            </remarks>
            <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox"/> and add it to a <see cref="T:System.Windows.Forms.ToolStrip"/>. 
            <code>
              C1EditorToolStripComboBox comboBox = new C1EditorToolStripComboBox();
              comboBox.Command = CommandComboBox.Style;
              comboBox.Editor = c1Editor1;
              toolStrip1.Items.Add(comboBox);
            </code>
            </example>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandComboBox.None">
            <summary>
            Empty command.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandComboBox.Style">
            <summary>
            Style combo box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandComboBox.FontFamily">
            <summary>
            Font family combo box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandComboBox.FontSize">
            <summary>
            Font size combo box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.CommandColorPicker">
            <summary>
            Specifies the command used in a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker" />.
            </summary>
            <remarks>
            The CommandComboBox enumeration is used by the <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker" /> to set items associated with the command. 
            </remarks>
            <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker"/> and add it to a <see cref="T:System.Windows.Forms.ToolStrip"/>. 
            <code>
              C1EditorToolStripColorPicker colorPicker = new C1EditorToolStripColorPicker();
              colorPicker.Command = CommandColorPicker.ForeColor;
              colorPicker.Editor = c1Editor1;
              toolStrip1.Items.Add(colorPicker);
            </code>
            </example>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandColorPicker.None">
            <summary>
            Empty command.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandColorPicker.ForeColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandColorPicker.BackColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.ToolStrips.CommandColorPicker.ParagraphBackColor">
            <summary>
            Paragraph background color.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase">
             <summary>
             Implements the basic functionality common to <see cref="T:C1.Win.C1Editor.C1Editor"/>-related toolstrips.
             This class is abstract.
             </summary>
             <remarks>
             To create your own <see cref="T:C1.Win.C1Editor.C1Editor"/>-related toolstrip,
             inherit from the C1EditorToolStripBase class.
             
             Override <see cref="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.OnInitialize"/> to add items to the toolstrip.
             
             Use <see cref="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.AddButton(C1.Win.C1Editor.ToolStrips.CommandButton)"/> to add a button of <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton"/> type.
             
             Use <see cref="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.AddComboBox(C1.Win.C1Editor.ToolStrips.CommandComboBox)"/> to add a combo box of <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox"/> type.
             </remarks>
             <example>
             The following code example demonstrates how to create and use a custom toolstrip that has Style combo box and Undo, Redo buttons. 
             <code>
            
             public class MyToolStrip : C1EditorToolStripBase
             {
                protected override void OnInitialize()
                {
                 AddComboBox(CommandComboBox.Style);
                 AddButton(CommandButton.Undo);
                 AddButton(CommandButton.Redo);
                }
             }
             
             private void Form1_Load(object sender, EventArgs e)
             {
                  MyToolStrip myToolStrip = new MyToolStrip();
                  myToolStrip.Editor = c1Editor1;
                  this.Controls.Add(myToolStrip);
             }
             </code>
             </example>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.#ctor">
            <summary>
            Creates an instance of C1EditorToolStripBase class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.Editor">
            <summary>
            Gets or sets the <see cref="T:C1.Win.C1Editor.C1Editor"/> control.
            </summary>
            <remarks>
            Set this property to a value to link a descendant of C1EditorToolStripBase type with the <see cref="T:C1.Win.C1Editor.C1Editor"/> control.
            </remarks>
            <example>
            The following code example demonstrates how to use Editor property to link a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripStyle" /> to a <see cref="T:C1.Win.C1Editor.C1Editor" />.
            <code>
            private void Form1_Load(object sender, EventArgs e)
            {
                 C1EditorToolStripStyle toolStrip = new C1EditorToolStripStyle();
                 toolStrip.Editor = c1Editor1;
                 this.Controls.Add(toolStrip);
            }        
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.Items">
            <summary>
            Overrides ToolStrip.Items.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.OnInitialize">
            <summary>
            Adds default items to the toolstrip.
            </summary>
            <remarks>
            The OnInitialize method allows derived classes to define their own set of default items. 
            </remarks>
            <example>
            The following code example demonstrates how to create a custom toolstrip that has Style combo box and Undo, Redo buttons. 
            <code>
            public class MyToolStrip : C1EditorToolStripBase
            {
               protected override void OnInitialize()
               {
                AddComboBox(CommandComboBox.Style);
                AddButton(CommandButton.Undo);
                AddButton(CommandButton.Redo);
               }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.AddButton(C1.Win.C1Editor.ToolStrips.CommandButton)">
            <summary>
            Adds a button to the toolstrip.
            </summary>
            <param name="command">The command assigned to the button.</param>
            <returns>The new button.</returns>
            <remarks>
            The AddButton method allows inheritors to add a button of the <see sref="C1EditorToolStripButton" /> class to the toolstrip. 
            </remarks>
            <example>
            The following code example demonstrates how to create a custom toolstrip that has Style combo box and Undo, Redo buttons. 
            <code>
            public class MyToolStrip : C1EditorToolStripBase
            {
               protected override void OnInitialize()
               {
                AddComboBox(CommandComboBox.Style);
                AddButton(CommandButton.Undo);
                AddButton(CommandButton.Redo);
               }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.AddComboBox(C1.Win.C1Editor.ToolStrips.CommandComboBox)">
            <summary>
            Adds a combo box to the toolstrip.
            </summary>
            <param name="command">The command assigned to the button.</param>
            <returns>The new combo box.</returns>
            <remarks>
            The AddComboBox method allows inheritors to add a button of the <see sref="C1EditorToolStripComboBox" /> class to the toolstrip. 
            </remarks>
            <example>
            The following code example demonstrates how to create a custom toolstrip that has Style combo box and Undo, Redo buttons. 
            <code>
            public class MyToolStrip : C1EditorToolStripBase
            {
               protected override void OnInitialize()
               {
                AddComboBox(CommandComboBox.Style);
                AddButton(CommandButton.Undo);
                AddButton(CommandButton.Redo);
               }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.AddColorPicker(C1.Win.C1Editor.ToolStrips.CommandColorPicker)">
            <summary>
            Adds a color picker to the toolstrip.
            </summary>
            <param name="command">The command assigned to the color picker.</param>
            <returns>The new combo box.</returns>
            <remarks>
            The AddColorPicker method allows inheritors to add a control of the <see sref="C1EditorToolStripColorPicker" /> class to the toolstrip. 
            </remarks>
            <example>
            The following code example demonstrates how to create a custom toolstrip that has Background color button. 
            <code>
            public class MyToolStrip : C1EditorToolStripBase
            {
               protected override void OnInitialize()
               {
                AddColorPicker(CommandColorPicker.BackColor);
               }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.AddSplitButton(C1.Win.C1Editor.ToolStrips.CommandSplitButton)">
            <summary>
            Adds a split button to the toolstrip.
            </summary>
            <param name="command">The command assigned to the split button.</param>
            <returns>The new split button.</returns>
            <remarks>
            The AddSplitButton method allows inheritors to add a split button of the <see sref="C1EditorToolStripSplitButton" /> class to the toolstrip. 
            </remarks>
            <example>
            The following code example demonstrates how to create a custom toolstrip that has Border split button. 
            <code>
            public class MyToolStrip : C1EditorToolStripBase
            {
               protected override void OnInitialize()
               {
                AddSplitButton(CommandSplitButton.Border);
               }
            }
            </code>
            </example>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton">
            <summary>
            Represents a toolstrip button which performs a command in a linked <see cref="T:C1.Win.C1Editor.C1Editor"/> control.
            </summary>
            <remarks>
            Use this class to add a <see cref="T:C1.Win.C1Editor.C1Editor"/>-related button to a ToolStrip.
            </remarks>
            <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton"/> and add it to a <see cref="T:System.Windows.Forms.ToolStrip"/>. 
            <code>
              C1EditorToolStripButton button = new C1EditorToolStripButton();
              button.Command = CommandButton.ClearFormatting;
              button.Editor = c1Editor1;
              toolStrip1.Items.Add(button);
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton.Command">
            <summary>
            Gets or sets the command.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton.Editor">
            <summary>
            Gets or sets the editor.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton.OnCommandChanged">
            <summary>
            Occurs when the command is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton.OnEditorChanging">
            <summary>
            Occurs when the editor is changing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton.OnEditorChanged">
            <summary>
            Occurs when the editor is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton.OnClick(System.EventArgs)">
            <summary>
            Overrides OnClick.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox">
            <summary>
            Represents a toolstrip combo box which performs a command.
            </summary>
            <remarks>
            Use this class to add a <see cref="T:C1.Win.C1Editor.C1Editor"/>-related ComboBox to a ToolStrip.
            </remarks>
            <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox"/> and add it to a <see cref="T:System.Windows.Forms.ToolStrip"/>. 
            <code>
              C1EditorToolStripComboBox comboBox = new C1EditorToolStripComboBox();
              comboBox.Command = CommandComboBox.Style;
              comboBox.Editor = c1Editor1;
              toolStrip1.Items.Add(comboBox);
            </code>
            </example>    [ToolboxItem(false)]
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.Command">
            <summary>
            The command.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.Editor">
            <summary>
            The editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.Items">
            <summary>
            Gets a collection of the items contained in this System.Windows.Forms.ToolStripComboBox.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.Text">
            <summary>
            Gets or sets the text to be displayed on the hosted control.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.OnCommandChanged">
            <summary>
             Occurs when command is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.OnEditorChanging">
            <summary>
            Occurs when the editor is changing.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.OnEditorChanged">
            <summary>
            Occurs when the editor is changed.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.OnLostFocus(System.EventArgs)">
            <summary>
            Overrides OnLostFocus.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Overrides OnSelectedIndexChanged.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overrides OnKeyDown.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripMain">
            <summary>
            Provides toolstrip with common editor commands like file, clipboards, history etc.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripMain.OnInitialize">
            <summary>
            Adds buttons to the ToolStrip.
            </summary>
            <remarks>
            You don't need to use this method.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripObjects">
            <summary>
            Represents a toolstrip of new object commands.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripObjects.OnInitialize">
            <summary>
            Adds buttons to the ToolStrip.
            </summary>
            <remarks>
            You don't need to use this method.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripReview">
            <summary>
            Represents a toolstrip with review commands.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripReview.OnInitialize">
            <summary>
            Adds buttons to the ToolStrip.
            </summary>
            <remarks>
            You don't need to use this method.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripStyle">
            <summary>
            Represents a text style toolstrip.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripStyle.OnInitialize">
            <summary>
            Adds buttons to the ToolStrip.
            </summary>
            <remarks>
            You don't need to use this method.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripTable">
            <summary>
            Represents a toolstrip with commands to create and manage tables.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripTable.OnInitialize">
            <summary>
            Adds buttons to the ToolStrip.
            </summary>
            <remarks>
            You don't need to use this method.
            </remarks>
        </member>
        <member name="T:C1.Win.C1Editor.EditorContextMenuStrip">
            <summary>
            Menu strip associated with the C1Editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.IBookmarkItemDialog">
            <summary>
            <b>IBookmarkItemDialog</b> interface allows to customize the dialog used to insert or edit a bookmark.
            </summary>
            <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IBookmarkItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem)">
            <summary>
            Assigns values to the dialog box fields.
            </summary>
            <param name="item">The object being edited.</param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IBookmarkItemDialog.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the dialog window.
            </summary>
            <returns><b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b> </returns>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.IHyperlinkItemDialog">
            <summary>
            <b>IHyperlinkItemDialog</b> interface allows to customize the dialog used to insert or edit a hyperlink.
            </summary>
            <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IHyperlinkItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem)">
            <summary>
            Assigns values to the dialog box fields.
            </summary>
            <param name="item">The object being edited.</param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IHyperlinkItemDialog.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the dialog window.
            </summary>
            <returns><b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b> </returns>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.ICellItemDialog">
            <summary>
            <b>ICellItemDialog</b> interface allows to customize the dialog used to insert or edit a table cell.
            </summary>
            <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.ICellItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLCellItem)">
            <summary>
            Assigns values to the dialog box fields.
            </summary>
            <param name="item">The object being edited.</param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.ICellItemDialog.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the dialog window.
            </summary>
            <returns><b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b> </returns>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.IColumnItemDialog">
            <summary>
            <b>IColumnItemDialog</b> interface allows to customize the dialog used to insert or edit a table column.
            </summary>
            <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IColumnItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLColumnItem)">
            <summary>
            Assigns values to the dialog box fields.
            </summary>
            <param name="item">The object being edited.</param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IColumnItemDialog.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the dialog window.
            </summary>
            <returns><b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b> </returns>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.IImageItemDialog">
            <summary>
            <b>IImageItemDialog</b> interface allows to customize the dialog used to insert or edit an image.
            </summary>
            <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IImageItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLImageItem)">
            <summary>
            Assigns values to the dialog box fields.
            </summary>
            <param name="item">The object being edited.</param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IImageItemDialog.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the dialog window.
            </summary>
            <returns><b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b> </returns>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.IFlashMovieItemDialog">
            <summary>
            <b>IFlashMovieItemDialog</b> interface allows to customize the dialog used to insert or edit a Flash movie object.
            </summary>
            <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IFlashMovieItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem)">
            <summary>
            Assigns values to the dialog box fields.
            </summary>
            <param name="item">The object being edited.</param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IFlashMovieItemDialog.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the dialog window.
            </summary>
            <returns><b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b> </returns>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.IRowItemDialog">
            <summary>
            <b>IRowItemDialog</b> interface allows to customize the dialog used to insert or edit a table row.
            </summary>
            <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IRowItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLRowItem)">
            <summary>
            Assigns values to the dialog box fields.
            </summary>
            <param name="item">The object being edited.</param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IRowItemDialog.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the dialog window.
            </summary>
            <returns><b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b> </returns>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.ITableItemDialog">
            <summary>
            <b>ITableItemDialog</b> interface allows to customize the dialog used to insert or edit a table.
            </summary>
            <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.ITableItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLTableItem)">
            <summary>
            Assigns values to the dialog box fields.
            </summary>
            <param name="item">The object being edited.</param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.ITableItemDialog.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the dialog window.
            </summary>
            <returns><b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b> </returns>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.IFindReplaceDialog">
            <summary>
            <b>IFindReplaceDialog</b> interface allows to customize the Find/Replace dialog.
            </summary>
            <remarks>
            Implement this interface by a windows dialog form and use it in <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IFindReplaceDialog.BindData(C1.Win.C1Editor.UICustomization.FindReplaceSupport)">
            <summary>
            Sets values related to the search/replace conditions to the dialog fields. 
            </summary>
            <param name="support">The object to set search values to the dialog fields.</param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IFindReplaceDialog.Show(System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>
            Shows the dialog window.
            </summary>
            <param name="owner">Any object that implements <see cref="T:System.Windows.Forms.IWin32Window"/> that represents the top-level window that will own the modal dialog box.</param>
            <param name="startWithFindDialog"><b>True</b> if the dialog starts in find mode; <b>False</b> if the dialog starts in replace mode.</param>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.IFormattingDialog">
            <summary>
            <b>IFormattingDialog</b> interface allows to customize the Format dialog.
            </summary>
            <remarks>
            Implement this interface by a windows dialog form and use it in <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IFormattingDialog.BindData(C1.Win.C1Editor.UICustomization.FormattingSupport)">
            <summary>
            Sets values related to the text format options to the dialog fields. 
            </summary>
            <param name="support">The object providing data for the dialog.</param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IFormattingDialog.Show(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the dialog window.
            </summary>
            <param name="owner">Any object that implements <see cref="T:System.Windows.Forms.IWin32Window"/> that represents the top-level window that will own the modal dialog box.</param>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.IMessageBox">
            <summary>
            <b>IMessageBox</b> interface allows to customize the standard MessageBox.Show dialog.
            </summary>
            <remarks>
            Implement this interface by a windows dialog form and use it in <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/> property.
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.IMessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Shows the dialog window.
            </summary>
            <param name="owner">Any object that implements <see cref="T:System.Windows.Forms.IWin32Window"/> that represents the top-level window that will own the modal dialog box.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon to display in the message box. </param>
            <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.</returns>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.CustomDialogs">
            <summary>
            Represents a set of interfaces to support user-defined dialogs.
            </summary>
            <remarks>
            To use your own dialog, implement the required interface and set the corresponding property of 
            <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/>.
            </remarks>
            <remarks>
            <para>
            The <see cref="T:C1.Win.C1Editor.C1Editor"/> contains several dialogs used to perform
            actions such as search/replace, inserting images, tables, and so on.
            </para>
            <para>To replace one or more of the built-in dialogs with your own custom ones,
            follow these steps:</para>
            <para>1. Implement the custom dialog making sure it supports the appropriate
            interface (for example <see cref="T:C1.Win.C1Editor.UICustomization.IFindReplaceDialog"/>).</para>
            <para>2. Assign an instance of the custom dialog to the appropriate member of
            the <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs"/> property.</para>
            </remarks>
            <example>
            The code below replaces the built-in bookmark and find/replace dialogs with
            customized versions of the dialogs.
            <code>
            private void InitCustomDialogs()
            {
              _editor.CustomDialogs.BookmarkDialog = new BookmarkEditorForm();
              _editor.CustomDialogs.FindReplaceDialog = new FindReplaceForm();
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.BookmarkDialog">
            <summary>
            User-defined Edit or insert bookmark dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.HyperlinkDialog">
            <summary>
            User-defined Edit or insert hyperlink dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.ImageDialog">
            <summary>
            User-defined Edit or insert image dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.FlashMovieDialog">
            <summary>
            User-defined Edit or insert Flash movie dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableRowDialog">
            <summary>
            User-defined Edit or insert table row dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableDialog">
            <summary>
            User-defined Edit or insert table dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableCellDialog">
            <summary>
            User-defined Edit or insert table cell dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableColumnDialog">
            <summary>
            User-defined Edit or insert table column dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.FindReplaceDialog">
            <summary>
            User-defined Find/Replace Dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.FormattingDialog">
            <summary>
            User-defined Text Format dialog.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.CustomDialogs.MessageBox">
            <summary>
            User-defined Message dialog.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.CustomDialogs.Dispose">
            <summary>
            Disposes unmanaged resources
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.IFindReplaceOptions">
            <summary>
            Represents find options
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.IFindReplaceOptions.SearchPattern">
            <summary>
            Gets or sets search string.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.IFindReplaceOptions.ReplacePattern">
            <summary>
            Gets or sets replace string.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.IFindReplaceOptions.MatchCase">
            <summary>
            Gets or sets value whether a found string must match the case.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.IFindReplaceOptions.MatchWholeWord">
            <summary>
            Gets or sets value whether a found string must match the whole word.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.IFindReplaceOptions.SearchUp">
            <summary>
            Gets or sets value whether to find in up direction in the document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.FindReplaceSupport">
            <summary>
            Helper class for customizing the Find/Replace dialog.
            </summary>
            <remarks>Implementing the <see cref="T:C1.Win.C1Editor.UICustomization.IFindReplaceDialog"/> interface, 
            you receive an object of the <b>FindReplaceSupport</b> class in the <see cref="M:C1.Win.C1Editor.UICustomization.IFindReplaceDialog.BindData(C1.Win.C1Editor.UICustomization.FindReplaceSupport)"/> method.
            Using properties and methods of this object you cam get data for and support UI in your dialog.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FindReplaceSupport.SearchUp">
            <summary>
            Gets or sets search direction.
            </summary>
            <remarks>
            If <b>True</b>, searches above the current item. 
            </remarks>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FindReplaceSupport.MatchWholeWord">
            <summary>
            True if the find operation locates only entire words and not text that's part of a larger word. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FindReplaceSupport.MatchCase">
            <summary>
            True if the find operation is case sensitive; otherwise, False.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FindReplaceSupport.SearchPattern">
            <summary>
            Gets or sets search pattern.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FindReplaceSupport.ReplacePattern">
            <summary>
            Gets or sets replace pattern.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.FindReplaceSupport.FindNext">
            <summary>
            Finds the next search pattern.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.FindReplaceSupport.Replace">
            <summary>
            Replaces current occurrence of a search pattern with replace pattern.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.FindReplaceSupport.ReplaceAll">
            <summary>
            Replaces all occurrences of a specified search pattern with the specified replace pattern.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.FindReplaceSupport.OnCloseDialog">
            <summary>
            Call this method when closing dialog form.
            </summary>
            <example>
            <code>
                    protected override void OnFormClosed(FormClosedEventArgs e)
                    {
                        _support.OnCloseDialog();
                        base.OnFormClosed(e);
                    }
                    </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.FindReplaceSupport.Dispose">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.FormattingSupport">
            <summary>
            Supports local formatting
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Bold">
            <summary>
            True if the text is formatted as bold; otherwise, False. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Italic">
            <summary>
            True if the text is formatted as italic; otherwise, False. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Underline">
            <summary>
            True if the text is underlined; otherwise, False. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Overline">
            <summary>
            True if the text is overlined; otherwise, False. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Strikeout">
            <summary>
            True if the text is stricken through; otherwise, False. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Hidden">
            <summary>
            True if this text is hidden; otherwise, False.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.FontName">
            <summary>
            Gets or sets the font name used in the text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.FontSize">
            <summary>
            Gets or sets a string value that indicates the font size used in the text.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.ForeColor">
            <summary>
            Gets or sets the foreground color of the text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.LetterSpacing">
            <summary>
            Gets or sets the letter spacing of the text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.TextTransform">
            <summary>
            Gets or sets the text transform of the text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BackgroundColor">
            <summary>
            Gets or sets the background color of the text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BackgroundImage">
            <summary>
            Gets or sets the background image of the text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BackgroundPositionX">
            <summary>
            Gets or sets the the x-coordinate of the background position of the text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BackgroundPositionY">
            <summary>
            Gets or sets the the y-coordinate of the background position of the text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BackgroundRepeat">
            <summary>
            Gets or sets how the background picture is repeated. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderStyle">
            <summary>
            Gets or sets the border style of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderTopStyle">
            <summary>
            Gets or sets the top border style of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderRightStyle">
            <summary>
            Gets or sets the right border style of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderBottomStyle">
            <summary>
            Gets or sets the bottom border style of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderLeftStyle">
            <summary>
            Gets or sets the left border style of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderWidth">
            <summary>
            Gets or sets the border width of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderTopWidth">
            <summary>
            Gets or sets the top border width of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderRightWidth">
            <summary>
            Gets or sets the right border width of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderBottomWidth">
            <summary>
            Gets or sets the bottom border width of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderLeftWidth">
            <summary>
            Gets or sets the left border width of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderColor">
            <summary>
            Gets or sets the border color of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderTopColor">
            <summary>
            Gets or sets the top border color of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderRightColor">
            <summary>
            Gets or sets the right border color of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderBottomColor">
            <summary>
            Gets or sets the bottom border color of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderLeftColor">
            <summary>
            Gets or sets the left border color of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Padding">
            <summary>
            Gets or sets the padding of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.PaddingTop">
            <summary>
            Gets or sets the top padding of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.PaddingRight">
            <summary>
            Gets or sets the right padding of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.PaddingBottom">
            <summary>
            Gets or sets the bottom padding of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.PaddingLeft">
            <summary>
            Gets or sets the left padding of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Margin">
            <summary>
            Gets or sets the margin of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.MarginTop">
            <summary>
            Gets or sets the top margin of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.MarginRight">
            <summary>
            Gets or sets the right margin of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.MarginBottom">
            <summary>
            Gets or sets the bottom margin of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.MarginLeft">
            <summary>
            Gets or sets the left margin of text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.TextAlign">
            <summary>
            Gets or sets the text align. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.WordSpacing">
            <summary>
            Gets or sets the word spacing of paragraph.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.LineHeight">
            <summary>
            Gets or sets the line height of paragraph. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.TextIndent">
            <summary>
            Gets or sets the text indent of paragraph. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Position">
            <summary>
            Gets or sets the text position. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.ZIndex">
            <summary>
            Gets or sets x-index of the text. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Width">
            <summary>
            Gets or sets the text width. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Height">
            <summary>
            Gets or sets the text height. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Top">
            <summary>
            Gets or sets the text top position. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Right">
            <summary>
            Gets or sets the text right position. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Bottom">
            <summary>
            Gets or sets the text bottom position. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Left">
            <summary>
            Gets or sets the text left position. 
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.FormattingSupport.ApplyChanges">
            <summary>
            Applies changes made to the text in the dialog.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.Bookmark">
            <summary>
            Provides information about a bookmark within the document.
            </summary>
            <remarks>
            <para><![CDATA[
            A bookmark in XHTML is a <a> tag with a name but without an href attribute.
            ]]></para>
            <para>To enumerate all bookmarks in the document use the <see cref="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.Bookmarks"/> property.</para>
            </remarks>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.Bookmark.#ctor(C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem,System.String,System.Xml.XmlNode)">
            <summary>
            For internal use only.
            
            Initializes a instance of the <b>Bookmark</b> type.
            </summary>
            <param name="parent">Parent item</param>
            <param name="name">Name attribute.</param>
            <param name="node">Related xml node.</param>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.Bookmark.Name">
            <summary>
            The bookmark name.
            </summary>
            <remarks>
            The following bookmark's name is "bm1":
            <![CDATA[
            <a name="bm1"/>
            ]]>
            </remarks>
            <example>
            The code below loads all bookmarks in a tree using bookmark name.
            <code>
                private void LoadBookmarks(XHTMLBookmarkItem item)
                {
                    _tree.Nodes.Clear();
                    foreach (Bookmark bookmark in item.Bookmarks)
                    {
                        TreeNode node = _tree.Nodes.Add(bookmark.Name);
                        node.Tag = bookmark;
                    }
                 }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.Bookmark.IsRemoved">
            <summary>
            Returns true if the bookmark is removed during editing in a custom dialog.
            </summary>
            <remarks>
            Use this property to determine if the bookmark has been removed to update your custom dialog's UI.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.Bookmark.IsSelected">
            <summary>
            Returns true if the bookmark is inside current selection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.Bookmark.Select">
            <summary>
            Moves selection to the specified bookmark.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.Bookmark.Remove">
            <summary>
            Removes the bookmark.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.Bookmark.Node">
            <summary>
            Related xml node.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.Bookmarks">
            <summary>
            Represents a collection of bookmarks.
            </summary>
            <remarks>
            Use the <see cref="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.Bookmarks" /> property to get a list of all bookmarks in the document.
            </remarks>
            <example>
            The code below loads all bookmarks in a tree.
            <code>
                private void LoadBookmarks(XHTMLBookmarkItem item)
                {
                    _tree.Nodes.Clear();
                    foreach (Bookmark bookmark in item.Bookmarks)
                    {
                        TreeNode node = _tree.Nodes.Add(bookmark.Name);
                        node.Tag = bookmark;
                    }
                 }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.Bookmarks.Count">
            <summary>
            Gets the number of bookmarks in the collection.
            </summary>
            <example>
            The code below checks if any bookmark has been deleted during editing in a custom bookmark dialog.
            <code>
            
                    private bool HaveDeletedBookmarks(XHTMLBookmarkItem item)
                    {
                        for (int i =item.Bookmarks.Count - 1; i >= 0; i--)
                        if (item.Bookmarks[i].IsRemoved)
                            return true;
                        return false;
                     }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.Bookmarks.Item(System.Int32)">
            <summary>
            Gets the bookmark at the specified index.
            </summary>
            <param name="index">The zero-based index of the bookmark to get.</param>
            <returns>The bookmark at the specified index.</returns>
            <example>
            The code below checks if any bookmark has been deleted during editing in a custom bookmark dialog.
            <code>
            
                    private bool HaveDeletedBookmarks(XHTMLBookmarkItem item)
                    {
                        for (int i =item.Bookmarks.Count - 1; i >= 0; i--)
                        if (item.Bookmarks[i].IsRemoved)
                            return true;
                        return false;
                     }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.Bookmarks.System#Collections#Generic#IEnumerable{C1#Win#C1Editor#UICustomization#Bookmark}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.HorAlign">
            <summary>
            <b>align</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.VertAlign">
            <summary>
            <b>valign</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Width">
            <summary>
            <b>width</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Height">
            <summary>
            <b>height</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.CellPadding">
            <summary>
            <b>cellpadding</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.CellSpacing">
            <summary>
            <b>cellspacing</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Border">
            <summary>
            <b>border</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.RowSpan">
            <summary>
            <b>rowspan</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.ColSpan">
            <summary>
            <b>colspan</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Summary">
            <summary>
            <b>summary</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Source">
            <summary>
            <b>src</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Alternate">
            <summary>
            <b>alt</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Span">
            <summary>
            <b>span</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Href">
            <summary>
            <b>href</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Title">
            <summary>
            <b>title</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.AccessKey">
            <summary>
            <b>accesskey</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.TabIndex">
            <summary>
            <b>tabindex</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Name">
            <summary>
            <b>name</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Rel">
            <summary>
            <b>rel</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Target">
            <summary>
            <b>target</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Value">
            <summary>
            <b>value</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Type">
            <summary>
            <b>type</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Play">
            <summary>
            <b>play</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Loop">
            <summary>
            <b>loop</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Classid">
            <summary>
            <b>classid</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Pluginspage">
            <summary>
            <b>pluginspage</b> attribute.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLAttributeNames.Codebase">
            <summary>
            <b>codebase</b> attribute.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.XHTMLNameAttributeValue">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLNameAttributeValue.Play">
            <summary>
            <b>play</b> value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLNameAttributeValue.Loop">
            <summary>
            <b>loop</b> value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLNameAttributeValue.Movie">
            <summary>
            <b>movie</b> value.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.HorizontalAlignment">
            <summary>
            Specifies how an object or text is horizontally aligned.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.HorizontalAlignment.Default">
            <summary>
            The alignment is not specified.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.HorizontalAlignment.Left">
            <summary>
            The object or text is aligned to the left.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.HorizontalAlignment.Center">
            <summary>
            The object or text is aligned the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.HorizontalAlignment.Right">
            <summary>
            The object or text is aligned to the right.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.VerticalAlignment">
            <summary>
            Specifies how an object or text is aligned vertically .
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.VerticalAlignment.Default">
            <summary>
            The alignment is not specified.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.VerticalAlignment.Top">
            <summary>
            The object or text is aligned to the top.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.VerticalAlignment.Middle">
            <summary>
            The object or text is aligned to the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.VerticalAlignment.Bottom">
            <summary>
            The object or text is aligned to the bottom.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.SizeType">
            <summary>
            Specifies the units for measuring size.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.SizeType.Pixel">
            <summary>
            Specifies device pixels as the unit for measuring size.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.SizeType.Percent">
            <summary>
            Specifies percentage as the unit for measuring size.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.XHTMLItemBase">
            <summary>
            Base class for classes used to provide data to custom edit dialogs.
            </summary>
            <remarks><para>The derived classes are <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem"/>, <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem"/>, <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLCellItem"/>, <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLColumnItem"/>, <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLImageItem"/>, <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem"/>, <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLTableItem"/></para>
            <para>Implementing a custom dialog, you will receive an instance of a successor of the XHTMLItemBase class in the BindData method.
            Use it to bind the data to the dialog's UI.</para>
            </remarks>
            <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLImageItem"/> item to GUI controls of a custom dialog form.
            <code>
                    void IImageItemDialog.BindData(XHTMLImageItem item)
                   {
                       _cbxWidthType.SelectedIndex = (int)Item.WidthType;
                       _cbxHeightType.SelectedIndex = (int)Item.HeightType;
                       _tbWidthValue.Value = Math.Max(Item.WidthValue, 1);
                       _tbHeightValue.Value = Math.Max(Item.HeightValue, 1);
                       _tbSource.DataBindings.Add("Text", Item, "Source");
                       _chkWidth.DataBindings.Add("Checked", Item, "UseWidth");
                       _chkHeight.DataBindings.Add("Checked", Item, "UseHeight");
                       _tbAlternate.DataBindings.Add("Text", Item, "Alternate");
                       SetButtonState(this, EventArgs.Empty);
                   }
            </code>
            </example>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLItemBase._sourceNode">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.UICustomization.XHTMLItemBase._editor">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.RaiseItemPropertiesChanged">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLItemBase.Style">
            <summary>
            Gets or sets item style.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.ApplyChanges">
            <summary>
            Applies changes made in the dialog to the document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLItemBase.Node">
            <summary>
            Returns an <see cref="T:System.Xml.XmlNode"/> representing the content that is being edited in the dialog.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLItemBase.DocumentName">
            <summary>
            File name of the document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLItemBase.IsEditMode">
            <summary>
            If True, the dialog is in editing mode; otherwise, the dialog is in creating new object mode.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLItemBase.ApplyButtonVisible">
            <summary>
            If True, the Apply button appears in the dialog.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.StringToHAlign(System.String)">
            <summary>
            Converts a string to a value of <see cref="T:C1.Win.C1Editor.UICustomization.HorizontalAlignment"/> type.
            </summary>
            <param name="value">String value to convert.</param>
            <returns>A value of <see cref="T:C1.Win.C1Editor.UICustomization.HorizontalAlignment"/> type.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.StringToVAlign(System.String)">
            <summary>
            Converts a string to a value of <see cref="T:C1.Win.C1Editor.UICustomization.VerticalAlignment"/> type.
            </summary>
            <param name="value">String value to convert.</param>
            <returns>A value of <see cref="T:C1.Win.C1Editor.UICustomization.VerticalAlignment"/> type.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.GetNodeTemplate">
            <summary>
            For internal use.
            </summary>
            <returns>Xml node.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.SetCustomSelection(C1.Win.C1Editor.C1TextRange)">
            <summary>
            For internal use.
            </summary>
            <param name="range">Range.</param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.SetDefaults">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.SelectSingleNode(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.CreateElement(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.ReadHorAlignAttribute(System.Xml.XmlAttributeCollection,C1.Win.C1Editor.UICustomization.HorizontalAlignment@)">
            <summary>
            For internal use.
            </summary>
            <param name="attrs"></param>
            <param name="target"></param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.ReadVertAlignAttribute(System.Xml.XmlAttributeCollection,C1.Win.C1Editor.UICustomization.VerticalAlignment@)">
            <summary>
            For internal use.
            </summary>
            <param name="attrs"></param>
            <param name="target"></param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.ReadSizeAttribute(System.Xml.XmlAttributeCollection,System.String,System.Boolean@,C1.Win.C1Editor.UICustomization.SizeType@,System.Int32@)">
            <summary>
            For internal use.
            </summary>
            <param name="attrs"></param>
            <param name="attrName"></param>
            <param name="useSize"></param>
            <param name="sizeType"></param>
            <param name="sizeValue"></param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.WriteAttribute(System.String,System.String,System.Boolean)">
            <summary>
            For internal use.
            </summary>
            <param name="attrName"></param>
            <param name="attrValue"></param>
            <param name="removeDefault"></param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.TryGetLocalPath(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.GetAnchorNodeTemplate(System.Collections.Generic.List{System.Xml.XmlNode})">
            <summary>
            For internal use.
            </summary>
            <returns>xml node.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.GetStringValue(C1.Win.C1Editor.UICustomization.HorizontalAlignment)">
            <summary>
            For internal use only.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.GetStringValue(C1.Win.C1Editor.UICustomization.VerticalAlignment)">
            <summary>
            For internal use only.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.CheckMinValue(System.Int32@,System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.RunItemDialog(System.Object,System.Boolean)">
            <summary>
            For internal use only.
            </summary>
            <param name="itemDialog"></param>
            <param name="isEditItemMode"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.RunItemDialog(System.Object,System.Boolean,System.Boolean)">
            <summary>
            For internal use only.
            </summary>
            <param name="itemDialog"></param>
            <param name="isEditItemMode"></param>
            <param name="applyButtonVisible"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.ParseSourceNode">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.BuildXml">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.InvalidBookmarkNameException">
            <summary>
            The exception that is raised when a bookmark name is invalid.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.ExistingBookmarkException">
            <summary>
            The exception that is raised when a bookmark name is not unique within the document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem">
             <summary>
             Provides bookmark data to use in custom edit dialogs.
             </summary>
             <remarks><para>Implementing a custom Bookmark dialog, you will receive an instance of the XHTMLBookmarkItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.IBookmarkItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem)"/> method. 
             Use it to bind the data to the dialog's UI.</para>
             </remarks>
             <example>
             The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem"/> item to GUI controls of a custom dialog form.
             <code>
                    void IBookmarkItemDialog.BindData(XHTMLBookmarkItem item)
                    {
                        _tbName.DataBindings.Add("Text", item, "Name");
                        LoadBookmarks(item);
                        ButtonOKEnabledChanged(this, EventArgs.Empty);
                    }
            
                    private void LoadBookmarks(XHTMLBookmarkItem item)
                    {
                        _tree.Nodes.Clear();
                        foreach (Bookmark bookmark in item.Bookmarks)
                        {
                            TreeNode node = _tree.Nodes.Add(bookmark.Name);
                            node.Tag = bookmark;
                        }
                        UpdateToolbarState();
                    }
             </code>
             </example>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
            <summary>
            Returns true if specified item is equal to the anchor.
            </summary>
            <param name="item"><b>XHTMLBookmarkItem</b> object to compare with the current <b>XHTMLBookmarkItem</b> object.</param>
            <returns><b>true</b> if <paramref name="item"/> is equal to the current <b>XHTMLBookmarkItem</b> object.
            <b>false</b> if <paramref name="item"/> is not equal to the current <b>XHTMLBookmarkItem</b> object.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.ParseSourceNode">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.BuildXml">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.GetNodeTemplate">
            <summary>
            For internal use.
            </summary>
            <returns>xml node.</returns>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.Text">
            <summary>
            Gets bookmark text.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.Name">
            <summary>
            Specifies the name of the bookmark.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.Bookmarks">
            <summary>
            List of all bookmarks of the document.
            </summary>
            <remarks>
            Use the <see cref="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.Bookmarks" /> property to get a list of all bookmarks in the document.
            </remarks>
            <example>
            The code below loads all bookmarks in a tree.
            <code>
                private void LoadBookmarks()
                {
                    _tree.Nodes.Clear();
                    foreach (Bookmark bookmark in Item.Bookmarks)
                    {
                        TreeNode node = _tree.Nodes.Add(bookmark.Name);
                        node.Tag = bookmark;
                    }
                 }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.IsEmpty">
            <summary>
            Returns a Boolean value indicating whether the link does not have inner text.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.RemoveDeletedBookmarks">
            <summary>
            Removes deleted in the dialog bookmarks from the document.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.CheckCurrentBookmark">
            <summary>
            Checks current bookmark for name validity and uniqueness.
            </summary>
            <exception cref="T:C1.Win.C1Editor.UICustomization.InvalidBookmarkNameException"/>
            <exception cref="T:C1.Win.C1Editor.UICustomization.ExistingBookmarkException"/> 
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.ApplyChanges">
            <summary>
            Applies changes made in a custom Bookmarks dialog.
            </summary>
            <exception cref="T:C1.Win.C1Editor.UICustomization.InvalidBookmarkNameException"/>
            <exception cref="T:C1.Win.C1Editor.UICustomization.ExistingBookmarkException"/> 
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.XHTMLCellItem">
            <summary>
            Provides data to bind to and use in a custom Table Cell edit dialog.
            </summary>
            <seealso cref="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableCellDialog"/>
            <remarks><para>Implementing a custom Table cell dialog, you will receive an instance of the XHTMLCellItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.ICellItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLCellItem)"/> method. 
            Use it to bind the data to the dialog's UI.</para>
            </remarks>
            <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLCellItem"/> item to GUI controls of a custom dialog form.
            <code>
                   void ICellItemDialog.BindData(XHTMLCellItem Item)
                   {
                       _cbxVerticalAlignment.SelectedIndex = (int)Item.VerticalAlignment;
                       _cbxHorizontalAlignment.SelectedIndex = (int)Item.HorizontalAlignment;
                       _nudColSpan.DataBindings.Add("Value", Item, "ColSpan");
                       _nudRowSpan.DataBindings.Add("Value", Item, "RowSpan");
                       _chbHeader.DataBindings.Add("Checked", Item, "IsHeader");
                   }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLCellItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLCellItem.ParseSourceNode">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLCellItem.BuildXml">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLCellItem.VerticalAlignment">
            <summary>
            Specifies vertical alignment of the cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLCellItem.HorizontalAlignment">
            <summary>
            Specifies horizontal alignment of the cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLCellItem.RowSpan">
            <summary>
            Gets or sets the number of rows in the table that the cell spans.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLCellItem.ColSpan">
            <summary>
            Gets or sets the number of columns in the table that the cell spans.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLCellItem.IsHeader">
            <summary>
            Gets or sets a Boolean value indicating whether the cell belongs to a header.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.XHTMLColumnItem">
            <summary>
            Provides data to bind to and use in a custom Table column edit dialog.
            </summary>
            <seealso cref="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableColumnDialog"/>
            <remarks><para>Implementing a custom Table column dialog, you will receive an instance of the XHTMLColumnItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.IColumnItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLColumnItem)"/> method. 
            Use it to bind the data to the dialog's UI.</para>
            </remarks>
            <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLColumnItem"/> item to GUI controls of a custom dialog form.
            <code>
                   void IColumnItemDialog.BindData(XHTMLColumnItem item)
                   {
                       _cbxWidthType.SelectedIndex = (int)Item.WidthType;
                       _cbxVerticalAlignment.SelectedIndex = (int)Item.VerticalAlignment;
                       _cbxHorizontalAlignment.SelectedIndex = (int)Item.HorizontalAlignment;
                       _nudSpan.DataBindings.Add("Value", Item, "Span");
                       _tbWidthValue.DataBindings.Add("Value", Item, "WidthValue");
                       _chkWidth.DataBindings.Add("Checked", Item, "UseWidth");
                   }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.VerticalAlignment">
            <summary>
            Specifies vertical alignment of the table column.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.HorizontalAlignment">
            <summary>
            Specifies horizontal alignment of the table column.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.Span">
            <summary>
            Gets or sets the number of columns in the table that each cell of the column spans.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.WidthType">
            <summary>
            Specifies the units used to measure width.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.WidthValue">
            <summary>
            Gets or sets the integer value of the column's width.
            </summary>
            <seealso cref="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.WidthType"/>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.UseWidth">
            <summary>
            <b>True</b>, if column width is specified; otherwise <b>false</b>.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.ParseSourceNode">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.BuildXml">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem">
            <summary>
            Provides data to bind to and use in a custom Flash movie edit dialog.
            </summary>
            <seealso cref="P:C1.Win.C1Editor.UICustomization.CustomDialogs.FlashMovieDialog"/>
            <remarks><para>Implementing a custom Flash movie dialog, you will receive an instance of the XHTMLFlashMovieItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.IFlashMovieItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem)"/> method. 
            Use it to bind the data to the dialog's UI.</para>
            </remarks>
            <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem"/> item to GUI controls of a custom dialog form.
            <code>
                   void IFlashMovieItemDialog.BindData(XHTMLFlashMovieItem Item)
                   {
                       _cbxWidthType.SelectedIndex = (int)Item.WidthType;
                       _cbxHeightType.SelectedIndex = (int)Item.HeightType;
                       _nudWidthValue.DataBindings.Add("Value", Item, "WidthValue");
                       _nudHeightValue.DataBindings.Add("Value", Item, "HeightValue");
                       _tbData.DataBindings.Add("Text", Item, "Data");
                       _chbAutoplay.DataBindings.Add("Checked", Item, "Autoplay");
                       _chbLoop.DataBindings.Add("Checked", Item, "Loop");
                       _chkWidth.DataBindings.Add("Checked", Item, "UseWidth");
                       _chkHeight.DataBindings.Add("Checked", Item, "UseHeight");
                       _tbTitle.DataBindings.Add("Text", Item, "Title");
                   }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.WidthType">
            <summary>
            Specifies the units used to measure width.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.HeightType">
            <summary>
            Specifies the units used to measure height.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.WidthValue">
            <summary>
            Gets or sets the integer value of the movie's width.
            </summary>
            <seealso cref="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.WidthType"/>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.HeightValue">
            <summary>
            Gets or sets the integer value of the movie's height.
            </summary>
            <seealso cref="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.HeightType"/>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.UseWidth">
            <summary>
            <b>True</b>, if width of the movie is specified; otherwise <b>false</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.UseHeight">
            <summary>
            <b>True</b>, if height of the movie is specified; otherwise <b>false</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.Data">
            <summary>
            	Defines a URL that points to the object's data.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.Autoplay">
            <summary>
            Returns or sets a value which determines if the movie will begin to play an .swf file when the .swf file is loaded into the document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.Loop">
            <summary>
            Returns or sets a value which determines if the movie will play continuously.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.Title">
            <summary>
            Specifies extra information about the element.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.ParseSourceNode">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.BuildXml">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.GetNodeTemplate">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.SetCustomSelection(C1.Win.C1Editor.C1TextRange)">
            <summary>
            For internal use only.
            </summary>
            <param name="range"></param>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem">
             <summary>
             Provides data to bind to and use in a custom Hyperlink edit dialog.
             </summary>
             <remarks><para>Implementing a custom Hyperlink dialog, you will receive an instance of the XHTMLHyperlinkItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.IHyperlinkItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem)"/> method. 
             Use it to bind the data to the dialog's UI.</para>
             </remarks>
             <example>
             The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem"/> item to GUI controls of a custom dialog form.
             <code>
                    void IHyperlinkItemDialog.BindData(XHTMLHyperlinkItem item)
                    {
                        if (!string.IsNullOrEmpty(item.AccessKey) &amp;&amp; item.AccessKey.Length > 1)
                            item.AccessKey = item.AccessKey.Substring(0, 1);
            
                        _tbText.DataBindings.Add("Text", item, "Text");
                        _tbLink.DataBindings.Add("Text", item, "Href");
                        _tbTitle.DataBindings.Add("Text", item, "Title");
                        _tbAccessKey.DataBindings.Add("Text", item, "AccessKey");
                        _tbTabIndex.DataBindings.Add("Value", item, "TabIndex");
                        _cmbTarget.DataBindings.Add("Text", item, "Target");
            
                        _tbText.Enabled = item.IsEmpty;
                        _tbText_TextChanged(this, EventArgs.Empty);
                    }
             </code>
             </example>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
            <summary>
            Returns true if specified item is equal to the anchor.
            </summary>
            <param name="item"><b>XHTMLHyperlinkItem</b> object to compare with the current <b>XHTMLHyperlinkItem</b> object.</param>
            <returns><b>true</b> if <paramref name="item"/> is equal to the current <b>XHTMLHyperlinkItem</b> object.
            <b>false</b> if <paramref name="item"/> is not equal to the current <b>XHTMLHyperlinkItem</b> object.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.ParseSourceNode">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.BuildXml">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.GetNodeTemplate">
            <summary>
            For internal use.
            </summary>
            <returns>xml node.</returns>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.Text">
            <summary>
            Gets or sets hyperlink text. 
            If the hyperlink is created/edited on a non-empty selection, this setting is ignored.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.Href">
            <summary>
            Gets or sets the destination of the bookmark.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.Title">
            <summary>
            Gets or sets extra information about the element.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.AccessKey">
            <summary>
            Specifies a keyboard shortcut to access the element.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.TabIndex">
            <summary>
            Specifies the tab order of the element.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.Target">
            <summary>
            Specifies where to open the linked document.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.IsEmpty">
            <summary>
            Returns a Boolean value indicating whether the link does not have inner text.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.XHTMLImageItem">
            <summary>
            Provides data to bind to and use in a custom Image edit dialog.
            </summary>
            <seealso cref="P:C1.Win.C1Editor.UICustomization.CustomDialogs.ImageDialog"/>
            <remarks><para>Implementing a custom Image dialog, you will receive an instance of the 
            XHTMLCellItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.IImageItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLImageItem)"/> method. 
            Use it to bind the data to the dialog's UI.</para>
            </remarks>
            <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLImageItem"/> item to GUI controls of a custom dialog form.
            <code>
                   void IImageItemDialog.BindData(XHTMLImageItem Item)
                   {
                       _cbxWidthType.SelectedIndex = (int)Item.WidthType;
                       _cbxHeightType.SelectedIndex = (int)Item.HeightType;
                       _tbWidthValue.Value = Math.Max(Item.WidthValue, 1);
                       _tbHeightValue.Value = Math.Max(Item.HeightValue, 1);
                       _tbSource.DataBindings.Add("Text", Item, "Source");
                       _chkWidth.DataBindings.Add("Checked", Item, "UseWidth");
                       _chkHeight.DataBindings.Add("Checked", Item, "UseHeight");
                       _tbAlternate.DataBindings.Add("Text", Item, "Alternate");
                       _chkEmbedded.DataBinding.Add("Checked", Item, "Embedded");
                   }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.WidthType">
            <summary>
            Specifies the units used to measure width.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.HeightType">
            <summary>
            Specifies the units used to measure height.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.WidthValue">
            <summary>
            Gets or sets the integer value of the image width.
            </summary>
            <seealso cref="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.WidthType"/>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.HeightValue">
            <summary>
            Gets or sets the integer value of the image height.
            </summary>
            <seealso cref="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.HeightType"/>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.UseWidth">
            <summary>
            <b>True</b>, if the image width is specified; otherwise <b>false</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.UseHeight">
            <summary>
            <b>True</b>, if the image height is specified; otherwise <b>false</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.Source">
            <summary>
            Sets or retrieves the URL of the image.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.Alternate">
            <summary>
            Sets or retrieves a text alternative to the graphic.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.Embedded">
            <summary>
            Gets or sets whether to get the embedded resource.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLImageItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLImageItem.ParseSourceNode">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLImageItem.BuildXml">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLImageItem.SetCustomSelection(C1.Win.C1Editor.C1TextRange)">
            <summary>
            For internal use only.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLImageItem.GetNodeTemplate">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.XHTMLRowItem">
            <summary>
            Provides data to bind to and use in a custom Table Row edit dialog.
            </summary>
            <seealso cref="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableRowDialog"/>
            <remarks><para>Implementing a custom Table row dialog, you will receive an instance of the 
            XHTMLRowItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.IRowItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLRowItem)"/> method. 
            Use it to bind the data to the dialog's UI.</para>
            </remarks>
            <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLRowItem"/> item to GUI controls of a custom dialog form.
            <code>
                   void IRowItemDialog.BindData(XHTMLRowItem item)
                   {
                       _cbxVerticalAlignment.DataBindings.Add("SelectedIndex", item, "VerticalAlignment");
                       _cbxHorizontalAlignment.DataBindings.Add("SelectedIndex", item, "HorizontalAlignment");
                   }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLRowItem.ParseSourceNode">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLRowItem.BuildXml">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLRowItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLRowItem.VerticalAlignment">
            <summary>
            Specifies vertical alignment of the table row.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLRowItem.HorizontalAlignment">
            <summary>
            Specifies horizontal alignment of the table row.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.UICustomization.XHTMLTableItem">
            <summary>
            Provides data to bind to and use in a custom Table edit dialog.
            </summary>
            <seealso cref="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableDialog"/>
            <remarks><para>Implementing a custom Table dialog, you will receive an instance of the 
            XHTMLtableItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.ITableItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLTableItem)"/> method. 
            Use it to bind the data to the dialog's UI.</para>
            </remarks>
            <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLTableItem"/> item to GUI controls of a custom dialog form.
            <code>
            void ITableItemDialog.BindData(XHTMLTableItem item)
            {
                       _cbxWidthType.SelectedIndex = (int)Item.WidthType;
                       _nudRowCount.DataBindings.Add("Value", Item, "RowCount");
                       _nudColumnCount.DataBindings.Add("Value", Item, "ColumnCount");
                       _tbWidthValue.DataBindings.Add("Value", Item, "WidthValue");
                       _nudCellPadding.DataBindings.Add("Value", Item, "CellPadding");
                       _nudCellSpacing.DataBindings.Add("Value", Item, "CellSpacing");
                       _nudBorder.DataBindings.Add("Value", Item, "Border");
                       _chkWidth.DataBindings.Add("Checked", Item, "UseWidth");
                       _tbCaption.DataBindings.Add("Text", Item, "Caption");
                       _tbSummary.DataBindings.Add("Text", Item, "Summary");
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.ColumnCountInitial">
            <summary>
            Initial number of columns in the table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.RowCountInitial">
            <summary>
            Initial number of rows in the table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.ColumnCount">
            <summary>
            Gets or sets the number of columns in the table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.RowCount">
            <summary>
            Gets or sets the number of rows in the table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.WidthType">
            <summary>
            Specifies the units used to measure width.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.WidthValue">
            <summary>
            Gets or sets the integer value of the table width.
            </summary>
            <seealso cref="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.WidthType"/>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.UseWidth">
            <summary>
            <b>True</b>, if the table width is specified; otherwise <b>false</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.CellSpacing">
            <summary>
            Sets or retrieves the amount of space between cells in the table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.CellPadding">
            <summary>
            Sets or retrieves the amount of space between the border of the cell and the content of the cell.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.Border">
            <summary>
            Sets or retrieves the width of the border to draw around the table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.Caption">
            <summary>
            Sets or retrieves the caption of the table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.Summary">
            <summary>
            Sets or retrieves a description of the table.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.SetDefaults">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.ParseSourceNode">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.BuildXml">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.GetNodeTemplate">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.SetCustomSelection(C1.Win.C1Editor.C1TextRange)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.RaiseItemPropertiesChanged">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.C1TextRange">
            <summary>
            Represents a contiguous area in an XML document.
            </summary>
            <remarks>
            Each <b>C1TextRange</b> object is defined by a starting, <see cref="P:C1.Win.C1Editor.C1TextRange.Start"/>, and an ending, <see cref="P:C1.Win.C1Editor.C1TextRange.End"/>, character position of the type <see cref="T:C1.Win.C1Editor.C1TextPointer"/>. 
            <b>C1TextRange</b> objects are used to identify specific portions of a document.
            <b>C1TextRange</b> objects are independent of the selection. 
            That is, you can define and manipulate a range without changing the selection. You can also define multiple ranges in a document, while there can be only one selection per pane.
            </remarks>
        </member>
        <member name="P:C1.Win.C1Editor.C1TextRange.Start">
            <summary>
            Gets the start pointer of the range.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1TextRange.End">
            <summary>
            Gets the end pointer of the range.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1TextRange.Text">
            <summary>
            Returns or sets the inner text of the text range.
            </summary>
            <example> This code demonstrates the <see cref="P:C1.Win.C1Editor.C1TextRange.Text"/> and the <see cref="P:C1.Win.C1Editor.C1TextRange.XmlText"/> properties.
            <code>
            <![CDATA[
                    private void button1_Click(object sender, EventArgs e)
                   {
                       c1Editor1.LoadXml("<html><head><title>Document</title></head><body><p>12<span>3</span>456</p></body></html>", new Uri("c:\\"));
                       C1TextRange r = c1Editor1.CreateRange();
                       r.Move(1, 3);
                       Console.WriteLine(r.Text);
                       // Output: 234
                       Console.WriteLine(r.XmlText);
                       // Output: <p xmlns="http://www.w3.org/1999/xhtml">2<span>3</span>4</p>
                       r.XmlText = "<div style=\"border: solid 1px black\">New Text</div>";
                       Console.WriteLine(c1Editor1.Text);
                       //Output:
                       //1
                       //NewText
                       //56
                   }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.C1TextRange.XmlText">
            <summary>
            Returns or sets the XML text of the text range.
            </summary>
            <example> This code demonstrates the <see cref="P:C1.Win.C1Editor.C1TextRange.Text"/> and the <see cref="P:C1.Win.C1Editor.C1TextRange.XmlText"/> properties.
            <code>
            <![CDATA[
                    private void button1_Click(object sender, EventArgs e)
                   {
                       c1Editor1.LoadXml("<html><head><title>Document</title></head><body><p>12<span>3</span>456</p></body></html>", new Uri("c:\\"));
                       C1TextRange r = c1Editor1.CreateRange();
                       r.Move(1, 3);
                       Console.WriteLine(r.Text);
                       // Output: 234
                       Console.WriteLine(r.XmlText);
                       // Output: <p xmlns="http://www.w3.org/1999/xhtml">2<span>3</span>4</p>
                       r.XmlText = "<div style=\"border: solid 1px black\">New Text</div>";
                       Console.WriteLine(c1Editor1.Text);
                       //Output:
                       //1
                       //NewText
                       //56
                   }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1Editor.C1TextRange.Node">
            <summary>
            Returns an <see cref="T:System.Xml.XmlNode"/> which covers the current range.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.Clone">
            <summary>
            Creates and returns a copy of the current text range.
            </summary>
            <returns>A copy of the current text range.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.Trim">
            <summary>
            Moves start and end pointers of the range to exclude leading and trailing white-space characters from the current range.
            </summary>
            <example>The code below sets new background color for all words in selection, excluding leading and trailing white spaces.
            <code>
            private void button1_Click(object sender, EventArgs e)
            {
               C1TextRange r = c1Editor1.Selection.Clone();
               r.Trim();
               r.ApplyStyle("background-color", "#999999", C1StyleType.Character);
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.Normalize">
             <summary>
             Moves the range pointers to the most inner text.
             </summary>
             <remarks>
             Different ranges can point to one and the same text, but to different XML tags. For example we have three XML-fragments:
             
            &lt;p&gt;text|&lt;strong&gt;&lt;em&gt;inner text&lt;/em&gt;&lt;/strong&gt;|text&lt;/p&gt;,
            &lt;p&gt;text&lt;strong&gt;|&lt;em&gt;inner text&lt;/em&gt;|&lt;/strong&gt;text&lt;/p&gt;, and 
            &lt;p&gt;text&lt;strong&gt;&lt;em&gt;|inner text|&lt;/em&gt;&lt;/strong&gt;text&lt;/p&gt;
            
            In all three fragments the ranges point to one and the same text "inner text", but they have different XML-ranges. 
            The Normalize method transforms the first two ranges to the third one; it moves pointers inside (into the most inner tag).
            So, this method is necessary for a user to be sure that he works with a range positioned only on the text but not somewhere between elements in a document.
            </remarks>
            <example>The following example replaces the selected text with a new value.
            <code>
                    C1TextRange range = _editor.Selection.Clone();
                    range.Text = value;
                    //after inserting text we must collapse selection to the end
                    range.Normalize();
                    range.Start.MoveTo(range.End);
                    range.Select();
             </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.Select">
             <summary>
             Moves selection to the current text range.
             </summary>
            <example>The following example replaces the selected text with a new value and moves selection to the end of the new text.
            <code>
                    C1TextRange range = _editor.Selection.Clone();
                    range.Text = value;
                    //after inserting text we must collapse selection to the end
                    range.Normalize();
                    range.Start.MoveTo(range.End);
                    range.Select();
             </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.Move(System.Int32,System.Int32)">
            <summary>
            Moves the current range by the specified offset and length.
            </summary>
            <param name="offset">Specifies the number of characters to offset the current text range in relation to the current start of the range.</param>
            <param name="length">Specifies the new length of the range.</param>
            <example>The example marks a character before the selection using yellow color.
            <code>
              private void c1Editor1_SelectionChanged(object sender, EventArgs e)
              {
                    if (_colored != null)
                    {
                        _colored.RemoveStyle("color", "yellow");
                        _colored = null;
                    }
                    C1TextRange sel = c1Editor1.Selection.Clone();
                    sel.Move(-1, 1);
                    sel.ApplyStyle("color", "yellow", C1StyleType.Character);
                    _colored = sel;
              }
              private C1TextRange _colored = null;
              </code>
              </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.MoveTo(System.Xml.XmlNode)">
            <summary>
            Moves the <see cref="T:C1.Win.C1Editor.C1TextRange"/> object to the specified <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="node">The target node where the C1TextRange object will be moved.</param>
            <example>The following example selects the first paragraph in the document. 
            <code>
            private void button1_Click(object sender, EventArgs e)
            {
               XmlNode p0 = c1Editor1.Document.GetElementsByTagName("p")[0];
               C1TextRange range = c1Editor1.CreateRange();
               range.MoveTo(p0);
               range.Select();
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.ClearFormatting">
            <summary>
            Removes text and paragraph formatting from the text range.
            </summary>
            <example> The example shows how to clear any formatting of selected text.
            <code>
             private void button1_Click(object sender, EventArgs e)
             {
                editor.Selection.ClearFormatting();
             }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.ApplyTag(System.String)">
             <summary>
             Applies specified tag to the text range.
             </summary>
             <param name="tagName">XHTML tag to apply to the current text range.</param>
             <example>
             This sample applies the "strong", or bold, style to the selected text.
             <code>
              C1TextRange range = c1Editor1.Selection;
              range.ApplyTag("strong");
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.ApplyClass(System.String)">
            <summary>
            Applies specified CSS class to the text range.
            </summary>
            <param name="className">The name of a CSS class to apply to the current text range.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.ApplyClass(System.String,C1.Win.C1Editor.C1StyleType)">
            <summary>
            Applies specified CSS class to the text range.
            </summary>
            <param name="className">The name of a CSS class to apply to the current text range.</param>
            <param name="type">Defines type of content to which the inline style must be applied.</param>
            <example>This code applies a "main_topic" class to the paragraph.
            <code>
            range.ApplyClass("main_topic", C1StyleType.Paragraph);
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.ApplyStyle(System.String,System.String)">
             <summary>
             Applies specified inline style to the range.
             </summary>
             <param name="propertyName">Name of CSS property.</param>
             <param name="propertyValue">CSS value.</param>
             <example>This example converts a Color value to a CSS value and sets it
             as the background color of the selected range.
             <code>
             string htmlColor = ColorTranslator.ToHtml(value);
             c1Editor1.Selection.ApplyStyle("background-color", htmlColor);
            </code>
             </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.ApplyStyle(System.String,System.String,C1.Win.C1Editor.C1StyleType)">
            <summary>
            Applies specified inline style to the range.
            </summary>
            <param name="propertyName">Name of CSS property.</param>
            <param name="propertyValue">CSS value.</param>
            <param name="type">Defines type of content to which inline style must be applied.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.RemoveTag(System.String)">
            <summary>
            Removes specified tag from the <see cref="T:C1.Win.C1Editor.C1TextRange"/>.
            </summary>
            <param name="tagName">Tag to remove from the <see cref="T:C1.Win.C1Editor.C1TextRange"/>.</param>
            <example> This example makes the selected text bold, if the value is True, or regular, if the value is False.
            <code>
            function SetStrong(bool value)
            {
              if (value)
                       _editor.Selection.ApplyTag("strong");
              else
                       _editor.Selection.RemoveTag("strong");
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.RemoveClass(System.String)">
            <summary>
            Removes specified CSS class from the range.
            </summary>
            <param name="className">Class to remove.</param>
            <example> This example, if the value is True, marks the selected text as topic, using a "topic" CSS class,
            or, if the value is False, removes the "topic" class from the selected text.
            <code>
            function SetTopic(bool value)
            {
              if (value)
                       _editor.Selection.ApplyClass("topic");
              else
                       _editor.Selection.RemoveClass("topic");
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.RemoveStyle(System.String,System.String)">
             <summary>
             Removes the specified inline style.
             </summary>
             <param name="propertyName">Name of the inline style.</param>
             <param name="propertyValue">CSS value of the inline style.</param>
             <remarks>If <paramref name="propertyValue"/> is null, the function removes specified inline style with any value.
             </remarks>
             <example>This example removes specified color from the selected text. 
             If the value is null it applies default color to the text.
             <code>
             function SetColor(Color value)
             {
                    if (value.IsEmpty)
                        _editor.Selection.RemoveStyle("color", null);
                    else
                    {
                        string foreColor = System.Drawing.ColorTranslator.ToHtml(value);
                        _editor.Selection.ApplyStyle("color", foreColor, C1StyleType.Character);
                    }
             }
            </code>
             </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.IsTagApplied(System.String)">
            <summary>
            Returns a value indicating whether the specified tag is applied to the <see cref="T:C1.Win.C1Editor.C1TextRange"/>. 
            </summary>
            <param name="tagName">The tag name.</param>
            <returns>True, if the specified tag is applied to the current range; otherwise, False.</returns>
            <example> The code updates an application UI. It marks an "Ordered list" button as checked if an ordered list is selected.
            It marks an "Unordered list" button as checked if an unordered list is selected.
            <code>
              btnOrderedList.Checked = _editor.Selection.IsTagApplied("ol");
              btnUnorderedList.Checked = _editor.Selection.IsTagApplied("ul");
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.IsClassApplied(System.String)">
            <summary>
            Returns a value indicating whether the specified CSS class is applied to the <see cref="T:C1.Win.C1Editor.C1TextRange"/>. 
            </summary>
            <param name="className">The CSS class name to check.</param>
            <returns>True, if the CSS class is applied to the range; otherwise, False.</returns>
            <example> This example updates some UI controls depending on the style of the selected text.
            <code>
            function UpdateUI()
            {
                   if (_editor.Mode == EditorMode.Design)
                   {
                       _button1.Enabled = _editor.Selection.IsClassApplied("topic");
                       _button2.Enabled = _editor.Selection.IsClassApplied("book");   
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.IsStyleApplied(System.String)">
            <summary>
            Returns a value indicating whether the inline style is applied to all text within the <see cref="T:C1.Win.C1Editor.C1TextRange"/>. 
            </summary>
            <param name="propertyName">The CSS property name.</param>
            <returns>True, if the CSS class is applied to the range; otherwise, False.</returns>
            <example> The example demonstrates a function which determines whether or not selected text is underlined.
            <code>
            function IsUnderline()
            {
                   if (_editor.Mode == EditorMode.Design)
                   {
                       bool res = false;
                       if (_editor.Selection.IsStyleApplied("text-decoration"))
                           res = string.Compare(_editor.Selection.GetStyleValue("text-decoration", C1StyleType.Character), "underline", true) == 0;
                       return res;
                   }
                   else
                       return false;
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.GetStyleValue(System.String)">
            <summary>
            Gets an inline style value by the given CSS property name.
            </summary>
            <param name="propertyName">The CSS property name.</param>
            <returns>The string value of the given property.</returns>
            <example> The example shows how to write a function which returns font size of the selected text.
            <code>
            string GetSelectionFontSize()
            {
                if (_editor.Mode == EditorMode.Design)
                {
                    string size = _editor.Selection.GetStyleValue("font-size") ?? string.Empty;
                    return size.EndsWith("pt") ? size.Substring(0, size.Length - 2) : size;
                }
                else
                    return string.Empty;
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.GetStyleValue(System.String,C1.Win.C1Editor.C1StyleType)">
            <summary>
            Gets an inline style value by the given CSS property name.
            </summary>
            <param name="propertyName">The CSS property name.</param>
            <param name="type">Specifies the type of content to which the inline style will be applied.</param>
            <returns>The string value of the given property.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.SetXmlElement(System.Xml.XmlElement)">
            <summary>
            Replaces the text range content with the given <paramref name="element"/> of <see cref="T:System.Xml.XmlElement"/> type.
            </summary>
            <param name="element">An XmlElement to replace the range content.</param>
            <example>The example replaces selected text with a div XmlElement.
            <code>
            private void button1_Click(object sender, EventArgs e)
            {
               XmlElement node = c1Editor1.Document.CreateElement("div");
               node.InnerText = "New Element";
               c1Editor1.Selection.SetXmlElement(node);
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.GetTags(C1.Win.C1Editor.C1StyleType,System.Boolean)">
            <summary>
            Gets nodes list by the given C1StyleType value.
            </summary>
            <param name="type">Specifies the type of nodes that must be included to the output list.</param>
            <param name="includePartialNodes">Specifies whether partially selected nodes must be included to the output list.</param>
            <returns>The list of the nodes with specified type.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.ApplyFormatting(System.String,System.Collections.Generic.IDictionary{System.String,System.String},C1.Win.C1Editor.IApplyStyleBehaviour)">
            <summary>
            Applies specified style and attributes to all ranges in the collection.
            </summary>
            <param name="element">Style element to apply to the current text range.</param>
            <param name="attributes">A list of name-value attributes to apply to the element.</param>
            <param name="behaviour">An object of <see cref="T:C1.Win.C1Editor.IApplyStyleBehaviour"/> manages the action.  </param>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.ApplyFormatting(System.String,System.Collections.Generic.IDictionary{System.String,System.String},C1.Win.C1Editor.C1StyleType)">
            <summary>
            Applies specified style and attributes to all ranges in the collection.
            </summary>
            <param name="element">Style element to apply to the current text range.</param>
            <param name="attributes">A list of name-value attributes to apply to the element.</param>
            <param name="type">Defines type of content to which the inline style must be applied.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.RemoveFormatting(System.String,C1.Win.C1Editor.IApplyStyleBehaviour)">
            <summary>
            Removes specified style from all ranges in the collection respecting specified behavior.
            </summary>
            <param name="elementName">Style to remove.</param>
            <param name="behaviour">Defines removing behavior.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.RemoveFormatting(System.Collections.Generic.IDictionary{System.String,System.String},C1.Win.C1Editor.IApplyStyleBehaviour)">
            <summary>
            Removes specified name-value attributes from all ranges in the collection respecting specified behavior. 
            </summary>
            <param name="attributes">Attributes to remove.</param>
            <param name="behaviour">Defines removing behavior.</param>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.IsFormattingApplied(C1.Win.C1Editor.ICheckForStyleBehaviour)">
            <summary>
            Gets a Boolean value indicating whether the range passes a test with the given behavior.
            </summary>
            <param name="behaviour">Defines checking behavior.</param>
            <returns>True if the behavior finds the target style.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.IsFormattingApplied(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets a Boolean value indicating whether the range is decorated with the specified attributes.
            </summary>
            <param name="attributes">Attributes to check.</param>
            <returns>True if the specified attributes is applied to the text range; otherwise, False.</returns>
        </member>
        <member name="P:C1.Win.C1Editor.C1TextRange.IsEmpty">
            <summary>
            Returns true if all ranges of the collection are empty; otherwise, false. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.C1TextRange.IsPositioned">
            <summary>
            Returns true if each text range in the collection has definite position.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.C1TextRange.IsStyleAppliedToAnyRangePart(System.String)">
            <summary>
            Returns true if style property is applied to some of range tags
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Selection">
            <summary>
            Represents text selected by a user in the <see cref="T:C1.Win.C1Editor.C1Editor"/>. 
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.Table">
            <summary>
            Represents a <see cref="P:C1.Win.C1Editor.Selection.Table" /> object which support interactions with the selected table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.List">
            <summary>
            Represents a <see cref="P:C1.Win.C1Editor.Selection.List" /> object which support interactions with the selected list.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.Comments">
            <summary>
            Represents a <see cref="P:C1.Win.C1Editor.Selection.Table" /> object which support interactions with the selected comment.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.IsAnchorEnabled">
            <summary>
            Gets a <b>Boolean</b> value that specifies whether is possible to insert a hyperlink at the current selection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.IsInsideDefinitionTerm">
            <summary>
            Gets a <b>Boolean</b> value that indicates whether selection is inside &lt;DT&gt; XHTML element.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.IsBookmark">
            <summary>
            Gets the <b>Boolean</b> value that indicates whether a bookmark is selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.IsFlashMovie">
            <summary>
            Gets the <b>Boolean</b> value that indicates whether a flash movie object is selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.IsImage">
            <summary>
            Gets the <b>Boolean</b> value that indicates whether a image is selected.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.IsInsideList">
            <summary>
            Gets a value that indicates whether the current selection is inside a list.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.IsInsideComment">
            <summary>
            Gets a value that indicates whether the current selection is inside a comment.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.IsBetweenCommentMarkers">
            <summary>
            Gets a value that indicates whether the current selection is inside a comment.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.IsSingleCellSelected">
            <summary>
            Gets a value that indicates whether single cell is selected in the table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.IsSingleSpanedCellSelected">
            <summary>
            Gets a value that indicates whether single cell is selected in the table and the cell spans across more than one column or row.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.IsSingleRowSelected">
            <summary>
            Gets a value that indicates whether single row is selected in the table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.IsSingleColumnSelected">
            <summary>
            Gets a value that indicates whether single column is selected in the table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.IsInsideTable">
            <summary>
            Gets a value that indicates whether the current selection is inside a table.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Selection.AreOnlyCellsSelected">
            <summary>
            Returns true, if selection inside table and not inside CAPTION-tag.
            I.e. only table cells or single cell content inside selection.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Selection.IsAlignEquals(C1.Win.C1Editor.UICustomization.VerticalAlignment,C1.Win.C1Editor.UICustomization.HorizontalAlignment)">
            <summary>
            If single table cell is selected, compares its vertical and horizontal alignment with given values.
            If more than one cell is selected, compares given values with <b>Default</b>.
            </summary>
            <param name="vAlign">A value of vertical alignment.</param>
            <param name="hAlign">A value of horizontal alignment.</param>
            <returns><b>True</b>, if both <paramref name="vAlign"/> and <paramref name="hAlign"/> are equal to alignment of the selected cell.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Selection.SelectTable">
            <summary>
            If selection is inside a table, sets selection to all cells of the table.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Selection.SelectTableCell">
            <summary>
            If selection is inside a table cell, sets selection on the cell.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Selection.SelectTableRow">
            <summary>
            If selection is inside a table row, sets selection on the row.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Selection.SelectTableColumn">
            <summary>
            If selection is inside a table column, sets selection on the column.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Selection.SelectTableCells(System.Collections.Generic.List{System.Xml.XmlNode})">
            <summary>
            Selects given <paramref name="cells"/>.
            </summary>
            <param name="cells">A list of cells of <b>XmlNode</b> type.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Selection.ApplyTableStyle(System.String,System.String)">
            <summary>
            Applies, if possible, specified class-attribute style to table item.
            </summary>
            <param name="tag">Specified table item type(node name).</param>
            <param name="styleClassName">Style name.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Selection.CanApplyTableStyle(System.String,System.String)">
            <summary>
            Checks, is specified class-attribute style can be applied to table item.
            </summary>
            <param name="tag">Specified table item type(node name).</param>
            <param name="styleClassName">Style name.</param>
            <returns>True, if style can be applied; otherwise, False.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Selection.IncreaseIndent">
            <summary>
            Increase the indent level of the selected paragraphs through applying blockquote tag.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Selection.DecreaseIndent">
            <summary>
            Decrease the indent level of the selected paragraphs through removing blockquote tag.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Selection.CanChangeIndent">
            <summary>
            Return true, if IncreaseIndent and DecreaseIndent can be executed, otherwise false.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Selection.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Table">
            <summary>
            Allows the user to work with a table currently selected in the editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Table.Action">
            <summary>
            Determines the action to perform on the table.
            </summary>
            <remarks>
            Use this when you call the <see cref="M:C1.Win.C1Editor.Table.CanExecute(C1.Win.C1Editor.Table.Action)" /> method or the <see cref="M:C1.Win.C1Editor.Table.Execute(C1.Win.C1Editor.Table.Action)" /> method to specify
            what dialog type to show.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Editor.Table.Action.SelectTable">
            <summary>
            Selects all cells in the table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.Action.SelectRow">
            <summary>
            Selects all cells in the table row.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.Action.SelectColumn">
            <summary>
            Selects all cell in the table column.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.Action.SelectCell">
            <summary>
            Selects all text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.Action.DeleteTable">
            <summary>
            Deletes the selected table.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.Action.DeleteRows">
            <summary>
            Deletes the selected table rows.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.Action.DeleteColumns">
            <summary>
            Deletes the selected table columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.Action.InsertColumnBefore">
            <summary>
            Inserts a column before the selected column.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.Action.InsertColumnAfter">
            <summary>
            Inserts a column after the selected column.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.Action.InsertRowAbove">
            <summary>
            Inserts a row above the selected row.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.Action.InsertRowBelow">
            <summary>
            Inserts a row below the selected row.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.Action.MergeCells">
            <summary>
            Merges the selected cells.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.Action.SplitCells">
            <summary>
            Splits the selected cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Table.DialogType">
            <summary>
            Represents the type of a dialog box to be used.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.DialogType.Table">
            <summary>
             Table dialog box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.DialogType.Row">
            <summary>
            Row dialog box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.DialogType.Column">
            <summary>
            Column dialog box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Table.DialogType.Cell">
            <summary>
            Cell dialog box.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Table.Execute(C1.Win.C1Editor.Table.Action)">
            <summary>
            Executes the specified action.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Table.CanExecute(C1.Win.C1Editor.Table.Action)">
            <summary>
            Returns a Boolean value indicating whether the specified action can be executed.
            </summary>
            <param name="action">The action to be executed.</param>
            <returns>A Boolean value indicating whether or not the specified action can be executed.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Table.ShowDialog(C1.Win.C1Editor.Table.DialogType)">
            <summary>
            Shows the specified dialog.
            </summary>
            <param name="type">The type of the dialog to show.</param>
        </member>
        <member name="M:C1.Win.C1Editor.Table.CanShowDialog(C1.Win.C1Editor.Table.DialogType)">
            <summary>
            Returns a Boolean value indicating whether the specified dialog box can be shown.
            </summary>
            <param name="type">The type of dialog box to be shown.</param>
            <returns>A Boolean value indicating whether or not the specified dialog can be shown.</returns>
        </member>
        <member name="T:C1.Win.C1Editor.List">
            <summary>
            Allows the user to work with a list currently selected in the editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.List.Action">
            <summary>
            Determines the action to perform on the list.
            </summary>
            <remarks>
            Use this when you call the <see cref="M:C1.Win.C1Editor.List.CanExecute(C1.Win.C1Editor.List.Action)" /> method or the <see cref="M:C1.Win.C1Editor.List.Execute(C1.Win.C1Editor.List.Action)" /> method to specify
            what action to execute.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Editor.List.Action.IncreaseLevel">
            <summary>
            Increase level of the selected list items.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.List.Action.DecreaseLevel">
            <summary>
            Decrease level of the selected list items.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.List.Action.ContinueNumbering">
            <summary>
            Continue numbering.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.List.Action.RestartNumbering">
            <summary>
            Restart numbering.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.List.ListType">
            <summary>
            Determines the type of the list.
            </summary>
            <remarks>
            Used by the see <see cref="P:C1.Win.C1Editor.List.Type" /> property.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Editor.List.ListType.None">
            <summary>
            No list.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.List.ListType.Numbered">
            <summary>
            Numbered list.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.List.ListType.Bulleted">
            <summary>
            Bulleted list.
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.List.Execute(C1.Win.C1Editor.List.Action)">
            <summary>
            Executes the specified action.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:C1.Win.C1Editor.List.CanExecute(C1.Win.C1Editor.List.Action)">
            <summary>
            Returns a Boolean value indicating whether the specified action can be executed.
            </summary>
            <param name="action">The action to be executed.</param>
            <returns>A Boolean value indicating whether or not the specified action can be executed.</returns>
        </member>
        <member name="P:C1.Win.C1Editor.List.Type">
            <summary>
            Gets or sets list type.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Comments">
            <summary>
            Allows the user to work with a list currently selected in the editor.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Comments.Action">
            <summary>
            Determines the action to perform on the comments.
            </summary>
            <remarks>
            Use this when you call the <see cref="M:C1.Win.C1Editor.Comments.CanExecute(C1.Win.C1Editor.Comments.Action)" /> method or the <see cref="M:C1.Win.C1Editor.Comments.Execute(C1.Win.C1Editor.Comments.Action)" /> method to specify
            what action to execute.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Editor.Comments.Action.Add">
            <summary>
            Adds comment to the current selection.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Comments.Action.Edit">
            <summary>
            Edits the current comment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Comments.Action.Reply">
            <summary>
            Replies to the current comment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Comments.Action.Delete">
            <summary>
            Removes the current comment.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Comments.Action.DeleteAll">
            <summary>
            Removes all comments in the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Comments.Action.MovePrevious">
            <summary>
            Moves to the previous comment
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.Comments.Action.MoveNext">
            <summary>
            Moves to the next comment
            </summary>
        </member>
        <member name="M:C1.Win.C1Editor.Comments.CanExecute(C1.Win.C1Editor.Comments.Action)">
            <summary>
            Returns a Boolean value indicating whether the specified action can be executed.
            </summary>
            <param name="action">The action to be executed.</param>
            <returns>A Boolean value indicating whether or not the specified action can be executed.</returns>
        </member>
        <member name="M:C1.Win.C1Editor.Comments.Execute(C1.Win.C1Editor.Comments.Action)">
            <summary>
            Returns a Boolean value indicating whether the specified action can be executed.
            </summary>
            <param name="action">The action to be executed.</param>
            <returns>A Boolean value indicating whether or not the specified action can be executed.</returns>
        </member>
        <member name="T:C1.Win.C1Editor.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and DesignStrings classes to
            return the localized Attribute string.   
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and DesignStrings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Localization.DesignStrings">
            <summary>
            Static class containing UI strings used in design-time.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Localization.DesignStrings.ResourceManager">
            <summary>
            The <see cref="P:C1.Win.C1Editor.Localization.DesignStrings.ResourceManager"/> object used for lookup resources.
            </summary>
            <remarks>Set this property to the valid value if 
            you define resources in a Custom Control assembly.</remarks>
        </member>
        <member name="P:C1.Win.C1Editor.Localization.DesignStrings.UICulture">
            <summary>
            Returns default <see cref="T:System.Globalization.CultureInfo"/> object used as fallback culture.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Localization.Strings">
            <summary>
            Static class containing UI strings used in run-time.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.Resources.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.AddCell">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ArrowDown">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ArrowRight">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.bookmark_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.BorderAll">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.BorderBottom">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.BorderLeft">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.BorderNone">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.BorderRight">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.BorderTop">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.c1_xhtml_strict">
             <summary>
               Looks up a localized string similar to &lt;!--
               Extensible HTML version 1.0 Strict DTD
            
               This is the same as HTML 4 Strict except for
               changes due to the differences between XML and SGML.
            
               Namespace = http://www.w3.org/1999/xhtml
            
               For further information, see: http://www.w3.org/TR/xhtml1
            
               Copyright (c) 1998-2002 W3C (MIT, INRIA, Keio),
               All Rights Reserved. 
            
               This DTD module is identified by the PUBLIC and SYSTEM identifiers:
            
               PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
               SYSTEM &quot;http://www.w3.org/TR/xhtml1/DTD [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.c1_xhtml_strict_xsd">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &lt;xs:schema version=&quot;1.0&quot; xml:lang=&quot;en&quot;
                xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
                targetNamespace=&quot;http://www.w3.org/1999/xhtml&quot;
                xmlns=&quot;http://www.w3.org/1999/xhtml&quot;
                xmlns:xml=&quot;http://www.w3.org/XML/1998/namespace&quot;
                elementFormDefault=&quot;qualified&quot;&gt;
            
              &lt;xs:annotation&gt;
                &lt;xs:documentation&gt;
                XHTML 1.0 (Second Edition) Strict in XML Schema
            
                This is the same as HTML 4 Strict except for
                changes due to the differences between XML and SG [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.c1_xhtml_transitional">
             <summary>
               Looks up a localized string similar to &lt;!--
               Extensible HTML version 1.0 Transitional DTD
            
               This is the same as HTML 4 Transitional except for
               changes due to the differences between XML and SGML.
            
               Namespace = http://www.w3.org/1999/xhtml
            
               For further information, see: http://www.w3.org/TR/xhtml1
            
               Copyright (c) 1998-2002 W3C (MIT, INRIA, Keio),
               All Rights Reserved. 
            
               This DTD module is identified by the PUBLIC and SYSTEM identifiers:
            
               PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
               SYSTEM &quot;http://www.w3.org/TR/xhtml1/D [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.c1_xhtml_transitional_xsd">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &lt;xs:schema version=&quot;1.0&quot; xml:lang=&quot;en&quot;
                xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
                targetNamespace=&quot;http://www.w3.org/1999/xhtml&quot;
                xmlns=&quot;http://www.w3.org/1999/xhtml&quot;
                xmlns:xml=&quot;http://www.w3.org/XML/1998/namespace&quot;
                elementFormDefault=&quot;qualified&quot;&gt;
            
              &lt;xs:annotation&gt;
                &lt;xs:documentation&gt;
                XHTML 1.0 (Second Edition) Transitional in XML Schema
            
                This is the same as HTML 4 Transitional except for
                changes due to the differences betwee [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.cellproperties_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ClearFormatting_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.columnproperties_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.comment_add_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.comment_delete_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.comment_delete_all_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.comment_edit_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.comment_next_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.comment_previous_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.comment_reply_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.comments_show_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.continue_numbering_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.copy">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.copy1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.Cut">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.deletecolumn_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.deleterow_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.deletetable_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.DragTabBtnClose">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.DragTabBtnClose1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.DragTabBtnList">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.DragTabBtnList1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.error">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.fatal_error">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.flashmove_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.formatting_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.gotoright_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.gotoright_16x161">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.GripH">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.GripH1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.GripV">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.GripV1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.hyperlink_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.InsertColumnAfter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.InsertColumnBefore">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.InsertRowAfter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.InsertRowBefore">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.mergecells_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.openfolder_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.openfolder_16x161">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.paste_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.Picture16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.Remove">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.Remove1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.Resize">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.restart_numbering_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.rowproperties_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.splitcells_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.StylePropertyInherited">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.StylePropertyOverridden">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.StylePropertySpecified">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.tableproperties_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.Text">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_AlignTextCenter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_AlignTextJustify">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_AlignTextLeft">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_AlignTextRight">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_BackColor">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_BigFont">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Bold">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Bookmark">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Bullets">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_ClearFormatting">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Copy">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Cut">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Decrease">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_DeleteColumns">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_DeleteRows">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_DeleteTable">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_DeleteTableItems">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_DesignMode">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_EditorDesignMode">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_EditorPreviewMode">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_EditorSourceMode">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_FillColor">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Find">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_FlashMovie">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_ForeColor">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Hyperlink">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Image">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_IncreaseIndent">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_InsertColumnAfter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_InsertColumnBefore">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_InsertRowAbove">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_InsertRowBelow">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_InsertTableItems">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Italic">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_New">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Numbers">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Open">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Paste">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Print">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Redo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Replace">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Save">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_SelectAll">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_SmallFont">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_SourceMode">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Strikethrough">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Subscript">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Superscript">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Table">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_TableCellProperties">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_TableColumnProperties">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_TableItemsProperties">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_TableProperties">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_TableRowProperties">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Underline">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_Undo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.ToolStrip_WordCount">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.warning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:C1.Win.C1Editor.Resources.Resources.xml_xsd">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&apos;1.0&apos;?&gt;
            &lt;?xml-stylesheet href=&quot;../2008/09/xsd.xsl&quot; type=&quot;text/xsl&quot;?&gt;
            &lt;xs:schema targetNamespace=&quot;http://www.w3.org/XML/1998/namespace&quot; 
              xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; 
              xmlns   =&quot;http://www.w3.org/1999/xhtml&quot;
              xml:lang=&quot;en&quot;&gt;
            
             &lt;xs:annotation&gt;
              &lt;xs:documentation&gt;
               &lt;div&gt;
                &lt;h1&gt;About the XML namespace&lt;/h1&gt;
            
                &lt;div class=&quot;bodytext&quot;&gt;
                 &lt;p&gt;
                  This schema document describes the XML namespace, in a form
                  suitable for import by other schema documents.
                 &lt;/p&gt;
                  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:C1.Win.C1Editor.EditorMode">
            <summary>
            Defines the behavior of the <see cref="T:C1.Win.C1Editor.C1Editor"/>.
            </summary>
            <remarks>
            EditorMode is used by the <see cref="P:C1.Win.C1Editor.C1Editor.Mode"/>  property.
            </remarks>
        </member>
        <member name="F:C1.Win.C1Editor.EditorMode.Design">
            <summary>
            Design is the main mode of the editor.
            <see cref="T:C1.Win.C1Editor.C1Editor"/> in this mode represents a WYSIWYG XHTML editor.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.EditorMode.Source">
            <summary>
            Source mode allows you to edit XHTML markup.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.EditorMode.Preview">
            <summary>
            Preview mode allows you to preview how the document will look.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.DialogType">
            <summary>
            Represents the type of dialog box to show in the <see cref="M:C1.Win.C1Editor.C1Editor.ShowDialog(C1.Win.C1Editor.DialogType)"/>.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.DialogType.NewTable">
            <summary>
            New table dialog box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.DialogType.Image">
            <summary>
            Insert or edit image dialog box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.DialogType.FlashMovie">
            <summary>
            Insert or edit Flash movie dialog box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.DialogType.Hyperlink">
            <summary>
            Insert or edit hyperlink dialog box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.DialogType.Bookmark">
            <summary>
            Insert or edit bookmark dialog box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.DialogType.Find">
            <summary>
            Find dialog box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.DialogType.Replace">
            <summary>
            Replace dialog box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.DialogType.Format">
            <summary>
            Text formatting dialog box.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.DialogType.PageSetup">
            <summary>
            Page setup dialog box.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.C1StyleType">
            <summary>
            Specifies the types of content to which the inline style will be applied.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.C1StyleType.Character">
            <summary>
            Style is applied only to characters in the range.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.C1StyleType.Paragraph">
            <summary>
            Style is applied only to whole paragraphs containing the text range.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.C1StyleType.Table">
            <summary>
            Style is applied only to tables containing the range.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.C1StyleType.List">
            <summary>
            Style is applied only to lists containing the range.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.C1StyleType.Any">
            <summary>
            Style is applied to any kind of content.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.MoveUnit">
            <summary>
            Specifies the kind of move requested in a <see cref="M:C1.Win.C1Editor.C1TextPointer.Move(C1.Win.C1Editor.MoveUnit,System.Int32)"/> method call.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.MoveUnit.Character">
            <summary>
            Move by characters.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.MoveUnit.StartOfWord">
            <summary>
            Move the pointer to the beginning of the next word.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.MoveUnit.EndOfWord">
            <summary>
            Move the pointer to the end of the next word.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.HtmlEventTypes">
            <summary>
            Specifies the kind of an HTML event in <see cref="T:C1.Win.C1Editor.HtmlEventEventArgs"/> event arguments of the <see cref="E:C1.Win.C1Editor.C1Editor.HtmlEvent"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.Unknown">
            <summary>
            Unknown event type.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.Help">
            <summary>
            HTML event when the user presses the F1 key while the client is the active window.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.Click">
            <summary>
            HTML event when the user clicks the left mouse button on the object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.DoubleClick">
            <summary>
            HTML event when the user double-clicks the object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.KeyDown">
            <summary>
            HTML event when the user presses a key.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.KeyUp">
            <summary>
            HTML event when the user releases a key.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.KeyPress">
            <summary>
            HTML event when the user presses an alphanumeric key.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.MouseDown">
            <summary>
            HTML event when the user clicks the object with either mouse button.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.MouseUp">
            <summary>
            HTML event when the user releases a mouse button while the mouse is over the object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.MouseMove">
            <summary>
            HTML event when the user moves the mouse over the object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.MouseOver">
            <summary>
            HTML event when the user moves the mouse pointer into the object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.MouseOut">
            <summary>
            HTML event when the user moves the mouse pointer outside the boundaries of the object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.ReadyState">
            <summary>
            HTML event when the state of the object has changed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.BeforeUpdate">
            <summary>
            HTML event on a databound object before updating the associated data in the data source object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.AfterUpdate">
            <summary>
            HTML event on a databound object after successfully updating the associated data in the data source object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.RowExit">
            <summary>
            HTML event just before the data source control changes the current row in the object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.RowEnter">
            <summary>
            HTML event to indicate that the current row has changed in the data source and new data values are available on the object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.DragStart">
            <summary>
            HTML event on the source object when the user starts to drag a text selection or selected object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.SelectStart">
            <summary>
            HTML event when the object is being selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.ErrorUpdate">
            <summary>
            HTML event on a databound object when an error occurs while updating the associated data in the data source object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.ContextMenu">
            <summary>
            HTML event when the user clicks the right mouse button in the client area, opening the context menu.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.Stop">
            <summary>
            HTML event when the user clicks the Stop button or leaves the document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.RowsDelete">
            <summary>
            HTML event when rows are about to be deleted from the recordset.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.RowInserted">
            <summary>
            HTML event just after new rows are inserted in the current recordset.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.CellChange">
            <summary>
            HTML event when data changes in the data provider.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.PropertyChange">
            <summary>
            HTML event when a property changes on the object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.DatasetChanged">
            <summary>
            HTML event when the data set exposed by a data source object changes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.DataAvailable">
            <summary>
            HTML event periodically as data arrives from data source objects that asynchronously transmit their data.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.DatasetComplete">
            <summary>
            HTML event to indicate that all data is available from the data source object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.BeforeEditFocus">
            <summary>
            HTML event before an object contained in an editable element enters a UI-activated state or when an editable container object is control selected.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.SelectionChange">
            <summary>
            HTML event when the selection state of a document changes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.ControlSelect">
            <summary>
            HTML event when the user is about to make a control selection of the object.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.MouseWheel">
            <summary>
            HTML event when the wheel button is rotated.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.FocusIn">
            <summary>
             event for an element just prior to setting focus on that element.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.FocusOut">
            <summary>
            HTML event for the current element with focus immediately after moving focus to another element.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.Activate">
            <summary>
            HTML event when the object is set as the active element.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.Deactivate">
            <summary>
            HTML event when the activeElement is changed from the current object to another object in the parent document.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.BeforeActivate">
            <summary>
            HTML event immediately before the object is set as the active element.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.HtmlEventTypes.BeforeDeactivate">
            <summary>
            HTML event immediately before the activeElement is changed from the current object to another object in the parent document.
            </summary>
        </member>
        <member name="T:C1.Win.C1Editor.IERenderEngine">
            <summary>
            Specifies the IE rendering engine used by the WebBrowser control.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.IERenderEngine.IE7">
            <summary>
            Specifies the IE=7 rendering engine behavior.
            </summary>
        </member>
        <member name="F:C1.Win.C1Editor.IERenderEngine.IE8">
            <summary>
            Specifies the IE=8 rendering engine behavior.
            </summary>
        </member>
        <member name="T:C1.Win.Util.StringList">
            <summary>
            Represents a List of strings.
            </summary>
        </member>
        <member name="M:C1.Win.Util.StringList.Contains(System.String,System.Boolean)">
            <summary>
            Determines whether an string is in the <see cref="T:C1.Win.Util.StringList"/>. 
            </summary>
            <param name="item">The string to locate in the <see cref="T:C1.Win.Util.StringList"/>, ignore or honore its case. The value can be a null reference for reference types.</param>
            <param name="ignoreCase">A Boolean indicating a case-sensitive or insensitive comparison. (true indicates a case-insensitive comparison.)</param>
            <returns>true if <paramref name="item"/> is found in the <see cref="T:C1.Win.Util.StringList"/>; otherwise, false.</returns>
        </member>
        <member name="M:C1.Win.Util.UIUtils.DisableCloseButton(System.Windows.Forms.Form)">
            <summary>
            Disables the "X" close bitton on the form.
            </summary>
            <param name="form">A <see cref="T:System.Windows.Forms.Form"/> when button to disable.</param>
        </member>
        <member name="M:C1.Win.Util.UIUtils.AdjustToScreen(System.Drawing.Rectangle)">
            <summary>
            Adjust the rectangle to desktop
            </summary>
            <param name="bounds"><see cref="T:System.Drawing.Rectangle"/> to adjust.</param>
            <returns>The adjusted <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:C1.Win.Util.UIUtils.AdjustBrowseButtons(System.Windows.Forms.Button[],System.Windows.Forms.Control[])">
            <summary>
            Adjusts the buttons height and top position to the controls.
            </summary>
            <param name="buttons">An array of <see cref="T:System.Windows.Forms.Button"/>s to adjust.</param>
            <param name="controls">An array of <see cref="T:System.Windows.Forms.Control"/>s for adjust.</param>
        </member>
        <member name="M:C1.Win.Util.UIUtils.SetNodeText(System.Windows.Forms.TreeNode,System.String)">
            <summary>
            Sets text to the <see cref="T:System.Windows.Forms.TreeNode"/>.
            </summary>
            <param name="node">A <see cref="T:System.Windows.Forms.TreeNode"/> to change text.</param>
            <param name="text">A new node text.</param>
            <remarks>This method fixes .NET 2.0 bug of <see cref="T:System.Windows.Forms.TreeView"/> perfomance.</remarks>
        </member>
        <member name="M:C1.Win.Util.WinAPI.GetWindowText(System.Int32)">
            <summary>
            Returns the window text. 
            </summary>
            <param name="hWnd">The window handle to get text.</param>
            <returns>The window text.</returns>
        </member>
        <member name="T:C1.Win.Util.WinAPI.WindowEnumerator">
            <summary>
            Class to enumerate windows.
            </summary>
        </member>
        <member name="M:C1.Win.Util.WinAPI.WindowEnumerator.GetWindowsByProcessId(System.IntPtr,System.Boolean)">
            <summary>
            Returns an array of all top level windows which were created within process as a defined window.
            </summary>
            <param name="hWnd">The handle of an window that defines process.</param>
            <param name="visibleOnly">Get only visible windows.</param>
            <returns>An array of all visible top level windows which were created within process as a defined window.</returns>
        </member>
        <member name="M:C1.Win.Util.WinAPI.WindowEnumerator.GetWindowsByProcessId(System.Int32,System.Boolean)">
            <summary>
            Returns an array of all top level windows which were created within the defined process id.
            </summary>
            <param name="id">id.</param>
            <param name="visibleOnly">Get only visible windows.</param>
            <returns>An array of all top level windows which were created within the defined process id.</returns>
        </member>
        <member name="T:C1.Win.Util.ToolTipCloseButton">
            <summary>
            Graphical tooltip close button that can be used on all controls.
            </summary>
        </member>
        <member name="M:C1.Win.Util.ToolTipCloseButton.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Util.ToolTipCloseButton"/> class.
            </summary>
            <param name="parent">A container <see cref="T:System.Windows.Forms.Control"/> that contains this button.</param>
        </member>
        <member name="E:C1.Win.Util.ToolTipCloseButton.Click">
            <summary>
            Occurs when the control is clicked.
            </summary>
        </member>
        <member name="P:C1.Win.Util.ToolTipCloseButton.Size">
            <summary>
            Gets the button size.
            </summary>
        </member>
        <member name="P:C1.Win.Util.ToolTipCloseButton.Parent">
            <summary>
            Gets the parent container of the button.
            </summary>
        </member>
        <member name="P:C1.Win.Util.ToolTipCloseButton.Location">
            <summary>
            Gets or sets the button location.
            </summary>
        </member>
        <member name="P:C1.Win.Util.ToolTipCloseButton.Anchor">
            <summary>
            Gets or sets the edges of the container to which a button is bound 
            and determines how a button is moved with its parent. 
            </summary>
        </member>
        <member name="P:C1.Win.Util.ToolTipCloseButton.Visible">
            <summary>
            Gets or sets a value indicating whether the button is displayed.
            </summary>
        </member>
        <member name="M:C1.Win.Util.ToolTipCloseButton.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="T:C1.Win.Util.ValuesConverter">
            <summary>
            CSS values converter helper class.
            </summary>
        </member>
        <member name="M:C1.Win.Util.ValuesConverter.ToColor(System.String)">
            <summary>
            Translates a CSS color representation to a GDI+ <see cref="T:System.Drawing.Color"></see> structure.
            </summary>
            <param name="cssColor">The string with the CSS color representation.</param>
            <returns>The <see cref="T:System.Drawing.Color"></see> structure that represents the translated HTML color.</returns>
        </member>
        <member name="M:C1.Win.Util.ValuesConverter.ToCSSString(System.Nullable{System.Drawing.Color})">
            <summary>
            Converts <see cref="T:System.Drawing.Color"/> to CSS hex-formatted string.
            </summary>
            <param name="color">Color.</param>
            <returns>CSS formatted string.</returns>
        </member>
        <member name="M:C1.Win.Util.ValuesConverter.ToCSSString(System.Drawing.Color)">
            <summary>
            Converts <see cref="T:System.Drawing.Color"/> to CSS hex-formatted string.
            </summary>
            <param name="color">Color.</param>
            <returns>CSS formatted string.</returns>
        </member>
        <member name="M:C1.Win.Util.ValuesConverter.UrlToCssUrl(System.String)">
            <summary>
            Converts url to CSS URL string.
            </summary>
        </member>
        <member name="M:C1.Win.Util.ValuesConverter.UrlFromCssUrl(System.String)">
            <summary>
            Converts CSS URL string to URL.
            </summary>
        </member>
        <member name="M:C1.Win.Util.ValuesConverter.ClearFontFamilyName(System.String)">
            <summary>
            Clear font family from waste chars.
            </summary>
        </member>
        <member name="T:C1.C1PreviewClient.Utils">
            <summary>
            Contains common functions.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AllowedCallerAttribute">
            <summary>
            Attribute used to specify assemblies that can use this product without a license.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerString">
            <summary>
            WinForms version string representation (4 dot-delimited numbers).
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VersionStr">
            <summary>
            Same as <see cref="F:C1.Util.Licensing.VersionConst.VerString"/>.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.AssemblyNames">
            <summary>
            Specifies assembly name parts, used by AssemblyCommonInfo to generate actual assembly names.
            </summary>
        </member>
    </members>
</doc>
